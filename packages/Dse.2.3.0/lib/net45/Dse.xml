<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dse</name>
    </assembly>
    <members>
        <member name="T:Dse.AggregateMetadata">
            <summary>
            Describes a CQL aggregate.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.Name">
            <summary>
            Name of the CQL aggregate.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.KeyspaceName">
            <summary>
            Name of the keyspace where the cql aggregate is declared.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.Signature">
            <summary>
            Signature of the function.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.ArgumentTypes">
            <summary>
            List of the function argument types.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.StateFunction">
            <summary>
            State Function.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.StateType">
            <summary>
            State type.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.FinalFunction">
            <summary>
            Final function.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.InitialCondition">
            <summary>
            Initial state value of this aggregate.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.ReturnType">
            <summary>
            Type of the return value.
            </summary>
        </member>
        <member name="P:Dse.AggregateMetadata.Deterministic">
            <summary>
            Indicates whether or not this aggregate is deterministic. This means that given a particular input,
            the aggregate will always produce the same output.
            </summary>
        </member>
        <member name="T:Dse.Auth.BaseAuthenticator">
            <summary>
            Base class for Authenticator implementations that want to make use of
            the authentication scheme negotiation in the DseAuthenticator
            </summary>
        </member>
        <member name="T:Dse.Auth.DseGssapiAuthProvider">
            <summary>
            Provides GSSAPI authenticator instances for clients to connect to DSE clusters secured with the
            DseAuthenticator.
            </summary>
        </member>
        <member name="M:Dse.Auth.DseGssapiAuthProvider.#ctor(System.String,System.Func{System.Net.IPEndPoint,System.String})">
            <summary>
            Creates a new instance of <see cref="T:Dse.Auth.DseGssapiAuthProvider"/>.
            </summary>
            <param name="service">Name of the service. Defaults to &quot;dse&quot;</param>
            <param name="hostNameResolver">
            Method to resolve the host name given the endpoint. Defaults to <see cref="M:Dse.Auth.DseGssapiAuthProvider.UseIpResolver(System.Net.IPEndPoint)"/>.
            </param>
        </member>
        <member name="M:Dse.Auth.DseGssapiAuthProvider.NewAuthenticator(System.Net.IPEndPoint)">
            <summary>
            Returns a new <see cref="T:Dse.IAuthenticator"/> instance to handle authentication for a given endpoint.
            </summary>
            <exception cref="T:Dse.AuthenticationException">When the host name can not be resolved.</exception>
        </member>
        <member name="M:Dse.Auth.DseGssapiAuthProvider.SetName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Auth.DseGssapiAuthProvider.UseIpResolver(System.Net.IPEndPoint)">
            <summary>
            Returns the IP address of the endpoint as a string.
            </summary>
        </member>
        <member name="M:Dse.Auth.DseGssapiAuthProvider.ReverseDnsResolver(System.Net.IPEndPoint)">
            <summary>
            Performs a reverse DNS query that resolves an IPv4 or IPv6 address to a hostname.
            </summary>
        </member>
        <member name="T:Dse.Auth.DsePlainTextAuthProvider">
            <summary>
            AuthProvider that provides plain text authenticator instances for clients to connect 
            to DSE clusters secured with the DseAuthenticator.
            </summary>
            <example>
            Creating a auth-enabled Cluster instance:
            <code>
            var cluster = DseCluster.Builder()
                .AddContactPoint(h1)
                .WithAuthProvider(new DsePlainTextAuthProvider("user", "p@sword1"))
                .Build();
            </code>
            </example>
        </member>
        <member name="M:Dse.Auth.DsePlainTextAuthProvider.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Auth.DsePlainTextAuthProvider"/>.
            </summary>
            <param name="username">A not <c>null</c> string representing the username.</param>
            <param name="password">A not <c>null</c> string representing the username.</param>
        </member>
        <member name="M:Dse.Auth.DsePlainTextAuthProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Auth.DsePlainTextAuthProvider"/>, enabling proxy authentication.
            </summary>
            <param name="username">A not <c>null</c> string representing the username.</param>
            <param name="password">A not <c>null</c> string representing the username.</param>
            <param name="authorizationId">
            The optional authorization ID. Providing an authorization ID allows the currently authenticated user
            to act as a different user (a.k.a. proxy authentication).
            </param>
        </member>
        <member name="M:Dse.Auth.DsePlainTextAuthProvider.NewAuthenticator(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Auth.DsePlainTextAuthProvider.SetName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Dse.Auth.SspiClient">
            <summary>
            A Windows-only <see cref="T:Dse.Auth.IGssapiClient"/> implementation.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Buffers.SecureBufferInternal">
            <summary>
            Represents a native SecureBuffer structure, which is used for communicating
            buffers to the native APIs.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferInternal.Count">
            <summary>
            When provided to the native API, the total number of bytes available in the buffer.
            On return from the native API, the number of bytes that were filled or used by the
            native API.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferInternal.Type">
            <summary>
            The type or purpose of the buffer.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferInternal.Buffer">
            <summary>
            An pointer to a pinned byte[] buffer.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Buffers.SecureBuffer">
            <summary>
            Stores buffers to provide tokens and data to the native SSPI APIs.
            </summary>
            <remarks>The buffer is translated into a SecureBufferInternal for the actual call.
            To keep the call setup code simple, and to centralize the buffer pinning code,
            this class stores and returns buffers as regular byte arrays. The buffer 
            pinning support code in SecureBufferAdapter handles conversion to SecureBufferInternal
            for pass to the managed api, as well as pinning relevant chunks of memory.
            
            Furthermore, the native API may not use the entire buffer, and so a mechanism
            is needed to communicate the usage of the buffer separate from the length
            of the buffer.</remarks>
        </member>
        <member name="M:Dse.Auth.Sspi.Buffers.SecureBuffer.#ctor(System.Byte[],Dse.Auth.Sspi.Buffers.BufferType)">
            <summary>
            Initializes a new instance of the SecureBuffer class.
            </summary>
            <param name="buffer">The buffer to wrap.</param>
            <param name="type">The type or purpose of the buffer, for purposes of 
            invoking the native API.</param>
        </member>
        <member name="P:Dse.Auth.Sspi.Buffers.SecureBuffer.Type">
            <summary>
            The type or purposes of the API, for invoking the native API.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Buffers.SecureBuffer.Buffer">
            <summary>
            The buffer to provide to the native API.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Buffers.SecureBuffer.Length">
            <summary>
            The number of elements that were actually filled or used by the native API,
            which may be less than the total length of the buffer.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Buffers.SecureBufferAdapter">
            <summary>
            Prepares SecureBuffers for providing them to native API calls.
            </summary>
            <remarks>
            The native APIs consume lists of buffers, with each buffer indicating its type or purpose.
            
            The buffers themselves are simple byte arrays, and the native APIs consume arrays of buffers.
            
            Since winapi calling convention, perhaps as an extension of C calling convention, does not
            provide a standard convention means of communicating the length of any array, custom structures
            must be created to carry the buffer length and usage.
            
            Not only does the API need to know how long each buffer is, and how long the array of buffers is,
            it needs to communicate back how much of each buffer was filled; we may provide it a token buffer
            that is 12288 bytes long, but it might only use 125 bytes of that, which we need a way of knowing.
            
            As a result of this, the API requires byte arrays to be carried in structs that are natively known as 
            SecureBuffers (known as SecureBufferInternal in this project), and then arrays of SecureBuffers are
            carried in a SecureBufferDescriptor structure.
            
            As such, this class has to do a significant amount of marshaling work just to get the buffers back and
            forth to the native APIs.
              * We have to pin all buffers
              * We have to pin the array of buffers
              * We have to obtain IntPtr handles to each of the buffers and to the array of buffers.
              * Since we provide EasyToUse SecureBuffer classes from the rest of the project, but we 
                provide SecureBufferInternal structures from the native API, we have to copy back values
                from the SecureBufferInternal structs to our SecureBuffer class.
                
            To make this class easy to use, it accepts either one or many buffers as its constructor; and
            implements IDisposable to know when to marshal values back from the unmanaged structures and to 
            release pinned handles. 
            
            Additionally, in case the adapter is leaked without disposing, the adapter implements a Critical
            Finalizer, to ensure that the GCHandles are released, else we will permanently pin handles.
            
            The typical flow is to take one or many buffers; create and fill the neccessary unmanaged structures;
            pin memory; acquire the IntPtr handles; let the caller access the top-level IntPtr representing
            the SecureBufferDescriptor, to provide to the native APIs; wait for the caller to invoke the native
            API; wait for the caller to invoke our Dispose; marshal back any data from the native structures
            (buffer write counts); release all GCHandles to unpin memory.
            
            The total descriptor structure is as follows:
            |-- Descriptor handle 
                |-- Array of buffers
                    |-- Buffer 1
                    |-- Buffer 2
                    ...
                    |-- Buffer N.
                    
            Each object in that structure must be pinned and passed as an IntPtr to the native APIs. 
            All this to pass what boils down to a List of byte arrays..
            </remarks>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.disposed">
            <summary>
            Whether the adapter has already been disposed.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.buffers">
            <summary>
            The list of mananged SecureBuffers the caller provided to us.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.descriptorHandle">
            <summary>
            The top level handle representing the entire descriptor.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.bufferCarrierHandle">
            <summary>
            The handle representing the array of buffers.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.bufferHandles">
            <summary>
            The handles representing each actual buffer.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.descriptor">
            <summary>
            The native buffer descriptor
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.bufferCarrier">
            <summary>
            An array of the native buffers.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.#ctor(Dse.Auth.Sspi.Buffers.SecureBuffer)">
            <summary>
            Initializes a SecureBufferAdapter to carry a single buffer to the native api.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.#ctor(System.Collections.Generic.IList{Dse.Auth.Sspi.Buffers.SecureBuffer})">
            <summary>
            Initializes the SecureBufferAdapter to carry a list of buffers to the native api.
            </summary>
            <param name="buffers"></param>
        </member>
        <member name="P:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.Handle">
            <summary>
            Gets the top-level pointer to the secure buffer descriptor to pass to the native API.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.Dispose">
            <summary>
            Completes any buffer passing marshaling and releases all resources associated with the adapter.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Buffers.SecureBufferAdapter.Dispose(System.Boolean)">
            <summary>
            Completes any buffer passing marshaling and releases all resources associated with the adapter.
            This may be called by the finalizer, or by the regular Dispose method. In the case of the finalizer,
            we've been leaked and there's no point in attempting to marshal back data from the native structures,
            nor should we anyway since they may be gone.
            </summary>
            <param name="disposing">Whether Dispose is being called.</param>
        </member>
        <member name="T:Dse.Auth.Sspi.Buffers.SecureBufferDataRep">
            <summary>
            Describes how a buffer's opaque internals should be stored, with regards to byte ordering.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferDataRep.Native">
            <summary>
            Buffers internals are to be stored in the machine native byte order, which will change depending on
            what machine generated the buffer.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferDataRep.Network">
            <summary>
            Buffers are stored in network byte ordering, that is, big endian format.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Buffers.SecureBufferDescInternal">
            <summary>
            Represents the native layout of the secure buffer descriptor that is provided directly
            to native API calls.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferDescInternal.Version">
            <summary>
            The buffer structure version.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferDescInternal.NumBuffers">
            <summary>
            The number of buffers represented by this descriptor.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferDescInternal.Buffers">
            <summary>
            A pointer to a array of buffers, where each buffer is a byte[].
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.SecureBufferDescInternal.ApiVersion">
            <summary>
            Indicates the buffer structure version supported by this structure. Always 0.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Buffers.BufferType">
            <summary>
            Describes the type and purpose of a secure buffer passed to the native API.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Empty">
            <summary>
            The buffer is empty.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Data">
            <summary>
            The buffer contains message data. Message data can be plaintext or cipher text data.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Token">
            <summary>
            The buffer contains opaque authentication token data.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Parameters">
            <summary>
            The buffer contains parameters specific to the security package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Missing">
            <summary>
            The buffer placeholder indicating that some data is missing.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Extra">
            <summary>
            The buffer passed to an API call contained more data than was necessary for completing the action,
            such as the case when a streaming-mode connection that does not preserve message bounders, such as TCP 
            is used as the transport. The extra data is returned back to the caller in a buffer of this type.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Trailer">
            <summary>
            The buffer contains a security data trailer, such as a message signature or marker, or framing data.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Buffers.BufferType.Header">
            <summary>
            The buffer contains a security data header, such as a message signature, marker, or framing data.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.ByteWriter">
            <summary>
            Reads and writes value types to byte arrays with explicit endianness.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.ByteWriter.WriteInt16_BE(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a 2-byte signed integer to the buffer in big-endian format.
            </summary>
            <param name="value">The value to write to the buffer.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="position">The index of the first byte to write to.</param>
        </member>
        <member name="M:Dse.Auth.Sspi.ByteWriter.WriteInt32_BE(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a 4-byte signed integer to the buffer in big-endian format.
            </summary>
            <param name="value">The value to write to the buffer.</param>
            <param name="buffer">The buffer to write to.</param>
            <param name="position">The index of the first byte to write to.</param>
        </member>
        <member name="M:Dse.Auth.Sspi.ByteWriter.ReadInt16_BE(System.Byte[],System.Int32)">
            <summary>
            Reads a 2-byte signed integer that is stored in the buffer in big-endian format.
            The returned value is in the native endianness.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="position">The index of the first byte to read.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.ByteWriter.ReadInt32_BE(System.Byte[],System.Int32)">
            <summary>
            Reads a 4-byte signed integer that is stored in the buffer in big-endian format.
            The returned value is in the native endianness.
            </summary>
            <param name="buffer">The buffer to read.</param>
            <param name="position">The index of the first byte to read.</param>
            <returns></returns>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.ClientContext">
            <summary>
            Represents a client security context. Provides the means to establish a shared security context
            with the server and to encrypt, decrypt, sign and verify messages to and from the server.
            </summary>
            <remarks>
            A client and server establish a shared security context by exchanging authentication tokens. Once 
            the shared context is established, the client and server can pass messages to each other, encrypted,
            signed, etc, using the established parameters of the shared context.
            </remarks>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.ClientContext.#ctor(Dse.Auth.Sspi.Credentials.ClientCredential,System.String,Dse.Auth.Sspi.Contexts.ContextAttrib)">
            <summary>
            Initializes a new instance of the ClientContext class. The context is not fully initialized and usable
            until the authentication cycle has been completed.
            </summary>
            <param name="cred">The security credential to authenticate as.</param>
            <param name="serverPrinc">The principle name of the server to connect to, or null for any.</param>
            <param name="requestedAttribs">Requested attributes that describe the desired properties of the
            context once it is established. If a context cannot be established that satisfies the indicated
            properties, the context initialization is aborted.</param>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.ClientContext.Init(System.Byte[],System.Byte[]@)">
            <summary>
            Performs and continues the authentication cycle.
            </summary>
            <remarks>
            This method is performed iteratively to start, continue, and end the authentication cycle with the
            server. Each stage works by acquiring a token from one side, presenting it to the other side
            which in turn may generate a new token.
            
            The cycle typically starts and ends with the client. On the first invocation on the client,
            no server token exists, and null is provided in its place. The client returns its status, providing
            its output token for the server. The server accepts the clients token as input and provides a 
            token as output to send back to the client. This cycle continues until the server and client 
            both indicate, typically, a SecurityStatus of 'OK'.
            </remarks>
            <param name="serverToken">The most recently received token from the server, or null if beginning
            the authentication cycle.</param>
            <param name="outToken">The clients next authentication token in the authentication cycle.</param>
            <returns>A status message indicating the progression of the authentication cycle.
            A status of 'OK' indicates that the cycle is complete, from the client's perspective. If the outToken
            is not null, it must be sent to the server.
            A status of 'Continue' indicates that the output token should be sent to the server and 
            a response should be anticipated.</returns>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.Context">
            <summary>
            Represents a security context and provides common functionality required for all security 
            contexts.
            </summary>
            <remarks>
            This class is abstract and has a protected constructor and Initialize method. The exact 
            initialization implementation is provided by a subclasses, which may perform initialization 
            in a variety of manners.
            </remarks>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.Context.WrapNoEncrypt">
            <summary>
            Produce a header or trailer but do not encrypt the message. See: KERB_WRAP_NO_ENCRYPT.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.#ctor(Dse.Auth.Sspi.Credentials.Credential)">
            <summary>
            Performs basic initialization of a new instance of the Context class.
            Initialization is not complete until the ContextHandle property has been set
            and the Initialize method has been called.
            </summary>
            <param name="cred"></param>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.Initialized">
            <summary>
            Whether or not the context is fully formed.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.Credential">
            <summary>
            The credential being used by the context to authenticate itself to other actors.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.ContextHandle">
            <summary>
            A reference to the security context's handle.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.AuthorityName">
            <summary>
            The name of the authenticating authority for the context.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.ContextUserName">
            <summary>
            The logon username that the context represents.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.Expiry">
            <summary>
            The UTC time when the context expires.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Contexts.Context.Disposed">
            <summary>
            Whether the context has been disposed.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.Initialize(System.DateTime)">
            <summary>
            Marks the context as having completed the initialization process, ie, exchanging of authentication tokens.
            </summary>
            <param name="expiry">The date and time that the context will expire.</param>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.Dispose">
            <summary>
            Releases all resources associated with the context.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the context.
            </summary>
            <param name="disposing">If true, release managed resources, else release only unmanaged resources.</param>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.Encrypt(System.Byte[])">
            <summary>
            Encrypts the byte array using the context's session key.
            </summary>
            <remarks>
            The structure of the returned data is as follows:
             - 2 bytes, an unsigned big-endian integer indicating the length of the trailer buffer size
             - 4 bytes, an unsigned big-endian integer indicating the length of the message buffer size.
             - 2 bytes, an unsigned big-endian integer indicating the length of the encryption padding buffer size.
             - The trailer buffer
             - The message buffer
             - The padding buffer.
            </remarks>
            <param name="input">The raw message to encrypt.</param>
            <returns>The packed and encrypted message.</returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.Decrypt(System.Byte[])">
            <summary>
            Decrypts a previously encrypted message.
            </summary>
            <remarks>
            The expected format of the buffer is as follows:
             - 2 bytes, an unsigned big-endian integer indicating the length of the trailer buffer size
             - 4 bytes, an unsigned big-endian integer indicating the length of the message buffer size.
             - 2 bytes, an unsigned big-endian integer indicating the length of the encryption padding buffer size.
             - The trailer buffer
             - The message buffer
             - The padding buffer.
            </remarks>
            <param name="input">The packed and encrypted data.</param>
            <returns>The original plaintext message.</returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.MakeSignature(System.Byte[])">
            <summary>
            Signs the message using the context's session key.
            </summary>
            <remarks>
            The structure of the returned buffer is as follows:
             - 4 bytes, unsigned big-endian integer indicating the length of the plaintext message
             - 2 bytes, unsigned big-endian integer indicating the length of the signture
             - The plaintext message
             - The message's signature.
            </remarks>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.VerifySignature(System.Byte[],System.Byte[]@)">
            <summary>
            Verifies the signature of a signed message
            </summary>
            <remarks>
            The expected structure of the signed message buffer is as follows:
             - 4 bytes, unsigned integer in big endian format indicating the length of the plaintext message
             - 2 bytes, unsigned integer in big endian format indicating the length of the signture
             - The plaintext message
             - The message's signature.
            </remarks>
            <param name="signedMessage">The packed signed message.</param>
            <param name="origMessage">The extracted original message.</param>
            <returns>True if the message has a valid signature, false otherwise.</returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.QueryBufferSizes">
            <summary>
            Queries the security package's expections regarding message/token/signature/padding buffer sizes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.QueryContextString(Dse.Auth.Sspi.Contexts.ContextQueryAttrib)">
            <summary>
            Queries a string-valued context attribute by the named attribute.
            </summary>
            <param name="attrib">The string-valued attribute to query.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.Context.CheckLifecycle">
            <summary>
            Verifies that the object's lifecycle (initialization / disposition) state is suitable for using the 
            object.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.ContextAttrib">
            <summary>
            Defines options for creating a security context via win32 InitializeSecurityContext 
            (used by clients) and AcceptSecurityContext (used by servers).
            Required attribute flags are specified when creating the context. InitializeSecurityContext
            and AcceptSecurityContext returns a value indicating what final attributes the created context 
            actually has.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.Zero">
            <summary>
            No additional attributes are provided.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.Delegate">
            <summary>
            The server can use the context to authenticate to other servers as the client. The
            MutualAuth flag must be set for this flag to work. Valid for Kerberos. Ignore this flag for 
            constrained delegation.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.MutualAuth">
            <summary>
            The mutual authentication policy of the service will be satisfied.
            *Caution* - This does not necessarily mean that mutual authentication is performed, only that
            the authentication policy of the service is satisfied. To ensure that mutual authentication is
            performed, query the context attributes after it is created.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.ReplayDetect">
            <summary>
            Detect replayed messages that have been encoded by using the EncryptMessage or MakeSignature 
            message support functionality.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.SequenceDetect">
            <summary>
            Detect messages received out of sequence when using the message support functionality. 
            This flag implies all of the conditions specified by the Integrity flag - out-of-order sequence 
            detection can only be trusted if the integrity of any underlying sequence detection mechanism 
            in transmitted data can be trusted.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.Confidentiality">
            <summary>
            The context must protect data while in transit. Encrypt messages by using the EncryptMessage function.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.UseSessionKey">
            <summary>
            A new session key must be negotiated.
            This value is supported only by the Kerberos security package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.AllocateMemory">
            <summary>
            The security package allocates output buffers for you. Buffers allocated by the security package have 
            to be released by the context memory management functions.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.Connection">
            <summary>
            The security context will not handle formatting messages. This value is the default for the Kerberos, 
            Negotiate, and NTLM security packages.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.InitExtendedError">
            <summary>
            When errors occur, the remote party will be notified.
            </summary>
            <remarks>
            A client specifies InitExtendedError in InitializeSecurityContext
            and the server specifies AcceptExtendedError in AcceptSecurityContext. 
            </remarks>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.AcceptExtendedError">
            <summary>
            When errors occur, the remote party will be notified.
            </summary>
            <remarks>
            A client specifies InitExtendedError in InitializeSecurityContext
            and the server specifies AcceptExtendedError in AcceptSecurityContext. 
            </remarks>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.InitStream">
            <summary>
            Support a stream-oriented connection. Provided by clients.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.AcceptStream">
            <summary>
            Support a stream-oriented connection. Provided by servers.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.InitIntegrity">
            <summary>
            Sign messages and verify signatures by using the EncryptMessage and MakeSignature functions.
            Replayed and out-of-sequence messages will not be detected with the setting of this attribute.
            Set ReplayDetect and SequenceDetect also if these behaviors are desired.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.AcceptIntegrity">
            <summary>
            Sign messages and verify signatures by using the EncryptMessage and MakeSignature functions.
            Replayed and out-of-sequence messages will not be detected with the setting of this attribute.
            Set ReplayDetect and SequenceDetect also if these behaviors are desired.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.InitManualCredValidation">
            <summary>
            An Schannel provider connection is instructed to not authenticate the server automatically.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextAttrib.InitUseSuppliedCreds">
            <summary>
            An Schannel provider connection is instructed to not authenticate the client automatically.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.ContextNativeMethods">
            <summary>
            Declares native methods calls for security context-related win32 functions.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.ContextNativeMethods.SafeEncryptMessage(Dse.Auth.Sspi.Contexts.SafeContextHandle,System.UInt32,Dse.Auth.Sspi.Buffers.SecureBufferAdapter,System.Int32)">
            <summary>
            Safely invokes the native EncryptMessage function, making sure that handle ref counting is 
            performed in a proper CER.
            </summary>
            <param name="handle"></param>
            <param name="qualityOfProtection"></param>
            <param name="bufferAdapter"></param>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.ContextNativeMethods.SafeDecryptMessage(Dse.Auth.Sspi.Contexts.SafeContextHandle,System.Int32,Dse.Auth.Sspi.Buffers.SecureBufferAdapter,System.Int32)">
            <summary>
            Safely invokes the native DecryptMessage function, making sure that handle ref counting is 
            performed in a proper CER.
            </summary>
            <param name="handle"></param>
            <param name="qualityOfProtection"></param>
            <param name="bufferAdapter"></param>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.ContextNativeMethods.SafeMakeSignature(Dse.Auth.Sspi.Contexts.SafeContextHandle,System.Int32,Dse.Auth.Sspi.Buffers.SecureBufferAdapter,System.Int32)">
            <summary>
            Safely invokes the native MakeSignature function, making sure that handle ref counting is 
            performed in a proper CER.
            </summary>
            <param name="handle"></param>
            <param name="qualityOfProtection"></param>
            <param name="adapter"></param>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.Contexts.ContextNativeMethods.SafeVerifySignature(Dse.Auth.Sspi.Contexts.SafeContextHandle,System.Int32,Dse.Auth.Sspi.Buffers.SecureBufferAdapter,System.Int32)">
            <summary>
            Safely invokes the native VerifySignature function, making sure that handle ref counting is 
            performed in a proper CER.
            </summary>
            <param name="handle"></param>
            <param name="qualityOfProtection"></param>
            <param name="adapter"></param>
            <param name="sequenceNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.SecPkgContext_Sizes">
            <summary>
            Stores the result of a context query for the context's buffer sizes.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.SecPkgContext_String">
            <summary>
            Stores the result of a context query for a string-valued context attribute.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.ContextQueryAttrib">
            <summary>
            Defines the types of queries that can be performed with QueryContextAttribute.
            Each query has a different result buffer.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextQueryAttrib.Sizes">
            <summary>
            Queries the buffer size parameters when performing message functions, such
            as encryption, decryption, signing and signature validation.
            </summary>
            <remarks>
            Results for a query of this type are stored in a Win32 SecPkgContext_Sizes structure.
            </remarks>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextQueryAttrib.Names">
            <summary>
            Queries the context for the name of the user assocated with a security context.
            </summary>
            <remarks>
            Results for a query of this type are stored in a Win32 SecPkgContext_Name structure.
            </remarks>
        </member>
        <member name="F:Dse.Auth.Sspi.Contexts.ContextQueryAttrib.Authority">
            <summary>
            Queries the name of the authenticating authority for the security context.
            </summary>
            <remarks>
            Results for a query of this type are stored in a Win32 SecPkgContext_Authority structure.
            </remarks>
        </member>
        <member name="T:Dse.Auth.Sspi.Contexts.SafeContextHandle">
            <summary>
            Captures an unmanaged security context handle.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.ClientCredential">
            <summary>
            Represents the credentials of the user running the current process, for use as an SSPI client.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Credentials.ClientCredential.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ClientCredential class.
            </summary>
            <param name="package">The security package to acquire the credential handle from.</param>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.Credential">
            <summary>
            Provides access to the pre-existing credentials of a security principle.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.Credential.disposed">
            <summary>
            Whether the Credential has been disposed.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.Credential.securityPackage">
            <summary>
            The name of the security package that controls the credential.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.Credential.safeCredHandle">
            <summary>
            A safe handle to the credential's handle.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.Credential.expiry">
            <summary>
            The UTC time the credentials expire.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Credentials.Credential.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Credential class.
            </summary>
            <param name="package">The security package to acquire the credential from.</param>
        </member>
        <member name="P:Dse.Auth.Sspi.Credentials.Credential.PackageInfo">
            <summary>
            Gets metadata for the security package associated with the credential.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Credentials.Credential.SecurityPackage">
            <summary>
            Gets the name of the security package that owns the credential.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Credentials.Credential.PrincipleName">
            <summary>
            Returns the User Principle Name of the credential. Depending on the underlying security
            package used by the credential, this may not be the same as the Down-Level Logon Name
            for the user.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Credentials.Credential.Expiry">
            <summary>
            Gets the UTC time the credentials expire.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.Credentials.Credential.Handle">
            <summary>
            Gets a handle to the credential.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Credentials.Credential.Dispose">
            <summary>
            Releases all resources associated with the credential.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Credentials.CredentialNativeMethods.QueryCredentialsAttribute_Name(Dse.Auth.Sspi.RawSspiHandle@,Dse.Auth.Sspi.Credentials.CredentialQueryAttrib,Dse.Auth.Sspi.Credentials.QueryNameAttribCarrier@)">
            <summary>
            The overload of the QueryCredentialsAttribute method that is used for querying the name attribute.
            In this call, it takes a void* to a structure that contains a wide char pointer. The wide character
            pointer is allocated by the SSPI api, and thus needs to be released by a call to FreeContextBuffer().
            </summary>
            <param name="credentialHandle"></param>
            <param name="attributeName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.CredentialQueryAttrib">
            <summary>
            Identifies credential query types.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.CredentialQueryAttrib.Names">
            <summary>
            Queries the credential's principle name.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.CredentialUse">
            <summary>
            Indicates the manner in which a credential will be used for SSPI authentication.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.CredentialUse.Inbound">
            <summary>
            The credentials will be used for establishing a security context with an inbound request, eg,
            the credentials will be used by a server building a security context with a client.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.CredentialUse.Outbound">
            <summary>
            The credentials will be used for establishing a security context as an outbound request,
            eg, the credentials will be used by a client to build a security context with a server.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.CredentialUse.Both">
            <summary>
            The credentials may be used to to either build a client's security context or a server's
            security context.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.CurrentCredential">
            <summary>
            Acquires a handle to the credentials of the user associated with the current process.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Credentials.CurrentCredential.#ctor(System.String,Dse.Auth.Sspi.Credentials.CredentialUse)">
            <summary>
            Initializes a new instance of the CurrentCredential class.
            </summary>
            <param name="securityPackage">The security package to acquire the credential handle
            from.</param>
            <param name="use">The manner in which the credentials will be used - Inbound typically
            represents servers, outbound typically represent clients.</param>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.QueryNameAttribCarrier">
            <summary>
            Stores the result from a query of a credential's principle name.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.Credentials.QueryNameAttribCarrier.Name">
            <summary>
            A pointer to a null-terminated ascii-encoded containing the principle name 
            associated with a credential
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.SafeCredentialHandle">
            <summary>
            Provides a managed handle to an SSPI credential.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.Credentials.ServerCredential">
            <summary>
            Represents the credentials of the user running the current process, for use as an SSPI server.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.Credentials.ServerCredential.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServerCredential class, acquiring credentials from 
            the current thread's security context.
            </summary>
            <param name="package">The name of the security package to obtain credentials from.</param>
        </member>
        <member name="T:Dse.Auth.Sspi.PackageNames">
            <summary>
            Provides canonical names for security pacakges.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.PackageNames.Negotiate">
            <summary>
            Indicates the Negotiate security package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.PackageNames.Kerberos">
            <summary>
            Indicates the Kerberos security package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.PackageNames.Ntlm">
            <summary>
            Indicates the NTLM security package.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.PackageSupport">
            <summary>
            Queries information about security packages.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.PackageSupport.GetPackageCapabilities(System.String)">
            <summary>
            Returns the properties of the named package.
            </summary>
            <param name="packageName">The name of the package.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.PackageSupport.EnumeratePackages">
            <summary>
            Returns a list of all known security package providers and their properties.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dse.Auth.Sspi.SecPkgInfo">
            <summary>
            Stores information about a particular security package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgInfo.Capabilities">
            <summary>
            The packages capabilities and options.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgInfo.Version">
            <summary>
            The package's version number.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgInfo.RpcId">
            <summary>
            The package's Id when used in RPC contexts.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgInfo.MaxTokenLength">
            <summary>
            The maximum size, in bytes, of tokens generated by the package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgInfo.Name">
            <summary>
            The human-readable name of the package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgInfo.Comment">
            <summary>
            A short description of the package.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.SecPkgCapability">
            <summary>
            Describes the capabilities of a security package. 
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Integrity">
            <summary>
            Whether the package supports generating messages with integrity information. Required for MakeSignature and VerifySignature.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Privacy">
            <summary>
            Whether the package supports generating encrypted messages. Required for EncryptMessage and DecryptMessage.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.TokenOnly">
            <summary>
            Whether the package uses any other buffer information than token buffers.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Datagram">
            <summary>
            Whether the package supports datagram-style authentication.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Connection">
            <summary>
            Whether the package supports creating contexts with connection semantics
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.MultiLeg">
            <summary>
            Multiple legs are neccessary for authentication.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.ClientOnly">
            <summary>
            Server authentication is not supported.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.ExtendedError">
            <summary>
            Supports extended error handling facilities.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Impersonation">
            <summary>
            Supports client impersonation on the server.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.AcceptWin32Name">
            <summary>
            Understands Windows princple and target names.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Stream">
            <summary>
            Supports stream semantics
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Negotiable">
            <summary>
            Package may be used by the Negiotiate meta-package.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.GssCompatible">
            <summary>
            Compatible with GSS.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Logon">
            <summary>
            Supports LsaLogonUser
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.AsciiBuffers">
            <summary>
            Token buffers are in Ascii format.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Fragment">
            <summary>
            Supports separating large tokens into multiple buffers.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.MutualAuth">
            <summary>
            Supports mutual authentication between a client and server.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Delegation">
            <summary>
            Supports credential delegation from the server to a third context.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.ReadOnlyChecksum">
            <summary>
            Supports calling EncryptMessage with the read-only-checksum flag, which protects data only 
            with a checksum and does not encrypt it.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.RestrictedTokens">
            <summary>
            Whether the package supports handling restricted tokens, which are tokens derived from existing tokens
            that have had restrictions placed on them.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.ExtendsNego">
            <summary>
            Extends the negotiate package; only one such package may be registered at any time.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecPkgCapability.Negotiable2">
            <summary>
            This package is negotiated by the package of type ExtendsNego.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.SecurityStatus">
            <summary>
            Defines the results of invoking the SSPI api.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.OK">
            <summary>
            The request completed successfully
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.ContinueNeeded">
            <summary>
            The token returned by the context needs to be provided to the cooperating party
            to continue construction of the context.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.CompleteNeeded">
            <summary>
            Occurs after a client calls InitializeSecurityContext to indicate that the client
            must call CompleteAuthToken.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.CompAndContinue">
            <summary>
            Occurs after a client calls InitializeSecurityContext to indicate that the client
            must call CompleteAuthToken and pass the result to the server.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.ContextExpired">
            <summary>
            An attempt to use the context was performed after the context's expiration time elapsed.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.PackageNotFound">
            <summary>
            No security provider package was found with the given name.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.InvalidToken">
            <summary>
            A token was provided that contained incorrect or corrupted data.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.NoImpersonation">
            <summary>
            Impersonation is not supported.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.SecurityStatus.IncompleteMessage">
            <summary>
            The buffer provided to an SSPI API call contained a message that was not complete.
            </summary>
            <remarks>
            This occurs regularly with SSPI contexts that exchange data using a streaming context,
            where the data returned from the streaming communications channel, such as a TCP socket,
            did not contain the complete message. 
            Similarly, a streaming channel may return too much data, in which case the API function
            will indicate success, but will save off the extra, unrelated data in a buffer of
            type 'extra'.
            </remarks>
        </member>
        <member name="T:Dse.Auth.Sspi.SecurityStatusExtensions">
            <summary>
            Provides extension methods for the SecurityStatus enumeration.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.SecurityStatusExtensions.IsError(Dse.Auth.Sspi.SecurityStatus)">
            <summary>
            Returns whether or not the status represents an error.
            </summary>
            <param name="status"></param>
            <returns>True if the status represents an error condition.</returns>
        </member>
        <member name="T:Dse.Auth.Sspi.SspiException">
            <summary>
            The exception that is thrown when a problem occurs hwen using the SSPI system.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.SspiException.#ctor(System.String,Dse.Auth.Sspi.SecurityStatus)">
            <summary>
            Initializes a new instance of the SSPIException class with the given message and status.
            </summary>
            <param name="message">A message explaining what part of the system failed.</param>
            <param name="errorCode">The error code observed during the failure.</param>
        </member>
        <member name="M:Dse.Auth.Sspi.SspiException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Auth.Sspi.SspiException"/>.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.SspiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SSPIException class from serialization data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Dse.Auth.Sspi.SspiException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Dse.Auth.Sspi.SspiException.ErrorCode">
            <summary>
            The error code that was observed during the SSPI call.
            </summary>
        </member>
        <member name="P:Dse.Auth.Sspi.SspiException.Message">
            <summary>
            A human-readable message indicating the nature of the exception.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.RawSspiHandle">
            <summary>
            Represents the raw structure for any handle created for the SSPI API, for example, credential 
            handles, context handles, and security package handles. Any SSPI handle is always the size 
            of two native pointers. 
            </summary>
            <remarks>
            The documentation for SSPI handles can be found here:
            http://msdn.microsoft.com/en-us/library/windows/desktop/aa380495(v=vs.85).aspx
            
            This class is not reference safe - if used directly, or referenced directly, it may be leaked,
            or subject to finalizer races, or any of the hundred of things SafeHandles were designed to fix.
            Do not directly use this class - use only though SafeHandle wrapper objects. Any reference needed
            to this handle for performing work (InitializeSecurityContext, eg) should be performed a CER
            that employs handle reference counting across the native API invocation.
            </remarks>
        </member>
        <member name="M:Dse.Auth.Sspi.RawSspiHandle.IsZero">
            <summary>
            Returns whether or not the handle is set to the default, empty value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.Auth.Sspi.RawSspiHandle.SetInvalid">
            <summary>
            Sets the handle to an invalid value.
            </summary>
            <remarks>
            This method is executed in a CER during handle release.
            </remarks>
        </member>
        <member name="T:Dse.Auth.Sspi.SafeSspiHandle">
            <summary>
            Safely encapsulates a raw handle used in the SSPI api.
            </summary>
        </member>
        <member name="T:Dse.Auth.Sspi.TimeStamp">
            <summary>
            Represents a Windows API Timestamp structure, which stores time in units of 100 nanosecond 
            ticks, counting from January 1st, year 1601 at 00:00 UTC. Time is stored as a 64-bit value.
            </summary>
        </member>
        <member name="F:Dse.Auth.Sspi.TimeStamp.time">
            <summary>
            Stores the time value. Infinite times are often represented as values near, but not exactly
            at the maximum signed 64-bit 2's complement value.
            </summary>
        </member>
        <member name="M:Dse.Auth.Sspi.TimeStamp.ToDateTime">
            <summary>
            Converts the TimeStamp to an equivalant DateTime object. If the TimeStamp represents
            a value larger than DateTime.MaxValue, then DateTime.MaxValue is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dse.BatchStatement">
            <summary>
            A statement that groups a number of <see cref="T:Dse.BoundStatement" /> and / or <see cref="T:Dse.SimpleStatement" /> so they get executed as a batch.
            </summary>
        </member>
        <member name="P:Dse.BatchStatement.BatchType">
            <summary>
            Gets the batch type
            </summary>
        </member>
        <member name="P:Dse.BatchStatement.IsEmpty">
            <summary>
            Determines if the batch does not contain any query
            </summary>
        </member>
        <member name="P:Dse.BatchStatement.RoutingKey">
            <summary>
            Gets the routing key for the query.
            <para>
            Routing key can be provided using the <see cref="M:Dse.BatchStatement.SetRoutingValues(System.Object[])"/> method.
            </para>
            </summary>
        </member>
        <member name="M:Dse.BatchStatement.SetRoutingKey(Dse.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> This method allows to manually
             provide a routing key for this query. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory. </p><p> If the partition key for the query is composite, use the
             <link>#setRoutingKey(ByteBuffer...)</link> method instead to build the
             routing key.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to obtain the routing key.</param>
            <returns>this <c>BatchStatement</c> object.</returns>
        </member>
        <member name="M:Dse.BatchStatement.SetRoutingValues(System.Object[])">
            <summary>
            Sets the partition key values in order to route the query to the correct replicas.
            <para>For simple partition keys, set the partition key value.</para>
            <para>For composite partition keys, set the multiple the partition key values in correct order.</para>
            </summary>
        </member>
        <member name="M:Dse.BatchStatement.Add(Dse.Statement)">
            <summary>
            Adds a new statement to this batch.
            Note that statement can be any <c>Statement</c>. It is allowed to mix <see cref="T:Dse.SimpleStatement"/> and <see cref="T:Dse.BoundStatement"/> in the same <c>BatchStatement</c> in particular.
            Please note that the options of the added <c>Statement</c> (all those defined directly by the Statement class: consistency level, fetch size, tracing, ...) will be ignored for the purpose of the execution of the Batch. Instead, the options used are the one of this <c>BatchStatement</c> object.
            </summary>
            <param name="statement">Statement to add to the batch</param>
            <returns>The Batch statement</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to add more than <c>short.MaxValue</c> Statements</exception>
        </member>
        <member name="M:Dse.BatchStatement.SetBatchType(Dse.BatchType)">
            <summary>
            Sets the <see cref="P:Dse.BatchStatement.BatchType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.BatchStatement.SetKeyspace(System.String)">
            <summary>
            Sets the keyspace this batch operates on. The keyspace should only be set when the statements in this
            batch apply to a different keyspace to the logged keyspace of the <see cref="T:Dse.ISession"/>.
            </summary>
            <param name="name">The keyspace name.</param>
        </member>
        <member name="T:Dse.BeConverter">
            <summary>
            Contains methods for converting a big-endian array of bytes to one of the base data types, 
            as well as for converting a base data type to a big-endian array of bytes.
            </summary>
        </member>
        <member name="M:Dse.BeConverter.GetBytes(System.Int16)">
            <summary>
            Converts a short to a big endian byte array
            </summary>
        </member>
        <member name="M:Dse.BeConverter.GetBytes(System.UInt16)">
            <summary>
            Converts a ushort to a big endian byte array
            </summary>
        </member>
        <member name="M:Dse.BeConverter.GetBytes(System.Int32)">
            <summary>
            Converts an int to a big endian byte array
            </summary>
        </member>
        <member name="M:Dse.BeConverter.GetBytes(System.Int64)">
            <summary>
            Converts a long to a big endian byte array
            </summary>
        </member>
        <member name="M:Dse.BeConverter.GetBytes(System.Double)">
            <summary>
            Converts a double to a big endian byte array
            </summary>
        </member>
        <member name="M:Dse.BeConverter.GetBytes(System.Single)">
            <summary>
            Converts a double to a big endian byte array
            </summary>
        </member>
        <member name="M:Dse.BeConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Converts an big-endian array of bytes into a short.
            </summary>
        </member>
        <member name="M:Dse.BeConverter.ToUInt16(System.Byte[])">
            <summary>
            Converts an big-endian array of bytes into a ushort.
            </summary>
        </member>
        <member name="M:Dse.BeConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Converts an big-endian array of bytes into an int.
            </summary>
        </member>
        <member name="M:Dse.BeConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Converts an big-endian array of bytes into a long.
            </summary>
        </member>
        <member name="M:Dse.BeConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Converts an big-endian array of bytes into a double.
            </summary>
        </member>
        <member name="M:Dse.BeConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Converts an big-endian array of bytes into a float.
            </summary>
        </member>
        <member name="T:Dse.BoundStatement">
            <summary>
            <para>Represents a prepared statement with the parameter values set, ready for execution.</para>
            A <see cref="T:Dse.BoundStatement"/> can be created from a <see cref="P:Dse.BoundStatement.PreparedStatement"/> instance using the
            <c>Bind()</c> method and can be executed using a <see cref="T:Dse.ISession"/> instance.
            <seealso cref="P:Dse.BoundStatement.PreparedStatement"/>
            </summary>
        </member>
        <member name="P:Dse.BoundStatement.PreparedStatement">
            <summary>
             Gets the prepared statement on which this BoundStatement is based.
            </summary>
        </member>
        <member name="P:Dse.BoundStatement.RoutingKey">
            <summary>
             Gets the routing key for this bound query. <p> This method will return a
             non-<c>null</c> value if: <ul> <li>either all the TableColumns composing the
             partition key are bound variables of this <c>BoundStatement</c>. The
             routing key will then be built using the values provided for these partition
             key TableColumns.</li> <li>or the routing key has been set through
             <c>PreparedStatement.SetRoutingKey</c> for the
             <see cref="P:Dse.BoundStatement.PreparedStatement"/> this statement has been built from.</li> </ul>
             Otherwise, <c>null</c> is returned.</p> <p> Note that if the routing key
             has been set through <link>PreparedStatement.SetRoutingKey</link>, that value
             takes precedence even if the partition key is part of the bound variables.</p>
            </summary>
        </member>
        <member name="P:Dse.BoundStatement.Keyspace">
            <summary>
            Returns the keyspace this query operates on, based on the <see cref="P:Dse.BoundStatement.PreparedStatement"/> metadata.
            <para>
            The keyspace returned is used as a hint for token-aware routing.
            </para>
            </summary>
        </member>
        <member name="M:Dse.BoundStatement.#ctor">
            <summary>
            Initializes a new instance of the Cassandra.BoundStatement class
            </summary>
        </member>
        <member name="M:Dse.BoundStatement.#ctor(Dse.PreparedStatement)">
            <summary>
             Creates a new <c>BoundStatement</c> from the provided prepared
             statement.
            </summary>
            <param name="statement"> the prepared statement from which to create a <c>BoundStatement</c>.</param>
        </member>
        <member name="M:Dse.BoundStatement.SetRoutingKey(Dse.RoutingKey[])">
            <summary>
             Set the routing key for this query. This method allows to manually
             provide a routing key for this BoundStatement. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory.
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose the routing key.</param>
        </member>
        <member name="M:Dse.BoundStatement.ValidateValues(System.Object[])">
            <summary>
            Validate values using prepared statement metadata,
            returning a new instance of values to be used as parameters.
            </summary>
        </member>
        <member name="T:Dse.Builder">
            <summary>
             Helper class to build <link>Cluster</link> instances.
            </summary>
        </member>
        <member name="P:Dse.Builder.PoolingOptions">
            <summary>
             The pooling options used by this builder.
            </summary>
            
            <returns>the pooling options that will be used by this builder. You can use
             the returned object to define the initial pooling options for the built
             cluster.</returns>
        </member>
        <member name="P:Dse.Builder.SocketOptions">
            <summary>
             The socket options used by this builder.
            </summary>
            
            <returns>the socket options that will be used by this builder. You can use
             the returned object to define the initial socket options for the built
             cluster.</returns>
        </member>
        <member name="P:Dse.Builder.ContactPoints">
            <summary>
            Gets the contact points that were added as <c>IPEndPoint"</c> instances.
            <para>
            Note that only contact points that were added using <see cref="M:Dse.Builder.AddContactPoint(System.Net.IPEndPoint)"/> and
            <see cref="M:Dse.Builder.AddContactPoints(System.Net.IPEndPoint[])"/> are returned by this property, as IP addresses and host names must be resolved and assigned
            the port number, which is performed on <see cref="M:Dse.Builder.Build"/>.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Builder.GetConfiguration">
            <summary>
             The configuration that will be used for the new cluster. <p> You <b>should
             not</b> modify this object directly as change made to the returned object may
             not be used by the cluster build. Instead, you should use the other methods
             of this <c>Builder</c></p>.
            </summary>
            
            <returns>the configuration to use for the new cluster.</returns>
        </member>
        <member name="M:Dse.Builder.WithPort(System.Int32)">
            <summary>
             The port to use to connect to all Cassandra hosts. If not set through this
             method, the default port (9042) will be used instead.
            </summary>
            <param name="port"> the port to set. </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithQueryOptions(Dse.QueryOptions)">
            <summary>
            Sets the QueryOptions to use for the newly created Cluster.
            
            If no query options are set through this method, default query
            options will be used.
            </summary>
            <param name="options">the QueryOptions to use.</param>
            <returns>this Builder.</returns>
        </member>
        <member name="M:Dse.Builder.WithCompression(Dse.CompressionType)">
            <summary>
             Sets the compression to use for the transport.
            </summary>
            <param name="compression"> the compression to set </param>
            <returns>this Builder <see>ProtocolOptions.Compression</see></returns>
        </member>
        <member name="M:Dse.Builder.WithCustomCompressor(Dse.IFrameCompressor)">
            <summary>
            Sets a custom compressor to be used for the compression type.
            If specified, the compression type is mandatory.
            If not specified the driver default compressor will be use for the compression type.
            </summary>
            <param name="compressor">Implementation of IFrameCompressor</param>
        </member>
        <member name="M:Dse.Builder.AddContactPoint(System.String)">
            <summary>
             Adds a contact point. Contact points are addresses of Cassandra nodes that
             the driver uses to discover the cluster topology. Only one contact point is
             required (the driver will retrieve the address of the other nodes
             automatically), but it is usually a good idea to provide more than one
             contact point, as if that unique contact point is not available, the driver
             won't be able to initialize itself correctly.
            </summary>
            <remarks>
             However, this can be useful if the Cassandra nodes are behind a router and 
             are not accessed directly. Note that if you are in this situation 
             (Cassandra nodes are behind a router, not directly accessible), you almost 
             surely want to provide a specific <c>IAddressTranslator</c> 
             (through <link>Builder.WithAddressTranslater</link>) to translate actual 
             Cassandra node addresses to the addresses the driver should use, otherwise 
             the driver will not be able to auto-detect new nodes (and will generally not 
             function optimally).
            </remarks>
            <param name="address">the address of the node to connect to</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoint(System.Net.IPAddress)">
            <summary>
             Add contact point. See <see cref="M:Dse.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="address"> address of the node to add as contact point</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoint(System.Net.IPEndPoint)">
            <summary>
             Add contact point. See <see cref="M:Dse.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="address"> address of the node to add as contact point</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoints(System.String[])">
            <summary>
             Add contact points. See <see cref="M:Dse.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param> 
            <returns>this Builder </returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoints(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoints(System.Net.IPAddress[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoints(System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoints(System.Net.IPEndPoint[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
             </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.AddContactPoints(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
             </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithLoadBalancingPolicy(Dse.ILoadBalancingPolicy)">
            <summary>
             Configure the load balancing policy to use for the new cluster. <p> If no
             load balancing policy is set through this method,
             <link>Policies.DefaultLoadBalancingPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the load balancing policy to use </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithReconnectionPolicy(Dse.IReconnectionPolicy)">
            <summary>
             Configure the reconnection policy to use for the new cluster. <p> If no
             reconnection policy is set through this method,
             <link>Policies.DefaultReconnectionPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the reconnection policy to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithRetryPolicy(Dse.IRetryPolicy)">
            <summary>
            Configure the retry policy to be used for the new cluster.
            <para>
            When the retry policy is not set with this method, the <see cref="P:Dse.Policies.DefaultRetryPolicy" />
            will be used instead.
            </para>
            <para>
            Use a <see cref="T:Dse.IExtendedRetryPolicy"/> implementation to cover all error scenarios.
            </para>
            </summary>
            <param name="policy"> the retry policy to use </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithSpeculativeExecutionPolicy(Dse.ISpeculativeExecutionPolicy)">
            <summary>
             Configure the speculative execution to use for the new cluster. 
            <para> 
            If no speculative execution policy is set through this method, <see cref="P:Dse.Policies.DefaultSpeculativeExecutionPolicy"/> will be used instead.
            </para>
            </summary>
            <param name="policy"> the speculative execution policy to use </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithTimestampGenerator(Dse.ITimestampGenerator)">
            <summary>
            Configures the generator that will produce the client-side timestamp sent with each query.
            <para>
            This feature is only available with protocol version 3 or above of the native protocol. 
            With earlier versions, timestamps are always generated server-side, and setting a generator
            through this method will have no effect.
            </para>
            <para>
            If no generator is set through this method, the driver will default to client-side timestamps
            by using <see cref="T:Dse.AtomicMonotonicTimestampGenerator"/>.
            </para>
            </summary>
            <param name="generator">The generator to use.</param>
            <returns>This builder instance</returns>
        </member>
        <member name="M:Dse.Builder.WithConnectionString(System.String)">
            <summary>
             Configure the cluster by applying settings from ConnectionString. 
            </summary>
            <param name="connectionString"> the ConnectionString to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithCredentials(System.String,System.String)">
            <summary>
             Uses the provided credentials when connecting to Cassandra hosts. <p> This
             should be used if the Cassandra cluster has been configured to use the
             <c>PasswordAuthenticator</c>. If the the default <c>*
             AllowAllAuthenticator</c> is used instead, using this method has no effect.</p>
            </summary>
            <param name="username"> the user name to use to login to Cassandra hosts.</param>
            <param name="password"> the password corresponding to </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithAuthProvider(Dse.IAuthProvider)">
            <summary>
             Use the specified AuthProvider when connecting to Cassandra hosts. <p> Use
             this method when a custom authentication scheme is in place. You shouldn't
             call both this method and {@code withCredentials}' on the same
             <c>Builder</c> instance as one will supersede the other</p>
            </summary>
            <param name="authProvider"> the <link>AuthProvider"></link> to use to login to Cassandra hosts.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithoutRowSetBuffering">
            <summary>
             Disables row set buffering for the created cluster (row set buffering is enabled by
             default otherwise).
            </summary>
            
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.Builder.WithQueryTimeout(System.Int32)">
            <summary>
            Specifies the number of milliseconds that the driver should wait for the response before the query times out in a synchronous operation.
            <para>
            This will cause that synchronous operations like <see cref="M:Dse.ISession.Execute(System.String)"/> to throw a <see cref="T:System.TimeoutException"/> 
            after the specified number of milliseconds.
            </para>
            Default timeout value is set to <code>20,000</code> (20 seconds).
            </summary>
            <remarks>
            If you want to define a read timeout at a lower level, you can use <see cref="M:Dse.SocketOptions.SetReadTimeoutMillis(System.Int32)"/>.
            </remarks>
            <param name="queryAbortTimeout">Timeout specified in milliseconds.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.Builder.WithDefaultKeyspace(System.String)">
            <summary>
             Sets default keyspace name for the created cluster.
            </summary>
            <param name="defaultKeyspace">Default keyspace name.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.Builder.WithSocketOptions(Dse.SocketOptions)">
            <summary>
            Configures the socket options that are going to be used to create the connections to the hosts.
            </summary>
        </member>
        <member name="M:Dse.Builder.WithSSL">
            <summary>
             Enables the use of SSL for the created Cluster. Calling this method will use default SSL options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.Builder.WithSSL(Dse.SSLOptions)">
            <summary>
             Enables the use of SSL for the created Cluster using the provided options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <param name="sslOptions">SSL options to use.</param>
            <returns>this builder</returns>        
        </member>
        <member name="M:Dse.Builder.WithAddressTranslator(Dse.IAddressTranslator)">
            <summary>
             Configures the address translater to use for the new cluster.
            </summary>
            <remarks>
            See <c>IAddressTranslater</c> for more detail on address translation,
            but the default tanslater, <c>DefaultAddressTranslator</c>, should be
            correct in most cases. If unsure, stick to the default.
            </remarks>
            <param name="addressTranslator">the translater to use.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.Builder.WithMaxProtocolVersion(System.Byte)">
            <summary>
            <para>Limits the maximum protocol version used to connect to the nodes</para>
            <para>
            When it is not set, the protocol version used is negotiated between the driver and the Cassandra
            cluster upon establishing the first connection.
            </para>
            <para>
            Useful when connecting to a cluster that contains nodes with different major/minor versions 
            of Cassandra. For example, preparing for a rolling upgrade of the Cluster.
            </para>
            </summary>
            <param name="version">
            <para>The native protocol version.</para>
            <para>Different Cassandra versions support a range of protocol versions, for example: </para>
            <para>- Cassandra 2.0 (DSE 4.0 - 4.6): Supports protocol versions 1 and 2.</para>
            <para>- Cassandra 2.1 (DSE 4.7 - 4.8): Supports protocol versions 1, 2 and 3.</para>
            <para>- Cassandra 2.2: Supports protocol versions 1, 2, 3 and 4.</para>
            <para>- Cassandra 3.0: Supports protocol versions 3 and 4.</para>
            </param>
            <remarks>Some Cassandra features are only available with a specific protocol version.</remarks>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.Builder.WithMaxProtocolVersion(Dse.ProtocolVersion)">
            <summary>
            <para>Limits the maximum protocol version used to connect to the nodes</para>
            <para>
            When it is not set, the protocol version used is negotiated between the driver and the Cassandra
            cluster upon establishing the first connection.
            </para>
            <para>
            Useful when connecting to a cluster that contains nodes with different major/minor versions 
            of Cassandra. For example, preparing for a rolling upgrade of the Cluster.
            </para>
            </summary>
            <remarks>Some Cassandra features are only available with a specific protocol version.</remarks>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.Builder.WithNoCompact">
            <summary>
            Enables the NO_COMPACT startup option.
            <para>
            When this option is set, <c>SELECT</c>, <c>UPDATE</c>, <c>DELETE</c>, and <c>BATCH</c> statements
            on <c>COMPACT STORAGE</c> tables function in "compatibility" mode which allows seeing these tables
            as if they were "regular" CQL tables.
            </para>
            <para>
            This option only affects interactions with tables using <c>COMPACT STORAGE</c> and it is only
            supported by C* 3.0.16+, 3.11.2+, 4.0+ and DSE 6.0+.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Builder.WithTypeSerializers(Dse.Serialization.TypeSerializerDefinitions)">
            <summary>
            Sets the <see cref="T:Dse.Serialization.TypeSerializer`1"/> to be used, replacing the default ones.
            </summary>
            <param name="definitions"></param>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.Builder.Build">
            <summary>
             Build the cluster with the configured set of initial contact points and policies.
            </summary>
            <exception cref="T:Dse.NoHostAvailableException">Throws a NoHostAvailableException when no host could be resolved.</exception>
            <exception cref="T:System.ArgumentException">Throws an ArgumentException when no contact point was provided.</exception>
            <returns>the newly build Cluster instance. </returns>
        </member>
        <member name="T:Dse.ClientOptions">
            <summary>
             Additional options of the .net Cassandra driver.
            </summary>
        </member>
        <member name="P:Dse.ClientOptions.QueryAbortTimeout">
            <summary>
            Gets the query abort timeout for synchronous operations in milliseconds.
            </summary>
        </member>
        <member name="P:Dse.ClientOptions.DefaultKeyspace">
            <summary>
            Gets the keyspace to be used after connecting to the cluster.
            </summary>
        </member>
        <member name="M:Dse.ClientOptions.GetQueryAbortTimeout(System.Int32)">
            <summary>
            Returns the timeout in milliseconds based on the amount of queries.
            </summary>
        </member>
        <member name="T:Dse.Cluster">
            <summary>
            Implementation of <see cref="T:Dse.ICluster"/>
            </summary>
            <inheritdoc />
        </member>
        <member name="E:Dse.Cluster.HostAdded">
            <inheritdoc />
        </member>
        <member name="E:Dse.Cluster.HostRemoved">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.GetControlConnection">
            <summary>
            Gets the control connection used by the cluster
            </summary>
        </member>
        <member name="P:Dse.Cluster.PreparedQueries">
            <summary>
            Gets the the prepared statements cache
            </summary>
        </member>
        <member name="M:Dse.Cluster.BuildFrom(Dse.IInitializer)">
            <summary>
             Build a new cluster based on the provided initializer. <p> Note that for
             building a cluster programmatically, Cluster.NewBuilder provides a slightly less
             verbose shortcut with <link>NewBuilder#Build</link>. </p><p> Also note that that all
             the contact points provided by <c>initializer</c> must share the same
             port.</p>
            </summary>
            <param name="initializer">the Cluster.Initializer to use</param>
            <returns>the newly created Cluster instance </returns>
        </member>
        <member name="M:Dse.Cluster.Builder">
            <summary>
             Creates a new <link>Cluster.NewBuilder</link> instance. <p> This is a shortcut
             for <c>new Cluster.NewBuilder()</c></p>.
            </summary>
            <returns>the new cluster builder.</returns>
        </member>
        <member name="P:Dse.Cluster.MaxProtocolVersion">
            <summary>
            Gets or sets the maximum protocol version used by this driver.
            <para>
            While property value is maintained for backward-compatibility, 
            use <see cref="M:Dse.ProtocolOptions.SetMaxProtocolVersion(Dse.ProtocolVersion)"/> to set the maximum protocol version used by the driver.
            </para>
            <para>
            Protocol version used can not be higher than <see cref="F:Dse.ProtocolVersion.MaxSupported"/>.
            </para>
            </summary>
        </member>
        <member name="P:Dse.Cluster.Configuration">
            <summary>
             Gets the cluster configuration.
            </summary>
        </member>
        <member name="P:Dse.Cluster.Metadata">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.AddHosts(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds contact points as hosts and resolving host names if necessary.
            </summary>
            <exception cref="T:Dse.NoHostAvailableException">When no host can be resolved and no other contact point is an address</exception>
        </member>
        <member name="M:Dse.Cluster.Init">
            <summary>
            Initializes once (Thread-safe) the control connection and metadata associated with the Cluster instance
            </summary>
        </member>
        <member name="M:Dse.Cluster.AllHosts">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.Connect">
            <summary>
            Creates a new session on this cluster.
            </summary>
        </member>
        <member name="M:Dse.Cluster.ConnectAsync">
            <summary>
            Creates a new session on this cluster.
            </summary>
        </member>
        <member name="M:Dse.Cluster.Connect(System.String)">
            <summary>
            Creates a new session on this cluster and using a keyspace an existing keyspace.
            </summary>
            <param name="keyspace">Case-sensitive keyspace name to use</param>
        </member>
        <member name="M:Dse.Cluster.ConnectAsync(System.String)">
            <summary>
            Creates a new session on this cluster and using a keyspace an existing keyspace.
            </summary>
            <param name="keyspace">Case-sensitive keyspace name to use</param>
        </member>
        <member name="M:Dse.Cluster.ConnectAndCreateDefaultKeyspaceIfNotExists(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates new session on this cluster, and sets it to default keyspace. 
            If default keyspace does not exist then it will be created and session will be set to it.
            Name of default keyspace can be specified during creation of cluster object with <c>Cluster.Builder().WithDefaultKeyspace("keyspace_name")</c> method.
            </summary>
            <param name="replication">Replication property for this keyspace. To set it, refer to the <see cref="T:Dse.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option. 
            <p>Default value is <c>SimpleStrategy</c> with <c>'replication_factor' = 2</c></p></param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
            <returns>a new session on this cluster set to default keyspace.</returns>
        </member>
        <member name="M:Dse.Cluster.GetHost(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.GetReplicas(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.GetReplicas(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.RefreshSchema(System.String,System.String)">
            <summary>
            Updates cluster metadata for a given keyspace or keyspace table
            </summary>
        </member>
        <member name="M:Dse.Cluster.Shutdown(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.ShutdownAsync(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Cluster.RetrieveDistance(Dse.Host,Dse.ILoadBalancingPolicy)">
            <summary>
            Helper method to retrieve the distance from LoadBalancingPolicy and set it at Host level.
            Once ProfileManager is implemented, this logic will be part of it.
            </summary>
        </member>
        <member name="T:Dse.Collections.ArrayBackedList`1">
            <summary>
            It creates a IList{T} wrapper of an array to avoid extra allocations of List{T} for read-only lists
            </summary>
        </member>
        <member name="T:Dse.Collections.CopyOnWriteDictionary`2">
            <summary>
            A thread-safe variant of Dictionary{TKey, TValue} in which all mutative operations (Add and Remove) are implemented by making a copy of the underlying dictionary,
            intended to provide safe enumeration of its items.
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the underlying dictionary if the key does not already exist.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">the value to be added, if the key does not already exist</param>
            <returns>
            The value for the key. This will be either the existing value for the key if the 
            key is already in the dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new item by copying the underlying dictionary.
            </summary>
            <remarks>
            Adds or modifies an item.
            </remarks>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a new item by copying the underlying dictionary.
            </summary>
            <remarks>
            Adds or modifies an item.
            </remarks>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteDictionary`2.Remove(`0)">
            <summary>
            Removes an item with the specified key by copying the underlying dictionary
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes an item by copying the underlying dictionary
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteDictionary`2.TryRemove(`0,`1@)">
            <summary>
            Attempts to remove and return the the value with the specified key from the dictionary.
            </summary>
        </member>
        <member name="T:Dse.Collections.CopyOnWriteList`1">
            <summary>
            A thread-safe variant of List{T} in which all mutative operations (Add and Remove) are implemented by making a copy of the underlying array.
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteList`1.Add(`0)">
            <summary>
            Adds a new item to the list
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteList`1.AddNew(`0)">
            <summary>
            Adds a new item to the list and returns the new length
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteList`1.ClearAndGet">
            <summary>
            Removes all items and returns the existing items as an atomic operation.
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteList`1.RemoveAndCount(`0)">
            <summary>
            Removes the item and returns the a boolean that determines if the item has been removed and an integer with the
            new count, as an atomic operation.
            </summary>
        </member>
        <member name="M:Dse.Collections.CopyOnWriteList`1.GetSnapshot">
            <summary>
            Gets a reference to the inner array
            </summary>
        </member>
        <member name="T:Dse.Collections.ReadOnlyCollection`1">
            <summary>
            Represents a wrapper around a collection to make it readonly.
            </summary>
        </member>
        <member name="T:Dse.CompressionType">
            <summary>
             Compression supported by the Cassandra binary protocol.
            </summary>
        </member>
        <member name="T:Dse.Compression.WrappedStream">
            <summary>
            A simple wrapper to a stream that allows to limit the length of the provided stream.
            Used to overcome the deficiencies in the Compression API (not providing a length) 
            </summary>
        </member>
        <member name="T:Dse.Configuration">
            <summary>
             The configuration of the cluster. It configures the following: <ul> <li>Cassandra
             binary protocol level configuration (compression).</li> <li>Connection
             pooling configurations.</li> <li>low-level tcp configuration options
             (tcpNoDelay, keepAlive, ...).</li> </ul>
            </summary>
        </member>
        <member name="P:Dse.Configuration.Policies">
            <summary>
             Gets the policies set for the cluster.
            </summary>
        </member>
        <member name="P:Dse.Configuration.SocketOptions">
            <summary>
             Gets the low-level tcp configuration options used (tcpNoDelay, keepAlive, ...).
            </summary>
        </member>
        <member name="P:Dse.Configuration.ProtocolOptions">
            <summary>
             The Cassandra binary protocol level configuration (compression).
            </summary>
            
            <returns>the protocol options.</returns>
        </member>
        <member name="P:Dse.Configuration.PoolingOptions">
            <summary>
             The connection pooling configuration, defaults to null.
            </summary>
            <returns>the pooling options.</returns>
        </member>
        <member name="P:Dse.Configuration.ClientOptions">
            <summary>
             The .net client additional options configuration.
            </summary>
        </member>
        <member name="P:Dse.Configuration.QueryOptions">
            <summary>
             The query configuration.
            </summary>
        </member>
        <member name="P:Dse.Configuration.AuthProvider">
            <summary>
             The authentication provider used to connect to the Cassandra cluster.
            </summary>
            
            <returns>the authentication provider in use.</returns>
        </member>
        <member name="P:Dse.Configuration.AuthInfoProvider">
            <summary>
             The authentication provider used to connect to the Cassandra cluster.
            </summary>
            
            <returns>the authentication provider in use.</returns>
        </member>
        <member name="P:Dse.Configuration.AddressTranslator">
            <summary>
             The address translator used to translate Cassandra node address.
            </summary> 
            <returns>the address translator in use.</returns>
        </member>
        <member name="P:Dse.Configuration.Timer">
            <summary>
            Shared reusable timer
            </summary>
        </member>
        <member name="P:Dse.Configuration.BufferPool">
            <summary>
            Shared buffer pool
            </summary>
        </member>
        <member name="P:Dse.Configuration.TypeSerializers">
            <summary>
            Gets or sets the list of <see cref="T:Dse.Serialization.TypeSerializer`1"/> defined.
            </summary>
        </member>
        <member name="M:Dse.Configuration.#ctor(Dse.Policies,Dse.ProtocolOptions,Dse.PoolingOptions,Dse.SocketOptions,Dse.ClientOptions,Dse.IAuthProvider,Dse.IAuthInfoProvider,Dse.QueryOptions,Dse.IAddressTranslator)">
            <summary>
            Creates a new instance. This class is also used to shareable a context across all instance that are created below one Cluster instance.
            One configuration instance per Cluster instance.
            </summary>
        </member>
        <member name="M:Dse.Configuration.GetPoolingOptions(Dse.ProtocolVersion)">
            <summary>
            Gets the pooling options. If not specified, gets the default by protocol version
            </summary>
        </member>
        <member name="T:Dse.Connection">
            <summary>
            Represents a TCP connection to a Cassandra Node
            </summary>
        </member>
        <member name="F:Dse.Connection._isCanceled">
            <summary>
            Determines that the connection canceled pending operations.
            It could be because its being closed or there was a socket error.
            </summary>
        </member>
        <member name="F:Dse.Connection._freeOperations">
            <summary>
            Stores the available stream ids.
            </summary>
        </member>
        <member name="F:Dse.Connection._pendingOperations">
            <summary> Contains the requests that were sent through the wire and that hasn't been received yet.</summary>
        </member>
        <member name="F:Dse.Connection._writeQueue">
            <summary> It contains the requests that could not be written due to streamIds not available</summary>
        </member>
        <member name="F:Dse.Connection._minHeaderBuffer">
            <summary>
            Small buffer (less than 8 bytes) that is used when the next received message is smaller than 8 bytes, 
            and it is not possible to read the header.
            </summary>
        </member>
        <member name="E:Dse.Connection.CassandraEventResponse">
            <summary>
            The event that represents a event RESPONSE from a Cassandra node
            </summary>
        </member>
        <member name="E:Dse.Connection.OnIdleRequestException">
            <summary>
            Event raised when there is an error when executing the request to prevent idle disconnects
            </summary>
        </member>
        <member name="E:Dse.Connection.WriteCompleted">
            <summary>
            Event that gets raised when a write has been completed. Testing purposes only.
            </summary>
        </member>
        <member name="E:Dse.Connection.Closing">
            <summary>
            Event that gets raised the connection is being closed.
            </summary>
        </member>
        <member name="P:Dse.Connection.InFlight">
            <summary>
            Determines the amount of operations that are not finished.
            </summary>
        </member>
        <member name="P:Dse.Connection.HasPendingOperations">
            <summary>
            Determines if there isn't any operations pending to be written or inflight.
            </summary>
        </member>
        <member name="P:Dse.Connection.TimedOutOperations">
            <summary>
            Gets the amount of operations that timed out and didn't get a response
            </summary>
        </member>
        <member name="P:Dse.Connection.IsDisposed">
            <summary>
            Determine if the Connection has been explicitly disposed
            </summary>
        </member>
        <member name="P:Dse.Connection.Keyspace">
            <summary>
            Gets the current keyspace.
            </summary>
        </member>
        <member name="P:Dse.Connection.MaxConcurrentRequests">
            <summary>
            Gets the amount of concurrent requests depending on the protocol version
            </summary>
        </member>
        <member name="M:Dse.Connection.StartAuthenticationFlow(System.String)">
            <summary>
            Starts the authentication flow
            </summary>
            <param name="name">Authenticator name from server.</param>
            <exception cref="T:Dse.AuthenticationException" />
        </member>
        <member name="M:Dse.Connection.Authenticate(System.Byte[],Dse.IAuthenticator)">
            <exception cref="T:Dse.AuthenticationException" />
        </member>
        <member name="M:Dse.Connection.CancelPending(System.Exception,System.Nullable{System.Net.Sockets.SocketError})">
            <summary>
            It callbacks all operations already sent / or to be written, that do not have a response.
            Invoked from an IO Thread or a pool thread
            </summary>
        </member>
        <member name="M:Dse.Connection.IdleTimeoutHandler(System.Object)">
            <summary>
            Gets executed once the idle timeout has passed
            </summary>
        </member>
        <member name="M:Dse.Connection.Open">
            <summary>
            Initializes the connection.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Throws a SocketException when the connection could not be established with the host</exception>
            <exception cref="T:Dse.AuthenticationException" />
            <exception cref="T:Dse.UnsupportedProtocolVersionException"></exception>
        </member>
        <member name="M:Dse.Connection.Kill">
            <summary>
            Silently kill the connection, for testing purposes only
            </summary>
        </member>
        <member name="M:Dse.Connection.ReadParse(System.Byte[],System.Int32)">
            <summary>
            Deserializes each frame header and copies the body bytes into a single buffer.
            </summary>
            <returns>True if a full operation (streamId) has been processed.</returns>
        </member>
        <member name="M:Dse.Connection.ReadHeader(System.Byte[],System.Int32@,System.Int32,System.Int32,Dse.ProtocolVersion)">
            <summary>
            Reads the header from the buffer, using previous 
            </summary>
        </member>
        <member name="M:Dse.Connection.StoreReadState(Dse.FrameHeader,System.IO.MemoryStream,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves the current read state (header and body stream) for the next read event. 
            </summary>
        </member>
        <member name="M:Dse.Connection.CreateResponseAction(Dse.FrameHeader,System.Action{System.Exception,Dse.Responses.Response})">
            <summary>
            Returns an action that capture the parameters closure
            </summary>
        </member>
        <member name="M:Dse.Connection.InvokeReadCallbacks(System.IO.MemoryStream,System.Collections.Generic.ICollection{System.Action{System.IO.MemoryStream}})">
            <summary>
            Invokes the callbacks using the default TaskScheduler.
            </summary>
            <returns>Returns true if one or more callback has been invoked.</returns>
        </member>
        <member name="M:Dse.Connection.Startup">
            <summary>
            Sends a protocol STARTUP message
            </summary>
        </member>
        <member name="M:Dse.Connection.Send(Dse.Requests.IRequest,System.Int32)">
            <summary>
            Sends a new request if possible. If it is not possible it queues it up.
            </summary>
        </member>
        <member name="M:Dse.Connection.Send(Dse.Requests.IRequest,System.Action{System.Exception,Dse.Responses.Response},System.Int32)">
            <summary>
            Sends a new request if possible and executes the callback when the response is parsed. If it is not possible it queues it up.
            </summary>
        </member>
        <member name="M:Dse.Connection.RemoveFromPending(System.Int16)">
            <summary>
            Removes an operation from pending and frees the stream id
            </summary>
            <param name="streamId"></param>
        </member>
        <member name="M:Dse.Connection.SetKeyspace(System.String)">
            <summary>
            Sets the keyspace of the connection.
            If the keyspace is different from the current value, it sends a Query request to change it
            </summary>
        </member>
        <member name="M:Dse.Connection.WriteCompletedHandler">
            <summary>
            Method that gets executed when a write request has been completed.
            </summary>
        </member>
        <member name="T:Dse.ConsistencyLevel">
            <summary>
            Consistency refers to how up-to-date and synchronized a row of Cassandra data is on all of its replicas.
            When selecting, the consistency level specifies how many replicas must respond to a read request before returning data to the client application.
            When updating, inserting or deleting the consistency level specifies the number of replicas on which the write must succeed before returning an acknowledgment to the client application.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.Any">
            <summary>
            Writing: A write must be written to at least one node. If all replica nodes for the given row key are down, the write can still succeed after a hinted handoff has been written. If all replica nodes are down at write time, an ANY write is not readable until the replica nodes for that row have recovered.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.One">
            <summary>
            Returns a response from the closest replica, as determined by the snitch.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.Two">
            <summary>
            Returns the most recent data from two of the closest replicas.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.Three">
            <summary>
            Returns the most recent data from three of the closest replicas.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.Quorum">
            <summary>
            Reading: Returns the record with the most recent timestamp after a quorum of replicas has responded regardless of data center.
            <para>
            Writing: A write must be written to the commit log and memory table on a quorum of replica nodes.
            </para>
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.All">
            <summary>
            Reading: Returns the record with the most recent timestamp after all replicas have responded. The read operation will fail if a replica does not respond.
            <para>
            Writing: A write must be written to the commit log and memory table on all replica nodes in the cluster for that row.
            </para>
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.LocalQuorum">
            <summary>
            Reading: Returns the record with the most recent timestamp once a quorum of replicas in the current data center as the coordinator node has reported.
            <para>
            Writing: A write must be written to the commit log and memory table on a quorum of replica nodes in the same data center as the coordinator node. Avoids latency of inter-data center communication.
            </para>
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.EachQuorum">
            <summary>
            Reading: Returns the record once a quorum of replicas in each data center of the cluster has responded.
            <para>Writing: Strong consistency. A write must be written to the commit log and memtable on a quorum of replica nodes in all data centers.</para>
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.Serial">
            <summary>
            Allows reading the current (and possibly uncommitted) state of data without proposing a new addition or update. If a SERIAL read finds an uncommitted transaction in progress, it will commit the transaction as part of the read.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.LocalSerial">
            <summary>
            Same as <c>Serial</c>, but confined to the data center.
            </summary>
        </member>
        <member name="F:Dse.ConsistencyLevel.LocalOne">
            <summary>
            Similar to <c>One</c> but only within the DC the coordinator is in.
            </summary>
        </member>
        <member name="P:Dse.ControlConnection.ProtocolVersion">
            <summary>
            Gets the binary protocol version to be used for this cluster.
            </summary>
        </member>
        <member name="M:Dse.ControlConnection.Init">
            <summary>
            Tries to create a connection to any of the contact points and retrieve cluster metadata for the first time.
            Not thread-safe.
            </summary>
            <exception cref="T:Dse.NoHostAvailableException" />
            <exception cref="T:System.TimeoutException" />
            <exception cref="T:Dse.DriverInternalError" />
        </member>
        <member name="M:Dse.ControlConnection.Connect(System.Boolean)">
            <summary>
            Iterates through the query plan or hosts and tries to create a connection.
            Once a connection is made, topology metadata is refreshed and the ControlConnection is subscribed to Host
            and Connection events.
            </summary>
            <param name="isInitializing">
            Determines whether the ControlConnection is connecting for the first time as part of the initialization.
            </param>
            <exception cref="T:Dse.NoHostAvailableException" />
            <exception cref="T:Dse.DriverInternalError" />
        </member>
        <member name="M:Dse.ControlConnection.SubscribeToServerEvents(Dse.Connection)">
            <summary>
            Gets the next connection and setup the event listener for the host and connection.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException" />
            <exception cref="T:Dse.DriverInternalError" />
        </member>
        <member name="M:Dse.ControlConnection.Unsubscribe">
            <summary>
            Unsubscribe from the current host 'Down' event.
            </summary>
        </member>
        <member name="M:Dse.ControlConnection.GetAddressForPeerHost(Dse.Row,Dse.IAddressTranslator,System.Int32)">
            <summary>
            Uses system.peers values to build the Address translator
            </summary>
        </member>
        <member name="M:Dse.ControlConnection.Query(System.String,System.Boolean)">
            <summary>
            Uses the active connection to execute a query
            </summary>
        </member>
        <member name="M:Dse.ControlConnection.GetRowSet(Dse.Responses.Response)">
            <summary>
            Validates that the result contains a RowSet and returns it.
            </summary>
            <exception cref="T:System.NullReferenceException" />
            <exception cref="T:Dse.DriverInternalError" />
        </member>
        <member name="M:Dse.ControlConnection.GetHostEnumerable">
            <summary>
            An iterator designed for the underlying collection to change
            </summary>
        </member>
        <member name="T:Dse.IMetadataQueryProvider">
            <summary>
            Represents an object that can execute metadata queries
            </summary>
        </member>
        <member name="P:Dse.IMetadataQueryProvider.Address">
            <summary>
            The address of the endpoint used by the ControlConnection
            </summary>
        </member>
        <member name="F:Dse.CqlQueryTools.SelectSchemaPeers">
            <summary>
            The cql query to select the peers
            </summary>
        </member>
        <member name="F:Dse.CqlQueryTools.SelectSchemaLocal">
            <summary>
            The cql query to get the local schema version information
            </summary>
        </member>
        <member name="T:Dse.DataCollectionMetadata">
            <summary>
            Describes a table or materialized view in Cassandra
            </summary>
        </member>
        <member name="T:Dse.DataCollectionMetadata.SortOrder">
            <summary>
            Specifies sort order of the clustering keys
            </summary>
        </member>
        <member name="P:Dse.DataCollectionMetadata.Name">
            <summary>
            Gets the table name
            </summary>
        </member>
        <member name="P:Dse.DataCollectionMetadata.TableColumns">
            <summary>
            Gets the table columns
            </summary>
        </member>
        <member name="P:Dse.DataCollectionMetadata.ColumnsByName">
            <summary>
            Gets a dictionary of columns by name
            </summary>
        </member>
        <member name="P:Dse.DataCollectionMetadata.PartitionKeys">
            <summary>
            Gets an array of columns that are part of the partition key in correct order
            </summary>
        </member>
        <member name="P:Dse.DataCollectionMetadata.ClusteringKeys">
            <summary>
            Gets an array of pairs of columns and sort order that are part of the clustering key
            </summary>
        </member>
        <member name="P:Dse.DataCollectionMetadata.Options">
            <summary>
            Gets the table options
            </summary>
        </member>
        <member name="T:Dse.Data.CqlCommand">
            <summary>
            Represents an CQL statement to execute against Cassandra
            </summary>
        </member>
        <member name="P:Dse.Data.CqlCommand.CommandText">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.CqlCommand.ConsistencyLevel">
            <summary>
            Gets or sets the ConsistencyLevel when executing the current <see cref="T:Dse.Data.CqlCommand"/>.
            </summary>
        </member>
        <member name="P:Dse.Data.CqlCommand.IsPrepared">
            <summary>
            Gets whether this command has been prepared.
            </summary>
        </member>
        <member name="P:Dse.Data.CqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:Dse.Data.CqlParameter"/>s.
            </summary>
        </member>
        <member name="T:Dse.Data.CqlConnection">
            <summary>
            Represents a CQL connection.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlConnection.#ctor">
            <summary>
            Initializes a <see cref="T:Dse.Data.CqlConnection"/>.
            </summary>
        </member>
        <member name="M:Dse.Data.CqlConnection.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Dse.Data.CqlConnection"/>.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Dse.Data.CqlConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlConnection.ChangeDatabase(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlConnection.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlConnection.Close">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.CqlConnection.ConnectionString">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlConnection.CreateDbCommand">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.CqlConnection.DataSource">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.CqlConnection.Database">
            <summary>
            Returns the Keyspace
            </summary>
        </member>
        <member name="M:Dse.Data.CqlConnection.Open">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlConnection.OnBuildingCluster(Dse.Builder)">
            <summary>
            To be overridden in child classes to change the default <see cref="T:Dse.Builder"/> settings
            for building a <see cref="T:Dse.Cluster"/>.
            
            For example, some clients might want to specify the <see cref="T:Dse.DCAwareRoundRobinPolicy"/>
            when building the <see cref="T:Dse.Cluster"/> so that the clients could talk to only the hosts
            in specified datacenter for better performance.
            </summary>
            <param name="builder">The <see cref="T:Dse.Builder"/> for building a <see cref="T:Dse.Cluster"/>.</param>
        </member>
        <member name="M:Dse.Data.CqlConnection.CreateCluster(Dse.CassandraConnectionStringBuilder)">
            <summary>
            Creates a <see cref="T:Dse.Cluster"/>. By default <see cref="T:Dse.Cluster"/>s are created and cached
            by cluster name specified in connection string.
            
            To be overridden in child classes to change the default creation and caching behavior.
            </summary>
            <param name="connectionStringBuilder">The <see cref="T:Dse.CassandraConnectionStringBuilder"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Data.CqlConnection.CreatedSession(System.String)">
            <summary>
            Creates a <see cref="T:Dse.ISession"/>.
            
            To be overridden in child classes if want to cache the <see cref="T:Dse.ISession"/> created.
            </summary>
            <param name="keyspace">The keyspace.</param>
            <returns>Returns the created <see cref="T:Dse.ISession"/>.</returns>
        </member>
        <member name="M:Dse.Data.CqlConnection.CreatePreparedStatement(System.String)">
            <summary>
            To be called by CqlCommand to creates a <see cref="T:Dse.PreparedStatement"/>
            from <see cref="F:Dse.Data.CqlConnection.ManagedConnection"/>.
            
            To be overridden in child classes if want to cache the <see cref="T:Dse.PreparedStatement"/> created.
            </summary>
            <param name="cqlQuery">The CQL query string.</param>
            <returns>Returns the created <see cref="T:Dse.PreparedStatement"/>.</returns>
        </member>
        <member name="P:Dse.Data.CqlConnection.ServerVersion">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.CqlConnection.State">
            <inheritdoc />
        </member>
        <member name="T:Dse.Data.CqlDataAdapter">
            <summary>
            Implementation of the <see cref="T:System.Data.IDbDataAdapter"/> interface. Provides
            strong typing, but inherit most of the functionality needed to fully implement a DataAdapter.
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Dse.Data.CqlParameter">
            <summary>
            Represents a Cql parameter.
            </summary>
        </member>
        <member name="M:Dse.Data.CqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dse.Data.CqlParameter" /> class.
            </summary>
        </member>
        <member name="M:Dse.Data.CqlParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dse.Data.CqlParameter" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Dse.Data.CqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dse.Data.CqlParameter" /> class.
            The type of the parameter will be guessed from the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Dse.Data.CqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.
            </summary>
        </member>
        <member name="P:Dse.Data.CqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is 
            input-only, output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.ParameterDirection" /> values.
            The default is Input.
            </returns>
            <exception cref="T:System.NotSupportedException">Cql only supports input parameters</exception>
        </member>
        <member name="P:Dse.Data.CqlParameter.IsNullable">
            <summary>
            Gets a value indicating whether the parameter accepts null values.
            </summary>
            <returns>true if null values are accepted; otherwise, false. The default is false. </returns>
        </member>
        <member name="P:Dse.Data.CqlParameter.ParameterName">
            <summary>
            Gets or sets the name of the <see cref="T:System.Data.IDataParameter" />.
            </summary>
            <returns>
            The name of the <see cref="T:System.Data.IDataParameter" />.
            The default is an empty string.
            </returns>
        </member>
        <member name="P:Dse.Data.CqlParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped
            to the <see cref="T:System.Data.DataSet" /> and used for loading or 
            returning the <see cref="P:System.Data.IDataParameter.Value" />.
            </summary>
            <returns>
            The name of the source column that is mapped to the <see cref="T:System.Data.DataSet" />.
            The default is an empty string.
            </returns>
        </member>
        <member name="P:Dse.Data.CqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion" />
            to use when loading <see cref="P:System.Data.IDataParameter.Value" />.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.DataRowVersion" /> values.
            The default is Current.
            </returns>
        </member>
        <member name="P:Dse.Data.CqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter. 
            If no type information was provided earlier, the type of the parameter will be
            guessed from the value's type.
            </summary>
            <returns>
            An <see cref="T:System.Object" /> that is the value of the parameter.
            The default value is null.
            </returns>
        </member>
        <member name="P:Dse.Data.CqlParameter.Size">
            <summary>
            The size of the parameter.
            </summary>
            <returns>Always returns 0.</returns>
        </member>
        <member name="P:Dse.Data.CqlParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates whether the source column is nullable.
            This allows <see cref="T:System.Data.Common.DbCommandBuilder" /> 
            to correctly generate Update statements for nullable columns.
            </summary>
            <returns>true if the source column is nullable; false if it is not. </returns>
        </member>
        <member name="M:Dse.Data.CqlParameter.ResetDbType">
            <summary>
            Resets the DbType property to its original settings.
            </summary>
        </member>
        <member name="T:Dse.Data.CqlParameterCollection">
            <summary>
            Represents a collection of <see cref="T:Dse.Data.CqlParameter"/>s.
            </summary>
        </member>
        <member name="P:Dse.Data.CqlParameterCollection.Count">
            <summary>
            Specifies the number of items in the collection.
            </summary>
            <returns>The number of items in the collection.</returns>
        </member>
        <member name="P:Dse.Data.CqlParameterCollection.SyncRoot">
            <summary>
            Specifies the <see cref="T:System.Object" /> to be used to synchronize access to the collection.
            </summary>
            <returns>
            A <see cref="T:System.Object" /> to be used to synchronize access 
            to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </returns>
        </member>
        <member name="P:Dse.Data.CqlParameterCollection.IsFixedSize">
            <summary>
            Specifies whether the collection is a fixed size.
            </summary>
            <returns>true if the collection is a fixed size; otherwise false.</returns>
        </member>
        <member name="P:Dse.Data.CqlParameterCollection.IsReadOnly">
            <summary>
            Specifies whether the collection is read-only.
            </summary>
            <returns>true if the collection is read-only; otherwise false.</returns>
        </member>
        <member name="P:Dse.Data.CqlParameterCollection.IsSynchronized">
            <summary>
            Specifies whether the collection is synchronized.
            </summary>
            <returns>true if the collection is synchronized; otherwise false.</returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:System.Data.Common.DbParameter" /> object
            to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
            <param name="value">
            The <see cref="P:System.Data.Common.DbParameter.Value" />
            of the <see cref="T:System.Data.Common.DbParameter" /> to add to the collection.
            </param>
            <returns>
            The index of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection. 
            </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Add(Dse.Data.CqlParameter)">
            <summary>
            Adds the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns> </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a new parameter with the specified name and value. The name will be
            parsed to extract table and keyspace information (if any). The parameter type
            will be guessed from the object value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>The created <see cref="T:Dse.Data.CqlParameter"/>.</returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Contains(System.Object)">
            <summary>
            Indicates whether a <see cref="T:System.Data.Common.DbParameter" /> 
            with the specified <see cref="P:System.Data.Common.DbParameter.Value" /> 
            is contained in the collection.
            </summary>
            <param name="value">
            The <see cref="P:System.Data.Common.DbParameter.Value" /> 
            of the <see cref="T:System.Data.Common.DbParameter" /> to look for in the collection.
            </param>
            <returns>
            true if the <see cref="T:System.Data.Common.DbParameter" /> is in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Clear">
            <summary>
            Removes all <see cref="T:System.Data.Common.DbParameter" /> values
            from the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified <see cref="T:System.Data.Common.DbParameter" /> object.
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter" /> object in the collection.</param>
            <returns>The index of the specified <see cref="T:System.Data.Common.DbParameter" /> object.</returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index of the <see cref="T:System.Data.Common.DbParameter" /> object
            with the specified name into the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the <see cref="T:System.Data.Common.DbParameter" /> object.</param>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter" /> object to insert into the collection.</param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:System.Data.Common.DbParameter" /> object from the collection.
            </summary>
            <param name="value">The <see cref="T:System.Data.Common.DbParameter" /> object to remove.</param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Data.Common.DbParameter" /> object at the specified from the collection.
            </summary>
            <param name="index">
            The index where the <see cref="T:System.Data.Common.DbParameter" /> object is located.
            </param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the <see cref="T:System.Data.Common.DbParameter" /> object 
            with the specified name from the collection.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> object to remove.
            </param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter" /> object 
            at the specified index to a new value.
            </summary>
            <param name="index">
            The index where the <see cref="T:System.Data.Common.DbParameter" /> objectis located. 
            </param>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter" /> value.</param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Sets the <see cref="T:System.Data.Common.DbParameter" /> object
            with the specified name to a new value.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection.
            </param>
            <param name="value">The new <see cref="T:System.Data.Common.DbParameter" /> value.</param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the <see cref="T:System.Data.Common.DbParameter" /> object with the specified name.
            </summary>
            <returns>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> object in the collection.
            </param>
            The index of the <see cref="T:System.Data.Common.DbParameter" /> object with the specified name.
            </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.GetEnumerator">
            <summary>
            Exposes the <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> method, 
            which supports a simple iteration over a collection by a .NET Framework data provider.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used 
            to iterate through the collection.
            </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.GetParameter(System.Int32)">
            <summary>
            Returns the <see cref="T:System.Data.Common.DbParameter" /> object at the specified index in the collection.
            </summary>
            <param name="index">
            The index of the <see cref="T:System.Data.Common.DbParameter" />in the collection.
            </param>
            <returns>
            The <see cref="T:System.Data.Common.DbParameter" /> object 
            at the specified index in the collection.
            </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.GetParameter(System.String)">
            <summary>
            Returns <see cref="T:System.Data.Common.DbParameter" /> the object with the specified name.
            </summary>
            <param name="parameterName">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> in the collection.
            </param>
            <returns>The <see cref="T:System.Data.Common.DbParameter" /> the object with the specified name. </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.Contains(System.String)">
            <summary>
            Indicates whether a <see cref="T:System.Data.Common.DbParameter" />
            with the specified name exists in the collection.
            </summary>
            <param name="value">
            The name of the <see cref="T:System.Data.Common.DbParameter" /> 
            to look for in the collection.
            </param>
            <returns>
            true if the <see cref="T:System.Data.Common.DbParameter" /> is
            in the collection; otherwise false.
            </returns>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies an array of items to the collection starting at the specified index.
            </summary>
            <param name="array">The array of items to copy to the collection.</param>
            <param name="index">The index in the collection to copy the items.</param>
        </member>
        <member name="M:Dse.Data.CqlParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of items with the specified values 
            to the <see cref="T:System.Data.Common.DbParameterCollection" />.
            </summary>
            <param name="values">
            An array of values of type <see cref="T:System.Data.Common.DbParameter" /> 
            to add to the collection. 
            </param>
        </member>
        <member name="T:Dse.Data.CqlProviderFactory">
            <summary>
            Represents a set of methods for creating instances of a CQL ADO.NET implementation
            of the data source classes.
            </summary>
        </member>
        <member name="T:Dse.Data.CqlReader">
            <summary>
            Reads a forward-only stream of rows from Cassandra.
            </summary>
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.CqlReader.FieldCount">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetChar(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetDataTypeName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetFieldType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetGuid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetOrdinal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.GetValues(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.IsDBNull(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.NextResult">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.CqlReader.Read">
            <inheritdoc />
        </member>
        <member name="T:Dse.Data.Linq.AllowFilteringAttribute">
            <summary>
            The ALLOW FILTERING option allows to explicitly allow queries that require filtering. 
            Please note that a query using ALLOW FILTERING may thus have unpredictable performance (for the definition above), i.e. even a query that selects a handful of records may exhibit performance that depends on the total amount of data stored in the cluster.
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.Batch.Keyspace">
            <inheritdoc />
        </member>
        <member name="T:Dse.Data.Linq.ClientProjectionCqlQuery`2">
            <summary>
            Represents a <see cref="T:Dse.Data.Linq.CqlQuery`1"/> that uses client projects of a given <see cref="T:Dse.Data.Linq.CqlQuery`1"/>.
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TResult">Target type</typeparam>
        </member>
        <member name="M:Dse.Data.Linq.ClientProjectionCqlQuery`2.#ctor(System.Linq.Expressions.Expression,Dse.Data.Linq.CqlQuery{`0},System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Data.Linq.ClientProjectionCqlQuery`2"/>.
            </summary>
            <param name="expression">The complete query expression</param>
            <param name="source">The source <see cref="T:Dse.Data.Linq.CqlQuery`1"/></param>
            <param name="projectionExpression">The projection expression</param>
            <param name="canCompile">Determines if the projection can be compiled and the delegate called.</param>
        </member>
        <member name="T:Dse.Data.Linq.IClientProjectionCqlQuery">
            <summary>
            Represents an internal projection query
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.ClusteringKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Clustering Key
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ClusteringKeyAttribute.ClusteringOrder">
            <summary>
            Gets or sets the string representation of the clustering order
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ClusteringKeyAttribute.ClusteringSortOrder">
            <summary>
            Gets or sets the clustering order
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ClusteringKeyAttribute.Index">
            <summary>
            Index of the clustering key, relative to the other clustering keys
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ClusteringKeyAttribute.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ClusteringKeyAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Sets the clustering key and optionally a clustering order for it.
            </summary>
            <param name="index">Index of the clustering key, relative to the other clustering keys</param>
            <param name="order">Use "DESC" for descending order and "ASC" for ascending order.</param>
        </member>
        <member name="T:Dse.Data.Linq.CounterAttribute">
            <summary>
            Indicates that the property or field is a counter column
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.CqlCommand">
            <summary>
            Represents a Linq query (UPDATE/INSERT/DELETE) that gets evaluated as a CQL statement.
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.CqlCommand.QueryString">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.Linq.CqlCommand.QueryValues">
            <inheritdoc />
        </member>
        <member name="P:Dse.Data.Linq.CqlCommand.QueryTrace">
            <summary>
            After being executed, it retrieves the trace of the CQL query.
            <para>Use <see cref="M:Dse.IStatement.EnableTracing(System.Boolean)"/> to enable tracing.</para>
            <para>
            Note that enabling query trace introduces server-side overhead by storing request information, so it's
            recommended that you only enable query tracing when trying to identify possible issues / debugging. 
            </para>
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlCommand.Execute">
            <summary>
            Executes the command using the <see cref="T:Dse.ISession"/>.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlCommand.SetTTL(System.Int32)">
            <summary>
            Sets the time for data in a column to expire (TTL) for INSERT and UPDATE commands .
            </summary>
            <param name="seconds">Amount of seconds</param>
        </member>
        <member name="M:Dse.Data.Linq.CqlCommand.SetTimestamp(System.DateTimeOffset)">
            <summary>
            Sets the timestamp associated with this statement execution.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlCommand.ExecuteAsync">
            <summary>
            Evaluates the Linq command and executes asynchronously the cql statement.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlCommand.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>
            Starts executing the statement async
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlCommand.EndExecute(System.IAsyncResult)">
            <summary>
            Starts the async executing of the statement
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.CqlConditionalCommand`1">
            <summary>
            Represents an INSERT/UPDATE/DELETE command with support for Lightweight transactions.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlConditionalCommand`1.ExecuteAsync">
            <summary>
            Asynchronously executes a conditional query and returns information whether it was applied.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlConditionalCommand`1.Execute">
            <summary>
            Executes a conditional query and returns information whether it was applied.
            </summary>
            <returns>An instance of AppliedInfo{TEntity}</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlConditionalCommand`1.SetTTL(System.Int32)">
            <summary>
            Sets the time for data in a column to expire (TTL) for INSERT and UPDATE commands.
            </summary>
            <param name="seconds">Amount of seconds.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlConditionalCommand`1.SetTimestamp(System.DateTimeOffset)">
            <summary>
            Sets the timestamp associated with this statement execution.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlConditionalCommand`1.ToString">
            <summary>
            Generates and returns the Cql query
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.CqlExpressionVisitor.DefaultQueryStringCapacity">
            <summary>
            The initial capacity for query string builders.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.CqlExpressionVisitor.DefaultClauseParameterCapacity">
            <summary>
            The initial capacity for WHERE and SET list parameters
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.CqlExpressionVisitor._conditions">
            <summary>
            The active conditions (WHERE or IF clause)
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlExpressionVisitor.GetSelect(System.Linq.Expressions.Expression,System.Object[]@)">
            <summary>
            Gets a cql SELECT statement based on the current state
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlExpressionVisitor.Escape(System.String)">
            <summary>
            Escapes an identifier if necessary
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlExpressionVisitor.GetDelete(System.Linq.Expressions.Expression,System.Object[]@,System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Gets a cql DELETE statement based on the current state
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlExpressionVisitor.GetUpdate(System.Linq.Expressions.Expression,System.Object[]@,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Dse.Mapping.MapperFactory)">
            <summary>
            Gets a cql UPDATE statement based on the current state
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlExpressionVisitor.FillAggregate(Dse.Data.Linq.ParsePhase,System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Fill the SELECT field
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlExpressionVisitor.AddProjection(System.Linq.Expressions.Expression,Dse.Mapping.PocoColumn)">
            <summary>
            Tries to evaluate the current expression and add it as a projection
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.CqlFunction">
            <summary>
            Represents a set of functions that are defined at CQL level
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.#ctor">
            <summary>
            Only suitable for Linq Expression generations
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.MaxTimeUuid(System.DateTimeOffset)">
            <summary>
            CQL function maxTimeuuid() that returns biggest timeuuid value having the provided timestamp
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.MinTimeUuid(System.DateTimeOffset)">
            <summary>
            CQL function maxTimeuuid() that returns smallest timeuuid value having the provided timestamp
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.Token(System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.Token(System.Object,System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.Token(System.Object,System.Object,System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlFunction.Token(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            CQL function token
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.CqlInsert`1">
            <summary>
            Represents an INSERT statement
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.CqlOperator">
            <summary>
            Contains methods to use as Linq operators.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlOperator.Append``1(``0)">
            <summary>
            Represents the CQL add assign (+=) operator for collections
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlOperator.Prepend``1(``0)">
            <summary>
            Represents the CQL prepend operator for collections (col1 = ? + col1)
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlOperator.SubstractAssign``1(``0)">
            <summary>
            Represents the CQL operator to remove an item from lists and sets (col1 = col1 - ?).
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlOperator.SubstractAssign``2(System.Collections.Generic.Dictionary{``0,``1},``0[])">
            <summary>
            Represents the CQL operator to remove an item from a map (col1 = col1 - ?).
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlOperator.SubstractAssign``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
            Represents the CQL operator to remove an item from a map (col1 = col1 - ?).
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlOperator.SubstractAssign``2(System.Collections.Generic.SortedDictionary{``0,``1},``0[])">
            <summary>
            Represents the CQL operator to remove an item from a map (col1 = col1 - ?).
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.CqlQuery`1">
            <summary>
            Represents a Linq query that gets evaluated as a CQL statement.
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.CqlQuery`1.Provider">
            <summary>
            IQueryable.Provider implementation
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQuery`1.SetPageSize(System.Int32)">
            <summary>
            Sets the page size for this query.
            The page size controls how much resulting rows will be retrieved
            simultaneously (the goal being to avoid loading too much results
            in memory for queries yielding large results). Please note that
            while value as low as 1 can be used, it is highly discouraged to
            use such a low value in practice as it will yield very poor
            performance. If in doubt, leaving the default is probably a good
            idea.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQuery`1.SetPagingState(System.Byte[])">
            <summary>
            Sets the paging state, a token representing the current page state of query used to continue paging by retrieving the following result page.
            Setting the paging state will disable automatic paging.
            </summary>
            <returns>This instance</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQuery`1.ExecutePagedAsync">
            <summary>
            Asynchronously executes the query and returns a task of a page of results
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQuery`1.ExecutePaged">
            <summary>
            Executes the query and returns a page of results
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQuery`1.ToString">
            <summary>
            Generates and returns cql query for this instance 
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.CqlQueryBase`1.QueryTrace">
            <summary>
            After being executed, it retrieves the trace of the CQL query.
            <para>Use <see cref="M:Dse.IStatement.EnableTracing(System.Boolean)"/> to enable tracing.</para>
            <para>
            Note that enabling query trace introduces server-side overhead by storing request information, so it's
            recommended that you only enable query tracing when trying to identify possible issues / debugging. 
            </para>
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.CqlQueryBase`1.PocoData">
            <summary>
            The information associated with the TEntity
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.CqlQueryBase`1.Keyspace">
            <inheritdoc />
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryBase`1.AdaptResult(System.String,Dse.RowSet)">
            <summary>
            Projects a RowSet that is the result of a given cql query into a IEnumerable{TEntity}.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryBase`1.ExecuteAsync">
            <summary>
            Evaluates the Linq query, executes asynchronously the cql statement and adapts the results.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryBase`1.Execute">
            <summary>
            Evaluates the Linq query, executes the cql statement and adapts the results.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.Select``2(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="source">A CqlQuery&lt;TSource&gt; which after execution returns a sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt; whose elements
            are the result of invoking the transform function on each element of source.
            To execute this CqlQuery use <c>Execute()</c> method.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.Where``1(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
             Returns a CqlQuery which after execution returns filtered sequence of values based on a predicate.
             To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt;
            that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.GroupBy``2(Dse.Data.Linq.CqlQuery{``1},System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
             Returns a CqlQuery which after execution returns grouped sequence of values based on a predicate.
             To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the value returned by selector.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return an IEnumerable&lt;TSource&gt;
            that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.Count``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns the number of rows matching the query.
            To execute this CqlScalar use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>
            <returns>A single result: the number of rows matching the query.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.First``1(Dse.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a CqlQuery which after execution returns the first element in a sequence that satisfies a specified condition.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Table&lt;TSource&gt; to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return first element in the sequence
            that passes the test in the specified predicate function.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.FirstOrDefault``1(Dse.Data.Linq.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a CqlQuery which after execution will return the first element of the sequence that satisfies a condition
            or a default value if no such element is found.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The Table&lt;TSource&gt;  to return the first element of.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return <c>default(TSource)</c> if source is empty
            or if no element passes the test specified by predicate,
            otherwise the first element in source that passes the test specified by predicate.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.First``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlQuery which after execution will return the first element in a sequence.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>        
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return first element in the sequence.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.FirstOrDefault``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a CqlQuery which after execution will return the first element of a sequence,
            or a default value if the sequence contains no elements.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>        
            <returns><c>a CqlQuery&lt;TSource&gt; which after execution will return default(TSource)</c> if source is empty,
            otherwise the first element in source.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.Delete``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a representation of a DELETE cql statement
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.DeleteIf``1(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a representation of a DELETE ... IF ... cql statement, for Lightweight Transactions support
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.Update``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a representation of a UPDATE cql statement
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.UpdateIf``1(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns a representation of a UPDATE ... IF ... cql statement, for Lightweight Transactions support
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.UpdateIfExists``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            Returns a representation of a UPDATE ... IF EXISTS cql statement, for Lightweight Transactions support.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.Take``1(Dse.Data.Linq.CqlQuery{``0},System.Int32)">
            <summary>
            Returns a CqlQuery which after execution will return IEnumerable&lt;TSource&gt;
            with specified number of contiguous elements from the start of a sequence.
            To execute this CqlQuery use <c>Execute()</c> method.
            </summary>        
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The CqlQuery&lt;TSource&gt; to return the first element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution will return IEnumerable&lt;TSource&gt;
            with specified number of contiguous elements from the start of a sequence.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.AllowFiltering``1(Dse.Data.Linq.CqlQuery{``0})">
            <summary>
            The ALLOW FILTERING option allows to explicitly allow queries that require filtering. 
            Please note that a query using ALLOW FILTERING may thus have unpredictable performance (for the definition above), i.e. even a query that selects a handful of records may exhibit performance that depends on the total amount of data stored in the cluster.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.OrderBy``2(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order, returned from CqlQuery&lt;TSource&gt;.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution returns an IEnumerable&lt;TSource&gt; sorted in ascending manner according to a key.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.OrderByDescending``2(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">A sequence of values to order, returned from CqlQuery&lt;TSource&gt;.</param>
            <param name="func">A function to extract a key from an element.</param>
            <returns>a CqlQuery&lt;TSource&gt; which after execution returns an IEnumerable&lt;TSource&gt; sorted in descending manner according to a key.</returns>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.ThenBy``2(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryExtensions.ThenByDescending``2(Dse.Data.Linq.CqlQuery{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements, which are returned from CqlQuery, in descending order according to a key.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQuerySingleElement`1.Execute">
            <summary>
            Evaluates the Linq query, executes the cql statement and returns the first result.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.CqlQueryTools.HexStringTable">
            <summary>
            Hex string lookup table.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.CqlQueryTools.ToHex(System.Byte[])">
            <summary>
            Returns a hex string representation of an array of bytes.
            http://blogs.msdn.com/b/blambert/archive/2009/02/22/blambert-codesnip-fast-byte-array-to-hex-string-conversion.aspx
            </summary>
            <param name="value">The array of bytes.</param>
            <returns>A hex string representation of the array of bytes.</returns>
        </member>
        <member name="T:Dse.Data.Linq.CqlScalar`1">
            <summary>
            Represents an IQueryable that returns the first column of the first rows
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Dse.Data.Linq.ExpressionParsing.BinaryConditionItem">
            <summary>
            Represents a part of a WHERE clause
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ExpressionParsing.BinaryConditionItem._isYoda">
            <summary>
            Yoda conditions are the ones the literal value of the condition comes first while the variable comes second.
            Ie: "? = col1"  
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ExpressionParsing.BinaryConditionItem.Column">
            <summary>
            Returns the first column defined or null.
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.ExpressionParsing.IConditionItem">
            <summary>
            Represents an individual condition part of the WHERE or IF clause.
            See CQL relation: http://cassandra.apache.org/doc/latest/cql/dml.html#grammar-token-relation 
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.SetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Sets the operator of the binary condition
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.SetParameter(System.Object)">
            <summary>
            Sets the parameter or parameters of the condition
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.SetColumn(Dse.Mapping.PocoColumn)">
            <summary>
            Sets the column or columns included in this condition.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.AllowMultipleColumns">
            <summary>
            Determines if its possible to include multiple columns in this condition.
            For example: tuple relations (col1, col2) = ?.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.AllowMultipleParameters">
            <summary>
            Determines if its possible to include multiple parameters in this condition
            For example: token function calls token(col1, col2) >= token(?, ?).
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.SetFunctionName(System.String)">
            <summary>
            Sets the CQL funcition of the current side of the condition.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.SetAsCompareTo">
            <summary>
            Marks this condition as a result of a IComparable.CompareTo() call.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.ExpressionParsing.IConditionItem.ToCql(Dse.Mapping.PocoData,System.Text.StringBuilder,System.Collections.Generic.IList{System.Object})">
            <summary>
            Converts this instance into a query and parameters.
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.IgnoreAttribute">
            <summary>
            Specifies that the field or property should be ignored by Linq
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ITable.Name">
            <summary>
            Gets the table name in Cassandra
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.ITable.KeyspaceName">
            <summary>
            Gets the name of the keyspace used. If null, it uses the active session keyspace.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.LinqAttributeBasedColumnDefinition.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new column definition for the field specified using any attributes on the field to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.LinqAttributeBasedColumnDefinition.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new column definition for the property specified using any attributes on the property to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.LinqAttributeBasedColumnDefinition.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines if the member has an attribute applied
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.LinqAttributeBasedTypeDefinition">
            <summary>
            A type definition that uses Linq attributes on the class to determine its settings.
            It uses Linq default backward-compatible settings (like case sensitivity)
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.Select">
            <summary>
            Select() method calls.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.Condition">
            <summary>
            Where() method calls or LWT conditions.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.SelectBinding">
            <summary>
            Lambda evaluation after Select()
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.Take">
            <summary>
            Take() method calls.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.OrderBy">
            <summary>
            OrderBy() method calls.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.OrderByDescending">
            <summary>
            OrderByDescending() method calls.
            </summary>
        </member>
        <member name="F:Dse.Data.Linq.ParsePhase.GroupBy">
            <summary>
            GroupBy() method calls.
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.PartitionKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Partition Key
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.SecondaryIndexAttribute">
            <summary>
            Determines that there is a secondary index defined for the column
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.SessionExtensions.GetTable``1(Dse.ISession,System.String,System.String)">
            <summary>
            <para>Extension method used for backward-compatibility, use <see cref="M:Dse.Data.Linq.Table`1.#ctor(Dse.ISession)"/> constructor instead.</para>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, <strong>case-sensitive</strong> class and method names will be used.
            </remarks>
            <typeparam name="TEntity">The object type</typeparam>
            <param name="session">The session to be used to execute the statements</param>
            <param name="tableName">The table name in Cassandra. If null, it will be retrieved from the TEntity information.</param>
            <param name="keyspaceName">The keyspace in which the table exists. If null, the current session keyspace will be used.</param>
            <returns></returns>
        </member>
        <member name="T:Dse.Data.Linq.StaticColumnAttribute">
            <summary>
            Indicates that the property or field is a static column
            </summary>
        </member>
        <member name="T:Dse.Data.Linq.Table`1">
            <summary>
            A Linq IQueryProvider that represents a table in Cassandra
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Dse.Data.Linq.Table`1.Name">
            <summary>
            Gets the name of the Table in Cassandra
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.Table`1.KeyspaceName">
            <summary>
            Gets the name of the keyspace used. If null, it uses the active session keyspace.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.#ctor(Dse.ISession,Dse.Mapping.MappingConfiguration,System.String,System.String)">
            <summary>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Use this constructor if you want to use a different table and keyspace names than the ones defined in the mapping configuration.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, case-insensitive class and method names will be used.
            </remarks>
            <param name="session">Session instance to be used to execute the statements</param>
            <param name="config">Mapping configuration</param>
            <param name="tableName">Name of the table</param>
            <param name="keyspaceName">Name of the keyspace were the table was created.</param>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.#ctor(Dse.ISession,Dse.Mapping.MappingConfiguration,System.String)">
            <summary>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Use this constructor if you want to use a different table name than the one defined in the mapping configuration.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, case-insensitive class and method names will be used.
            </remarks>
            <param name="session">Session instance to be used to execute the statements</param>
            <param name="config">Mapping configuration</param>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.#ctor(Dse.ISession,Dse.Mapping.MappingConfiguration)">
            <summary>
            <para>Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using the mapping configuration provided.</para>
            <para>Fluent configuration or attributes can be used to define mapping information.</para>
            </summary>
            <remarks>
            In case no mapping information is defined, case-insensitive class and method names will be used.
            </remarks>
            <param name="session">Session instance to be used to execute the statements</param>
            <param name="config">Mapping configuration</param>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.#ctor(Dse.ISession)">
            <summary>
            Creates a new instance of the Linq IQueryProvider that represents a table in Cassandra using <see cref="P:Dse.Mapping.MappingConfiguration.Global"/> configuration.
            </summary>
            <param name="session">Session instance to be used to execute the statements</param>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:Dse.Data.Linq.CqlQuery`1"/>
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.Insert(`0)">
            <summary>
            Returns a new <see cref="T:Dse.Data.Linq.CqlInsert`1"/> command. Use
            <see cref="M:Dse.Data.Linq.CqlCommand.Execute"/> method to execute the query.
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.Table`1.Insert(`0,System.Boolean)">
            <summary>
            Returns a new <see cref="T:Dse.Data.Linq.CqlInsert`1"/> command. Use
            <see cref="M:Dse.Data.Linq.CqlCommand.Execute"/> method to execute the query.
            </summary>
            <param name="entity">The entity to insert</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> 
            entity members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
        </member>
        <member name="T:Dse.Data.Linq.TableAttribute">
            <summary>
            Specifies table information for a given class
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.TableAttribute.Name">
            <summary>
            Gets or sets the table name in Cassandra
            </summary>
        </member>
        <member name="P:Dse.Data.Linq.TableAttribute.CaseSensitive">
            <summary>
            Determines if the table and column names are defined as case sensitive (default to true).
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.TableAttribute.#ctor">
            <summary>
            Specifies table information for a given class
            </summary>
        </member>
        <member name="M:Dse.Data.Linq.TableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Specifies table information for a given class
            </summary>
            <param name="name">Name of the table</param>
            <param name="caseSensitive">Determines if the table and column names are defined as case sensitive</param>
        </member>
        <member name="T:Dse.Data.Linq.VisitingParam`1">
            <summary>
            Represents nested states
            </summary>
        </member>
        <member name="T:Dse.DefaultAddressTranslator">
            <summary>
            The default <c>AddressTranslater</c> used by the driver that performs no translation, returning the same IPEndPoint as the one provided.
            </summary>
        </member>
        <member name="M:Dse.DefaultAddressTranslator.Translate(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="T:Dse.Diagnostics">
            <summary>
            Provides a set of methods and properties related to logging in the driver.
            </summary>
        </member>
        <member name="F:Dse.Diagnostics.UseLoggerFactory">
            <summary>
            Determines if a <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> API should be used to obtain a instance of logger.
            </summary>
        </member>
        <member name="F:Dse.Diagnostics.CassandraTraceSwitch">
            <summary>
            Specifies what messages should be passed to the output log when using the <see cref="T:System.Diagnostics.Trace"/> API.
            <para></para>
            <para><value>TraceLevel.Off</value> - Output no tracing messages.</para>   
            <para><value>TraceLevel.Error</value>  - Output error-handling messages.</para> 
            <para><value>TraceLevel.Warning</value> - Output warnings and error-handling messages.</para>
            <para><value>TraceLevel.Info</value> - Output informational messages, warnings, and error-handling messages.</para>
            <para><value>TraceLevel.Verbose</value> - Output all debugging and tracing messages.</para>                
            </summary>
            <remarks>
            Consider using <c>Microsoft.Extensions.Logging</c> API instead by adding a <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>
            using the <see cref="M:Dse.Diagnostics.AddLoggerProvider(Microsoft.Extensions.Logging.ILoggerProvider)"/> method.
            </remarks>
            <seealso cref="M:Dse.Diagnostics.AddLoggerProvider(Microsoft.Extensions.Logging.ILoggerProvider)"/>
        </member>
        <member name="P:Dse.Diagnostics.CassandraStackTraceIncluded">
            <summary>
            Defines if exception StackTrace information should be printed by trace logger.
            <para>Default value is <value>false</value>.</para>
            </summary>
        </member>
        <member name="P:Dse.Diagnostics.CassandraPerformanceCountersEnabled">
            <summary>
            Defines if performance counters should be enabled.
            <para>Default value is <value>false</value>.</para>
            </summary>
        </member>
        <member name="M:Dse.Diagnostics.AddLoggerProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Adds a <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider" /> to the logger factory used by the driver.
            <para>
            Be sure to call this method before initializing the <see cref="T:Dse.ICluster"/> to ensure that
            <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> API is used as driver logging mechanism instead of
            <see cref="T:System.Diagnostics.Trace"/>.
            </para>
            </summary>
            <param name="provider">The logger provider to add to the logger factory</param>
        </member>
        <member name="T:Dse.DseCluster">
            <summary>
            Information and known state of a DSE cluster.
            <para>
            This is the main entry point of the DSE driver. It extends the CQL driver's ICluster instance with DSE-specific
            features.
            </para>
            </summary>
            <example>
            <code>
            IDseCluster cluster = DseCluster.Builder().AddContactPoint("192.168.0.1").Build();
            IDseSession session = cluster.Connect("ks1");
            foreach (Row row in session.Execute(query))
            {
                //do something...
            }
            </code>
            </example>
        </member>
        <member name="E:Dse.DseCluster.HostAdded">
            <summary>
            Represents an event that is triggered when a new host is added to the cluster.
            </summary>
        </member>
        <member name="E:Dse.DseCluster.HostRemoved">
            <summary>
            Represents an event that is triggered when a new host is decommissioned from the cluster.
            </summary>
        </member>
        <member name="P:Dse.DseCluster.Metadata">
            <inheritdoc/>
        </member>
        <member name="P:Dse.DseCluster.Configuration">
            <inheritdoc/>
        </member>
        <member name="P:Dse.DseCluster.Dse#ICluster#Configuration">
            <inheritdoc/>
        </member>
        <member name="M:Dse.DseCluster.Builder">
            <summary>
            Creates a new <see cref="T:Dse.DseClusterBuilder"/> instance.
            </summary>
        </member>
        <member name="M:Dse.DseCluster.Dispose">
            <summary>
            Calls <see cref="M:Dse.DseCluster.Shutdown(System.Int32)"/> with an infinite timeout.
            </summary>
        </member>
        <member name="M:Dse.DseCluster.AllHosts">
            <summary>
            Returns all known hosts of this cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.DseCluster.Connect">
            <summary>
            Creates a new <see cref="T:Dse.IDseSession"/> for this cluster.
            </summary>
        </member>
        <member name="M:Dse.DseCluster.Connect(System.String)">
            <summary>
            Creates a new <see cref="T:Dse.IDseSession"/> for this cluster to a specific keyspaces.
            </summary>
        </member>
        <member name="M:Dse.DseCluster.ConnectAsync">
            <summary>
            Asynchronously creates a new session on this cluster.
            </summary>
        </member>
        <member name="M:Dse.DseCluster.ConnectAsync(System.String)">
            <summary>
            Asynchronously creates a new session on this cluster and using a keyspace an existing keyspace.
            </summary>
            <param name="keyspace">Case-sensitive keyspace name to use</param>
        </member>
        <member name="M:Dse.DseCluster.GetHost(System.Net.IPEndPoint)">
            <summary>
            Get a host instance for a given endpoint.
            </summary>
        </member>
        <member name="M:Dse.DseCluster.GetReplicas(System.String,System.Byte[])">
            <summary>
            Gets a collection of replicas for a given partitionKey on a given keyspace.
            </summary>
            <param name="keyspace">The keyspace name.</param>
            <param name="partitionKey">Byte array representing the partition key.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.DseCluster.Shutdown(System.Int32)">
            <summary>
            Shutdown this cluster instance. This closes all connections from all the sessions of this instance and
            reclaim all resources used by it. 
            <para>This method has no effect if the cluster has already been shutdown.</para>
            </summary>
        </member>
        <member name="M:Dse.DseCluster.ShutdownAsync(System.Int32)">
            <summary>
            Shutdown this cluster instance. This closes all connections from all the sessions of this instance and
            reclaim all resources used by it. 
            <para>This method has no effect if the cluster has already been shutdown.</para>
            </summary>
        </member>
        <member name="T:Dse.DseClusterBuilder">
            <summary>
            Helper class to build <see cref="T:Dse.DseCluster"/> instances.
            </summary>
        </member>
        <member name="P:Dse.DseClusterBuilder.GraphOptions">
            <summary>
            Gets the DSE Graph options.
            </summary>
        </member>
        <member name="M:Dse.DseClusterBuilder.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Dse.DseClusterBuilder"/>.
            </summary>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithGraphOptions(Dse.Graph.GraphOptions)">
            <summary>
            Sets the DSE Graph options.
            </summary>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithPort(System.Int32)">
            <summary>
             The port to use to connect to all Cassandra hosts. If not set through this
             method, the default port (9042) will be used instead.
            </summary>
            <param name="port"> the port to set. </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithQueryOptions(Dse.QueryOptions)">
            <summary>
            Sets the QueryOptions to use for the newly created Cluster.
            
            If no query options are set through this method, default query
            options will be used.
            </summary>
            <param name="options">the QueryOptions to use.</param>
            <returns>this Builder.</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithCompression(Dse.CompressionType)">
            <summary>
             Sets the compression to use for the transport.
            </summary>
            <param name="compression"> the compression to set </param>
            <returns>this Builder <see>ProtocolOptions.Compression</see></returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithCustomCompressor(Dse.IFrameCompressor)">
            <summary>
            Sets a custom compressor to be used for the compression type.
            If specified, the compression type is mandatory.
            If not specified the driver default compressor will be use for the compression type.
            </summary>
            <param name="compressor">Implementation of IFrameCompressor</param>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoint(System.String)">
            <summary>
             Adds a contact point. Contact points are addresses of Cassandra nodes that
             the driver uses to discover the cluster topology. Only one contact point is
             required (the driver will retrieve the address of the other nodes
             automatically), but it is usually a good idea to provide more than one
             contact point, as if that unique contact point is not available, the driver
             won't be able to initialize itself correctly.
            </summary>
            <remarks>
             However, this can be useful if the Cassandra nodes are behind a router and 
             are not accessed directly. Note that if you are in this situation 
             (Cassandra nodes are behind a router, not directly accessible), you almost 
             surely want to provide a specific <c>IAddressTranslator</c> 
             (through <link>Builder.WithAddressTranslater</link>) to translate actual 
             Cassandra node addresses to the addresses the driver should use, otherwise 
             the driver will not be able to auto-detect new nodes (and will generally not 
             function optimally).
            </remarks>
            <param name="address">the address of the node to connect to</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoint(System.Net.IPAddress)">
            <summary>
             Add contact point. See <see cref="M:Dse.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="address"> address of the node to add as contact point</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoint(System.Net.IPEndPoint)">
            <summary>
             Add contact point. See <see cref="M:Dse.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="address"> address of the node to add as contact point</param> 
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoints(System.String[])">
            <summary>
             Add contact points. See <see cref="M:Dse.Builder.AddContactPoint(System.String)"/> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param> 
            <returns>this Builder </returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoints(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoints(System.Net.IPAddress[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoints(System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoints(System.Net.IPEndPoint[])">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.AddContactPoints(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
             Add contact points. See <link>Builder.AddContactPoint</link> for more details
             on contact points.
            </summary>
            <param name="addresses"> addresses of the nodes to add as contact point
            </param>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithLoadBalancingPolicy(Dse.ILoadBalancingPolicy)">
            <summary>
            Configures the load balancing policy to use for the new cluster.
            <para> 
            If no load balancing policy is set through this method, <see cref="T:Dse.DseLoadBalancingPolicy"/>
            will be used instead.
            </para>
            </summary>
            <param name="policy"> the load balancing policy to use </param>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithReconnectionPolicy(Dse.IReconnectionPolicy)">
            <summary>
             Configure the reconnection policy to use for the new cluster. <p> If no
             reconnection policy is set through this method,
             <link>Policies.DefaultReconnectionPolicy</link> will be used instead.</p>
            </summary>
            <param name="policy"> the reconnection policy to use </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithRetryPolicy(Dse.IRetryPolicy)">
            <summary>
            Configure the retry policy to use for the new cluster.
            <para>
            If no retry policy is set through this method, <see cref="T:Dse.IdempotenceAwareRetryPolicy"/> will be
            used instead.
            </para>
            </summary>
            <param name="policy"> the retry policy to use </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithSpeculativeExecutionPolicy(Dse.ISpeculativeExecutionPolicy)">
            <summary>
             Configure the speculative execution to use for the new cluster. 
            <para> 
            If no speculative execution policy is set through this method, <see cref="P:Dse.Policies.DefaultSpeculativeExecutionPolicy"/> will be used instead.
            </para>
            </summary>
            <param name="policy"> the speculative execution policy to use </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithConnectionString(System.String)">
            <summary>
             Configure the cluster by applying settings from ConnectionString. 
            </summary>
            <param name="connectionString"> the ConnectionString to use </param>
            
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithCredentials(System.String,System.String)">
            <summary>
             Uses the provided credentials when connecting to Cassandra hosts. <p> This
             should be used if the Cassandra cluster has been configured to use the
             <c>PasswordAuthenticator</c>. If the the default <c>*
             AllowAllAuthenticator</c> is used instead, using this method has no effect.</p>
            </summary>
            <param name="username"> the user name to use to login to Cassandra hosts.</param>
            <param name="password"> the password corresponding to </param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithAuthProvider(Dse.IAuthProvider)">
            <summary>
             Use the specified AuthProvider when connecting to Cassandra hosts. <p> Use
             this method when a custom authentication scheme is in place. You shouldn't
             call both this method and {@code withCredentials}' on the same
             <c>Builder</c> instance as one will supersede the other</p>
            </summary>
            <param name="authProvider"> the <link>AuthProvider"></link> to use to login to Cassandra hosts.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithQueryTimeout(System.Int32)">
            <summary>
            Specifies the number of milliseconds that the driver should wait for the response before the query times out in a synchronous operation.
            <para>
            This will cause that synchronous operations like <see cref="M:Dse.ISession.Execute(System.String)"/> to throw a <see cref="T:System.TimeoutException"/> 
            after the specified number of milliseconds.
            </para>
            Default timeout value is set to <code>20,000</code> (20 seconds).
            </summary>
            <remarks>
            If you want to define a read timeout at a lower level, you can use <see cref="M:Dse.SocketOptions.SetReadTimeoutMillis(System.Int32)"/>.
            </remarks>
            <param name="queryAbortTimeout">Timeout specified in milliseconds.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithDefaultKeyspace(System.String)">
            <summary>
             Sets default keyspace name for the created cluster.
            </summary>
            <param name="defaultKeyspace">Default keyspace name.</param>
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithSocketOptions(Dse.SocketOptions)">
            <summary>
            Configures the socket options that are going to be used to create the connections to the hosts.
            </summary>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithPoolingOptions(Dse.PoolingOptions)">
            <summary>
            Sets the pooling options for the cluster.
            </summary>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithSSL">
            <summary>
             Enables the use of SSL for the created Cluster. Calling this method will use default SSL options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <returns>this builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithSSL(Dse.SSLOptions)">
            <summary>
             Enables the use of SSL for the created Cluster using the provided options. 
            </summary>
            <remarks>
            If SSL is enabled, the driver will not connect to any
            Cassandra nodes that doesn't have SSL enabled and it is strongly
            advised to enable SSL on every Cassandra node if you plan on using
            SSL in the driver. Note that SSL certificate common name(CN) on Cassandra node must match Cassandra node hostname.
            </remarks>
            <param name="sslOptions">SSL options to use.</param>
            <returns>this builder</returns>        
        </member>
        <member name="M:Dse.DseClusterBuilder.WithAddressTranslator(Dse.IAddressTranslator)">
            <summary>
             Configures the address translater to use for the new cluster.
            </summary>
            <remarks>
            See <c>IAddressTranslater</c> for more detail on address translation,
            but the default tanslater, <c>DefaultAddressTranslator</c>, should be
            correct in most cases. If unsure, stick to the default.
            </remarks>
            <param name="addressTranslator">the translater to use.</param>
            <returns>this Builder</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithMaxProtocolVersion(System.Byte)">
            <summary>
            <para>Limits the maximum protocol version used to connect to the nodes, when it is not set
            protocol version used between the driver and the Cassandra cluster is negotiated upon establishing 
            the first connection.</para>
            <para>Useful for using the driver against a cluster that contains nodes with different major/minor versions 
            of Cassandra. For example, preparing for a rolling upgrade of the Cluster.</para>
            </summary>
            <param name="version">
            <para>The native protocol version.</para>
            <para>Different Cassandra versions support a range of protocol versions, for example: </para>
            <para>- Cassandra 2.0 (DSE 4.0 – 4.6): Supports protocol versions 1 and 2.</para>
            <para>- Cassandra 2.1 (DSE 4.7 – 4.8): Supports protocol versions 1, 2 and 3.</para>
            <para>- Cassandra 2.2: Supports protocol versions 1, 2, 3 and 4.</para>
            <para>- Cassandra 3.0: Supports protocol versions 3 and 4.</para>
            </param>
            <remarks>Some Cassandra features are only available with a specific protocol version.</remarks>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithNoCompact">
            <summary>
            Enables the NO_COMPACT startup option.
            <para>
            When this option is set, <c>SELECT</c>, <c>UPDATE</c>, <c>DELETE</c>, and <c>BATCH</c> statements
            on <c>COMPACT STORAGE</c> tables function in "compatibility" mode which allows seeing these tables
            as if they were "regular" CQL tables.
            </para>
            <para>
            This option only affects interactions with tables using <c>COMPACT STORAGE</c> and it is only
            supported by DSE 5.1 and 6.0+.
            </para>
            </summary>
        </member>
        <member name="M:Dse.DseClusterBuilder.WithTypeSerializers(Dse.Serialization.TypeSerializerDefinitions)">
            <summary>
            Sets the <see cref="T:Dse.Serialization.TypeSerializer`1"/> to be used, replacing the default ones.
            </summary>
            <returns>this instance</returns>
        </member>
        <member name="M:Dse.DseClusterBuilder.Build">
            <summary>
            Builds the cluster with the configured set of initial contact points and policies.
            </summary>
            <returns>
            A new <see cref="T:Dse.DseCluster"/> instance.
            </returns>
        </member>
        <member name="T:Dse.DseConfiguration">
            <summary>
            Represents the configuration of a <see cref="T:Dse.DseCluster"/>.
            </summary>
        </member>
        <member name="P:Dse.DseConfiguration.AddressTranslator">
            <summary>
            To be replaced with CassandraConfiguration.AddressTranslator after CSHARP-444.
            </summary>
        </member>
        <member name="P:Dse.DseConfiguration.CassandraConfiguration">
            <summary>
            Gets the configuration related to DSE Cassandra Daemon.
            </summary>
        </member>
        <member name="P:Dse.DseConfiguration.GraphOptions">
            <summary>
            Gets the options related to graph instance.
            </summary>
        </member>
        <member name="M:Dse.DseConfiguration.#ctor(Dse.Configuration,Dse.Graph.GraphOptions)">
            <summary>
            Creates a new instance of <see cref="T:Dse.DseConfiguration"/>.
            </summary>
        </member>
        <member name="T:Dse.Duration">
            <summary>
            Represents a duration. A duration stores separately months, days, and seconds due to the fact that the
            number of days in a month varies, and a day can have 23 or 25 hours if a daylight saving is involved.
            </summary>
            <remarks>Duration instances are immutable and thread-safe.</remarks>
        </member>
        <member name="P:Dse.Duration.Months">
            <summary>
            Gets the number of months.
            </summary>
        </member>
        <member name="P:Dse.Duration.Days">
            <summary>
            Gets the number of days.
            </summary>
        </member>
        <member name="P:Dse.Duration.Nanoseconds">
            <summary>
            Gets the number of nanoseconds.
            </summary>
        </member>
        <member name="M:Dse.Duration.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Duration"/>.
            </summary>
            <param name="months">The number of months.</param>
            <param name="days">The number of days.</param>
            <param name="nanoseconds">The number of nanoseconds.</param>
        </member>
        <member name="M:Dse.Duration.Equals(Dse.Duration)">
            <summary>
            Returns true if the value of the <see cref="T:Dse.Duration"/> is the same.
            </summary>
        </member>
        <member name="M:Dse.Duration.Equals(System.Object)">
            <summary>
            Returns true if the value of the <see cref="T:Dse.Duration"/> is the same.
            </summary>
        </member>
        <member name="M:Dse.Duration.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dse.Duration.CompareTo(Dse.Duration)">
            <summary>
            Compares this instance against another <see cref="T:Dse.Duration"/> instance based on the bytes representation
            of the values.
            </summary>
        </member>
        <member name="M:Dse.Duration.FromTimeSpan(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Dse.Duration"/> instance based on the <see cref="T:System.TimeSpan"/> provided.
            <para>Consider that 24 hour days (no leap seconds) are used to calculate the days portion.</para>
            </summary>
        </member>
        <member name="M:Dse.Duration.ToTimeSpan">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> instance that represents the same interval than this instance.
            <para>
            You should take into consideration that <see cref="T:System.TimeSpan"/> is internally represented in ticks,
            so for the conversion, 24h days will be used (leap seconds are not considered).
            For <see cref="T:Dse.Duration"/> values with month portion, it will throw an 
            <see cref="T:System.InvalidOperationException"/>.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">values including month portion.</exception>
        </member>
        <member name="M:Dse.Duration.ToString">
            <summary>
            Returns the string representation of the value.
            </summary>
        </member>
        <member name="M:Dse.Duration.ToIsoString">
            <summary>
            A string representation of this duration using ISO-8601 based representation, such as PT8H6M12.345S.
            </summary>
        </member>
        <member name="M:Dse.Duration.ToJavaDurationString">
            <summary>
            A string representation of this duration using ISO-8601 based representation, with the HOUR portion
            as higher component.
            </summary>
            <remarks>24H days are considered for the conversion (no leap seconds).</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">When the value is out of the range of a Java Duration.</exception>
        </member>
        <member name="M:Dse.Duration.op_Equality(Dse.Duration,Dse.Duration)">
            <summary>
            Compares value equality of 2 DateRange instances.
            </summary>
        </member>
        <member name="M:Dse.Duration.op_Inequality(Dse.Duration,Dse.Duration)">
            <summary>
            Compares value inequality of 2 DateRange instances.
            </summary>
        </member>
        <member name="M:Dse.Duration.Parse(System.String)">
            <summary>
            Creates a new <see cref="T:Dse.Duration"/> instance from the string representation of the value.
            <para>Accepted formats:</para>
            <ul>
              <li>multiple digits followed by a time unit like: 12h30m where the time unit can be:
                <ul>
                  <li><c>y</c>: years</li>
                  <li><c>m</c>: months</li>
                  <li><c>w</c>: weeks</li>
                  <li><c>d</c>: days</li>
                  <li><c>h</c>: hours</li>
                  <li><c>m</c>: minutes</li>
                  <li><c>s</c>: seconds</li>
                  <li><c>ms</c>: milliseconds</li>
                  <li><c>us</c> or <c>µs</c>: microseconds</li>
                  <li><c>ns</c>: nanoseconds</li>
                </ul>
              </li>
              <li>ISO 8601 format:  <code>P[n]Y[n]M[n]DT[n]H[n]M[n]S or P[n]W</code></li>
              <li>ISO 8601 alternative format: <code>P[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss]</code></li>
            </ul> 
            </summary>
        </member>
        <member name="T:Dse.EC2MultiRegionTranslator">
            <summary>
            An <see cref="T:Dse.IAddressTranslator"/> implementation for multi-region EC2 deployments where clients are also
            deployed in EC2 in order to optimizes network costs, as Amazon charges more for communication over public IPs.
            <para>
            Its distinctive feature is that it translates addresses according to the location of the server host:
            </para>
            <list type="bullet">
            <item><description>Addresses in different EC2 regions (than the client) are unchanged</description></item>
            <item><description>Addresses in the same EC2 region are translated to private IPs</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Dse.EC2MultiRegionTranslator.Translate(System.Net.IPEndPoint)">
            <summary>
            Addresses in the same EC2 region are translated to private IPs and addresses in different EC2 regions
            (than the client) are unchanged.
            </summary>
        </member>
        <member name="T:Dse.EndianBitConverter">
            <summary>
            Equivalent of <see cref="T:System.BitConverter"/> but let's you choose the endianness.
            </summary>
        </member>
        <member name="M:Dse.EndianBitConverter.SetBytes(System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an int into an array of bytes and sets to the buffer starting at the specified offset.
            </summary>
        </member>
        <member name="M:Dse.EndianBitConverter.SetBytes(System.Boolean,System.Byte[],System.Int32,System.Double)">
            <summary>
            Converts an 64-bit double into an array of bytes and sets to the buffer starting at the specified offset.
            </summary>
        </member>
        <member name="M:Dse.EndianBitConverter.SetBytes(System.Boolean,System.Byte[],System.Int32,System.Int64)">
            <summary>
            Converts an int into an array of bytes and sets to the buffer starting at the specified offset.
            </summary>
        </member>
        <member name="M:Dse.EndianBitConverter.ToInt32(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Returns a signed 32-bit integer from four bytes at specified offset from the buffer.
            </summary>
        </member>
        <member name="M:Dse.EndianBitConverter.ToInt64(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Returns a signed 64-bit integer from eight bytes at specified offset from the buffer.
            </summary>
        </member>
        <member name="M:Dse.EndianBitConverter.ToDouble(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Returns a signed 64-bit double from eight bytes at specified offset from the buffer.
            </summary>
        </member>
        <member name="T:Dse.AlreadyExistsException">
            <summary>
             Exception thrown when a query attemps to create a keyspace or table that
             already exists.
            </summary>
        </member>
        <member name="P:Dse.AlreadyExistsException.Keyspace">
            <summary>
             Gets the name of keyspace that either already exists or is home to the table that
             already exists.
            </summary>
        </member>
        <member name="P:Dse.AlreadyExistsException.Table">
            <summary>
             If the failed creation was a table creation, gets the name of the table that already exists. 
            </summary>
        </member>
        <member name="P:Dse.AlreadyExistsException.WasTableCreation">
            <summary>
             Gets whether the query yielding this exception was a table creation
             attempt.
            </summary>
        </member>
        <member name="T:Dse.AuthenticationException">
            <summary>
             Indicates an error during the authentication phase while connecting to a node.
            </summary>
        </member>
        <member name="P:Dse.AuthenticationException.Host">
            <summary>
             Gets the host for which the authentication failed. 
            </summary>
        </member>
        <member name="T:Dse.BusyPoolException">
            <summary>
            Represents a client-side error indicating that all connections to a certain host have reached
            the maximum amount of in-flight requests supported.
            </summary>
        </member>
        <member name="P:Dse.BusyPoolException.Address">
            <summary>
            Gets the host address.
            </summary>
        </member>
        <member name="P:Dse.BusyPoolException.MaxRequestsPerConnection">
            <summary>
            Gets the maximum amount of requests per connection.
            </summary>
        </member>
        <member name="P:Dse.BusyPoolException.ConnectionLength">
            <summary>
            Gets the size of the pool.
            </summary>
        </member>
        <member name="M:Dse.BusyPoolException.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Dse.BusyPoolException"/>.
            </summary>
        </member>
        <member name="T:Dse.DriverException">
            <summary>
            Top level class for exceptions thrown by the driver.
            </summary>
        </member>
        <member name="T:Dse.DriverInternalError">
            <summary>
             An unexpected error happened internally. This should never be raise and
             indicates an unexpected behavior (either in the driver or in Cassandra).
            </summary>
        </member>
        <member name="T:Dse.FunctionFailureException">
            <summary>
            Specifies a User defined function execution failure.
            </summary>
        </member>
        <member name="P:Dse.FunctionFailureException.Keyspace">
            <summary>
            Keyspace where the function is defined
            </summary>
        </member>
        <member name="P:Dse.FunctionFailureException.Name">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:Dse.FunctionFailureException.ArgumentTypes">
            <summary>
            Name types of the arguments
            </summary>
        </member>
        <member name="T:Dse.InvalidConfigurationInQueryException">
            <summary>
             A specific invalid query exception that indicates that the query is invalid
             because of some configuration problem. <p> This is generally throw by query
             that manipulate the schema (CREATE and ALTER) when the required configuration
             options are invalid.</p>
            </summary>
        </member>
        <member name="T:Dse.InvalidQueryException">
            <summary>
             Indicates a syntactically correct but invalid query.
            </summary>
        </member>
        <member name="T:Dse.InvalidTypeException">
            <summary>
            Exception that is thrown when the driver expected a type and other was provided
            </summary>
        </member>
        <member name="T:Dse.NoHostAvailableException">
            <summary>
             Exception thrown when a query cannot be performed because no host are
             available. This exception is thrown if <ul> <li>either there is no host live
             in the cluster at the moment of the query</li> <li>all host that have been
             tried have failed due to a connection problem</li> </ul> For debugging
             purpose, the list of hosts that have been tried along with the failure cause
             can be retrieved using the <link>#errors</link> method.
            </summary>
        </member>
        <member name="P:Dse.NoHostAvailableException.Errors">
            <summary>
             Gets the hosts tried along with descriptions of the error encountered while trying them. 
            </summary>
        </member>
        <member name="M:Dse.NoHostAvailableException.#ctor(System.String)">
            <summary>
            Creates a new instance of NoHostAvailableException with a custom message and an empty error dictionary. 
            </summary>
        </member>
        <member name="T:Dse.OperationTimedOutException">
            <summary>
            Exception that thrown on a client-side timeout, when the client didn't hear back from the server within <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/>.
            </summary>
        </member>
        <member name="T:Dse.QueryExecutionException">
            <summary>
             Exception related to the execution of a query. This correspond to the
             exception that Cassandra throw when a (valid) query cannot be executed
             (TimeoutException, UnavailableException, ...).
            </summary>
        </member>
        <member name="T:Dse.QueryTimeoutException">
            <summary>
             A server timeout during a query. Such an exception is returned when the
             query has been tried by a server coordinator but cannot be achieved with the requested
             consistency level within the rpc timeout set at server level.
            </summary>
        </member>
        <member name="P:Dse.QueryTimeoutException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation that time outed. 
            </summary>
        </member>
        <member name="P:Dse.QueryTimeoutException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation before it time outed. 
            </summary>
        </member>
        <member name="P:Dse.QueryTimeoutException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="T:Dse.QueryValidationException">
            <summary>
             An exception indicating that a query cannot be executed because it is
             incorrect syntactically, invalid, unauthorized or any other reason.
            </summary>
        </member>
        <member name="T:Dse.ReadFailureException">
            <summary>
             A Server failure (non-timeout) during a read query.
            </summary>
        </member>
        <member name="P:Dse.ReadFailureException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation
            </summary>
        </member>
        <member name="P:Dse.ReadFailureException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation
            </summary>
        </member>
        <member name="P:Dse.ReadFailureException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="P:Dse.ReadFailureException.Failures">
            <summary>
            Gets the number of nodes that experienced a failure while executing the request.
            </summary>
        </member>
        <member name="P:Dse.ReadFailureException.Reasons">
            <summary>
            Gets a failure reason code for each node that failed.
            <para>
            On older protocol versions, an empty map and only the number of <see cref="P:Dse.ReadFailureException.Failures"/> is provided.
            </para>
            <list>
            <item><term>0x0000</term><description>Unknown reason</description></item>
            <item><term>0x0001</term><description>Too many tombstones read (as controlled by the yaml
            tombstone_failure_threshold option)</description></item>
            <item><term>0x0002</term><description>The query uses an index but that index is not available
            (built) on the queried endpoint.</description></item>
            <item><term>0x0003</term><description>The query writes on some CDC enabled tables, but the CDC space is
            full (CDC data isn't consumed fast enough). Note that this can only happen in Write_failure in practice,
            but the reasons are shared between both exception.</description></item>
            <item><term>0x0004</term><description>Some failures (one or more) were reported to the replica "leading"
            a counter write. The actual error didn't occur on the node that sent this failure, it is is simply the
            node reporting it due to how counter writes work; the initial reason for the failure should have been
            logged on the actual replica on which the problem occured).</description></item>
            <item><term>0x0005</term><description>The table used by the query was not found on at least one of the
            replica. This strongly suggest a query was done on either a newly created or newly dropped table with
            having waited for schema agreement first.</description></item>
            <item><term>0x0006</term><description>The keyspace used by the query was not found on at least one
            replica. Same likely cause as for tables above.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Dse.ReadFailureException.#ctor(Dse.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Collections.Generic.IDictionary{System.Net.IPAddress,System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:Dse.ReadFailureException"/> providing the failure reasons dictionary.
            </summary>
        </member>
        <member name="T:Dse.ReadTimeoutException">
            <summary>
             A server timeout during a read query.
            </summary>
        </member>
        <member name="T:Dse.RequestInvalidException">
            <summary>
            Exception that indicates that the request is not valid.
            </summary>
        </member>
        <member name="T:Dse.SyntaxError">
            <summary>
             Indicates a syntax error in a query.
            </summary>
        </member>
        <member name="T:Dse.TraceRetrievalException">
            <summary>
             Exception thrown if a query trace cannot be retrieved.
            </summary>
        </member>
        <member name="T:Dse.TruncateException">
            <summary>
             Error during a truncation operation.
            </summary>
        </member>
        <member name="T:Dse.UnauthorizedException">
            <summary>
             Indicates that a query cannot be performed due to the authorisation restrictions of the logged user.
            </summary>
        </member>
        <member name="T:Dse.UnavailableException">
            <summary>
             Exception thrown when the coordinator knows there is not enough replica alive
             to perform a query with the requested consistency level.
            </summary>
        </member>
        <member name="P:Dse.UnavailableException.Consistency">
            <summary>
             Gets the consistency level of the operation triggering this unavailable exception. 
            </summary>
        </member>
        <member name="P:Dse.UnavailableException.RequiredReplicas">
            <summary>
            Gets the number of replica acknowledgements/responses required to perform the operation (with its required consistency level). 
            </summary>
        </member>
        <member name="P:Dse.UnavailableException.AliveReplicas">
            <summary>
             Gets the number of replica that were known to be alive by the Cassandra coordinator node when it tried to execute the operation. 
            </summary>
        </member>
        <member name="P:Dse.UnsupportedProtocolVersionException.ProtocolVersion">
            <summary>
            The version that was not supported by the server.
            </summary>
        </member>
        <member name="T:Dse.WriteFailureException">
            <summary>
            Represents a server-side failure (non-timeout) during a write query.
            </summary>
        </member>
        <member name="P:Dse.WriteFailureException.WriteType">
            <summary>
            Gets the type of write operation that timed out.
            <para>Possible values: SIMPLE, BATCH, BATCH_LOG, UNLOGGED_BATCH and COUNTER.</para>
            </summary>
        </member>
        <member name="P:Dse.WriteFailureException.ConsistencyLevel">
            <summary>
             Gets the consistency level of the operation
            </summary>
        </member>
        <member name="P:Dse.WriteFailureException.ReceivedAcknowledgements">
            <summary>
            Gets the number of replica that had acknowledged/responded to the operation
            </summary>
        </member>
        <member name="P:Dse.WriteFailureException.RequiredAcknowledgements">
            <summary>
             Gets the minimum number of replica acknowledgements/responses that were required to fulfill the operation. 
            </summary>
        </member>
        <member name="P:Dse.WriteFailureException.Failures">
            <summary>
            Gets the number of nodes that experienced a failure while executing the request.
            </summary>
        </member>
        <member name="P:Dse.WriteFailureException.Reasons">
            <summary>
            Gets a failure reason code for each node that failed.
            <para>
            On older protocol versions, an empty map and only the number of <see cref="P:Dse.WriteFailureException.Failures"/> is provided.
            </para>
            <list>
            <item><term>0x0000</term><description>Unknown reason</description></item>
            <item><term>0x0001</term><description>Too many tombstones read (as controlled by the yaml
            tombstone_failure_threshold option)</description></item>
            <item><term>0x0002</term><description>The query uses an index but that index is not available
            (built) on the queried endpoint.</description></item>
            <item><term>0x0003</term><description>The query writes on some CDC enabled tables, but the CDC space is
            full (CDC data isn't consumed fast enough). Note that this can only happen in Write_failure in practice,
            but the reasons are shared between both exception.</description></item>
            <item><term>0x0004</term><description>Some failures (one or more) were reported to the replica "leading"
            a counter write. The actual error didn't occur on the node that sent this failure, it is is simply the
            node reporting it due to how counter writes work; the initial reason for the failure should have been
            logged on the actual replica on which the problem occured).</description></item>
            <item><term>0x0005</term><description>The table used by the query was not found on at least one of the
            replica. This strongly suggest a query was done on either a newly created or newly dropped table with
            having waited for schema agreement first.</description></item>
            <item><term>0x0006</term><description>The keyspace used by the query was not found on at least one
            replica. Same likely cause as for tables above.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Dse.WriteFailureException.#ctor(Dse.ConsistencyLevel,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Dse.WriteFailureException"/>.
            </summary>
        </member>
        <member name="M:Dse.WriteFailureException.#ctor(Dse.ConsistencyLevel,System.Int32,System.Int32,System.String,System.Collections.Generic.IDictionary{System.Net.IPAddress,System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:Dse.WriteFailureException"/> providing the failure reasons dictionary.
            </summary>
        </member>
        <member name="T:Dse.WriteTimeoutException">
            <summary>
            Represents a server timeout during a write operation.
            </summary>
        </member>
        <member name="P:Dse.WriteTimeoutException.WriteType">
            <summary>
            Gets the type of write operation that timed out.
            <para>Possible values: SIMPLE, BATCH, BATCH_LOG, UNLOGGED_BATCH and COUNTER.</para>
            </summary>
        </member>
        <member name="M:Dse.WriteTimeoutException.#ctor(Dse.ConsistencyLevel,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.WriteTimeoutException"/>
            </summary>
        </member>
        <member name="T:Dse.Extensions">
            <summary>
            Provides C# extension methods for interfaces and classes within the root namespace.
            <remarks>
            Used to introduce new methods on interfaces without making it a breaking change for the users.
            </remarks>
            </summary>
        </member>
        <member name="M:Dse.Extensions.GetState(Dse.ISession)">
            <summary>
            Gets a snapshot containing information on the connections pools held by this Client at the current time.
            <para>
            The information provided in the returned object only represents the state at the moment this method was
            called and it's not maintained in sync with the driver metadata.
            </para>
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:Dse.Frame.Header">
            <summary>
            The 8 byte protocol header
            </summary>
        </member>
        <member name="P:Dse.Frame.Body">
            <summary>
            A stream containing the frame body
            </summary>
        </member>
        <member name="P:Dse.Frame.Serializer">
            <summary>
            Gets the serializer instance to be used for this frame
            </summary>
        </member>
        <member name="F:Dse.FrameHeader.HeaderFlag.Compression">
            <summary>
            If set, the frame body is compressed.
            </summary>
        </member>
        <member name="F:Dse.FrameHeader.HeaderFlag.Tracing">
            <summary>
            For a request frame, this indicate the client requires tracing of the request.
            If a response frame has the tracing flag set, its body contains a tracing ID.
            </summary>
        </member>
        <member name="F:Dse.FrameHeader.HeaderFlag.CustomPayload">
            <summary>
            For a request or response frame, this indicates that generic key-value 
            custom payload for a custom QueryHandler implementation is present in the frame.
            </summary>
        </member>
        <member name="F:Dse.FrameHeader.HeaderFlag.Warning">
            <summary>
            The response contains warnings from the server which 
            were generated by the server to go along with this response.
            </summary>
        </member>
        <member name="F:Dse.FrameHeader._versionByte">
            <summary>
            Protocol version byte (in case of responses 0x81, 0x82, ... in case of requests 0x01, 0x02)
            </summary>
        </member>
        <member name="P:Dse.FrameHeader.BodyLength">
            <summary>
            Returns the length of the frame body 
            </summary>
        </member>
        <member name="P:Dse.FrameHeader.Flags">
            <summary>
            Flags applying to this frame..
            </summary>
        </member>
        <member name="P:Dse.FrameHeader.Version">
            <summary>
            Protocol version of the protocol (1, 2, 3)
            </summary>
        </member>
        <member name="M:Dse.FrameHeader.IsValidResponse">
            <summary>
            Determines if the response is valid by checking the version byte
            </summary>
        </member>
        <member name="M:Dse.FrameHeader.GetSize(Dse.ProtocolVersion)">
            <summary>
            Gets the size of the protocol header, depending on the version of the protocol
            </summary>
            <param name="version">Version of the protocol used</param>
        </member>
        <member name="M:Dse.FrameHeader.ParseResponseHeader(Dse.ProtocolVersion,System.Byte[],System.Int32)">
            <summary>
            Parses the first 8 or 9 bytes and returns a FrameHeader
            </summary>
        </member>
        <member name="M:Dse.FrameHeader.ParseResponseHeader(Dse.ProtocolVersion,System.Byte[],System.Byte[])">
            <summary>
            Parses the first 8 or 9 bytes from multiple buffers and returns a FrameHeader
            </summary>
        </member>
        <member name="M:Dse.FrameHeader.GetProtocolVersion(System.Byte[])">
            <summary>
            Gets the protocol version based on the first byte of the header
            </summary>
        </member>
        <member name="T:Dse.FrameParser">
            <summary>
            Parses the frame into a response
            </summary>
        </member>
        <member name="F:Dse.FrameParser._responseHandlerFactory">
            <summary>
            A factory to get the response handlers 
            </summary>
        </member>
        <member name="M:Dse.FrameParser.Parse(Dse.Frame)">
            <summary>
            Parses the response frame
            </summary>
        </member>
        <member name="T:Dse.FrameReader">
            <summary>
            Represents a protocol-aware forward reader 
            </summary>
        </member>
        <member name="F:Dse.FrameReader._buffer">
            <summary>
            Reusable buffer for reading 2-4 byte types
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadUInt16">
            <summary>
            Parses a ushort from the following 2 bytes
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadInt16">
            <summary>
            Parses a ushort from the following 2 bytes
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadStringList">
            <summary>
            Reads a protocol string list
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadInet">
            <summary>
            Reads protocol inet: Ip (4 or 16 bytes) followed by a port (int)
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadBytesMap">
            <summary>
            Reads a protocol bytes map
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadBytes">
            <summary>
            Reads the protocol bytes, retrieving the int length and reading the subsequent amount of bytes 
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadShortBytes">
            <summary>
            Reads protocol [short bytes].
            </summary>
        </member>
        <member name="M:Dse.FrameReader.ReadFromBytes(System.Byte[],System.Int32,System.Int32,Dse.ColumnTypeCode,Dse.IColumnInfo)">
            <summary>
            Reads from the internal stream, starting from offset, the amount of bytes defined by count and deserializes
            the bytes.
            </summary>
        </member>
        <member name="T:Dse.FrameWriter">
            <summary>
            It represents a big endian protocol-aware writer
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.GetBuffer">
            <summary>
            For testing purposes
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes BE uint 16
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteInt32(System.Int32)">
            <summary>
            Writes BE int
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteLong(System.Int64)">
            <summary>
            Writes Big Endian long
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteString(System.String)">
            <summary>
            Writes protocol <c>string</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteLongString(System.String)">
            <summary>
            Writes protocol <c>long string</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteStringList(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Writes protocol <c>string list</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes protocol <c>bytes</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteAsBytes(System.Object)">
            <summary>
            Serializes and writes as protocol <c>bytes</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteShortBytes(System.Byte[])">
            <summary>
            Writes protocol <c>short bytes</c> (length + bytes)
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteBytesMap(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Writes a protocol bytes maps
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.WriteFrameHeader(System.Byte,System.Int16,System.Byte)">
            <summary>
            Writes the frame header, leaving body length to 0
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.Write(System.Byte[])">
            <summary>
            Writes the complete buffer to the underlying stream
            </summary>
        </member>
        <member name="M:Dse.FrameWriter.Close">
            <summary>
            Writes the body length in the frame and returns the frame length
            </summary>
        </member>
        <member name="T:Dse.FunctionMetadata">
            <summary>
            Describes a CQL function.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.Name">
            <summary>
            Name of the CQL function.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.KeyspaceName">
            <summary>
            Name of the keyspace where the CQL function is declared.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.Signature">
            <summary>
            Signature of the function.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.ArgumentNames">
            <summary>
            List of the function argument names.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.ArgumentTypes">
            <summary>
            List of the function argument types.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.Body">
            <summary>
            Body of the function.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.CalledOnNullInput">
            <summary>
            Determines if the function is called when the input is null.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.Language">
            <summary>
            Name of the programming language, for example: java, javascript, ...
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.ReturnType">
            <summary>
            Type of the return value.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.Deterministic">
            <summary>
            Indicates whether or not this function is deterministic. This means that given a particular input,
            the function will always produce the same output.
            </summary>
        </member>
        <member name="P:Dse.FunctionMetadata.Monotonic">
            <summary>
            Indicates whether or not this function is monotonic on all of its arguments. This means that it is
            either entirely non-increasing or non-decreasing. Even if the function is not monotonic on
            all of its arguments, it's possible to specify that it is monotonic on one of its arguments, meaning
            that partial applications of the function over that argument will be monotonic.
            </summary>
            <remarks>Monotonicity is required to use the function in a GROUP BY clause.</remarks>
        </member>
        <member name="P:Dse.FunctionMetadata.MonotonicOn">
            <summary>
            The argument names that the function is monotonic on.
            <para>
            If <see cref="P:Dse.FunctionMetadata.Monotonic"/> is true, this will return all argument names.
            Otherwise, this will return either one argument or an empty collection.
            </para>
            </summary>
        </member>
        <member name="M:Dse.FunctionMetadata.#ctor">
            <summary>
            Creates a new instance of Function metadata.
            </summary>
        </member>
        <member name="M:Dse.FunctionMetadata.#ctor(System.String,System.String,System.String[],System.String[],Dse.ColumnDesc[],System.String,System.Boolean,System.String,Dse.ColumnDesc)">
            <summary>
            Creates a new instance of Function metadata.
            </summary>
        </member>
        <member name="T:Dse.Geometry.GeometryBase">
            <summary>
            The driver-side representation for a DSE geospatial type.
            </summary>
        </member>
        <member name="P:Dse.Geometry.GeometryBase.GeoJsonType">
            <summary>
            Gets the type name to be used for GeoJSON serialization.
            </summary>
        </member>
        <member name="P:Dse.Geometry.GeometryBase.GeoCoordinates">
            <summary>
            Gets the coordinates property for GeoJSON serialization.
            </summary>
        </member>
        <member name="M:Dse.Geometry.GeometryBase.AsReadOnlyCollection``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
            Checks for null items and returns a read-only collection with an array as underlying list.
            </summary>
        </member>
        <member name="M:Dse.Geometry.GeometryBase.CombineHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines the hash code based on the value of items.
            </summary>
        </member>
        <member name="M:Dse.Geometry.GeometryBase.ToGeoJson">
            <summary>
            Returns the GeoJSON representation of the instance.
            </summary>
        </member>
        <member name="M:Dse.Geometry.GeometryBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Dse.Geometry.LineString">
            <summary>
            Represents a one-dimensional object representing a sequence of points and the line segments connecting them.
            </summary>
        </member>
        <member name="P:Dse.Geometry.LineString.Points">
            <summary>
            Gets the read-only list of points describing the LineString.
            </summary>
        </member>
        <member name="P:Dse.Geometry.LineString.GeoCoordinates">
            <inheritdoc />
        </member>
        <member name="M:Dse.Geometry.LineString.#ctor(Dse.Geometry.Point[])">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.LineString"/> using a sequence of points.
            </summary>
        </member>
        <member name="M:Dse.Geometry.LineString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.LineString"/> using a serialization information.
            </summary>
        </member>
        <member name="M:Dse.Geometry.LineString.#ctor(System.Collections.Generic.IList{Dse.Geometry.Point})">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.LineString"/> using a list of points.
            </summary>
        </member>
        <member name="M:Dse.Geometry.LineString.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified object represent the same value.
            </summary>
        </member>
        <member name="M:Dse.Geometry.LineString.GetHashCode">
            <summary>
            Returns the hash code based on the value of this instance.
            </summary>
        </member>
        <member name="M:Dse.Geometry.LineString.ToString">
            <summary>
            Returns Well-known text (WKT) representation of the geometry object.
            </summary>
        </member>
        <member name="M:Dse.Geometry.LineString.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Dse.Geometry.LineString"/> instance from a 
            <see href="https://en.wikipedia.org/wiki/Well-known_text">Well-known Text(WKT)</see>
            representation of a line.
            </summary>
        </member>
        <member name="T:Dse.Geometry.Point">
            <summary>
            Represents a zero-dimensional object that represents a specific (X,Y) location in a two-dimensional XY-Plane.
            In case of Geographic Coordinate Systems, the X coordinate is the longitude and the Y is the latitude.
            </summary>
        </member>
        <member name="P:Dse.Geometry.Point.X">
            <summary>
            Returns the X coordinate of this 2D point.
            </summary>
        </member>
        <member name="P:Dse.Geometry.Point.Y">
            <summary>
            Returns the Y coordinate of this 2D point.
            </summary>
        </member>
        <member name="P:Dse.Geometry.Point.GeoCoordinates">
            <inheritdoc />
        </member>
        <member name="M:Dse.Geometry.Point.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Point"/>.
            </summary>
            <param name="x">The <c>X</c> coordinate.</param>
            <param name="y">The <c>Y</c> coordinate.</param>
        </member>
        <member name="M:Dse.Geometry.Point.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Point"/>.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Point.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified object represent the same value.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Point.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dse.Geometry.Point.ToString">
            <summary>
            Returns Well-known text (WKT) representation of the geometry object.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Point.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Dse.Geometry.Point"/> instance from a 
            <see href="https://en.wikipedia.org/wiki/Well-known_text">Well-known Text(WKT)</see>
            representation of a 2D point.
            </summary>
        </member>
        <member name="T:Dse.Geometry.Polygon">
            <summary>
            Represents is a plane geometry figure that is bounded by a finite chain of straight line segments closing in a
            loop to form a closed chain or circuit.
            </summary>
        </member>
        <member name="P:Dse.Geometry.Polygon.Rings">
            <summary>
            A read-only list describing the rings of the polygon.
            </summary>
        </member>
        <member name="P:Dse.Geometry.Polygon.GeoCoordinates">
            <inheritdoc />
        </member>
        <member name="M:Dse.Geometry.Polygon.#ctor(Dse.Geometry.Point[])">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Polygon"/> with a single ring.
            </summary>
            <param name="points">The points of the single ring</param>
        </member>
        <member name="M:Dse.Geometry.Polygon.#ctor(System.Collections.Generic.IList{Dse.Geometry.Point}[])">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Polygon"/> with a sequence of rings.
            </summary>
            <param name="points">The points of the single ring</param>
        </member>
        <member name="M:Dse.Geometry.Polygon.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Polygon"/> with no rings (empty).
            </summary>
        </member>
        <member name="M:Dse.Geometry.Polygon.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IList{Dse.Geometry.Point}})">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Polygon"/> using multiple rings.
            </summary>
            <param name="rings">The polygon rings</param>
        </member>
        <member name="M:Dse.Geometry.Polygon.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Geometry.Polygon"/> using serialization information.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Polygon.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified object represent the same value.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Polygon.GetHashCode">
            <summary>
            Returns the hash code based on the value of this instance.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Polygon.ToString">
            <summary>
            Returns Well-known text (WKT) representation of the geometry object.
            </summary>
        </member>
        <member name="M:Dse.Geometry.Polygon.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Dse.Geometry.Polygon"/> instance from a 
            <see href="https://en.wikipedia.org/wiki/Well-known_text">Well-known Text(WKT)</see>
            representation of a polygon.
            </summary>
        </member>
        <member name="T:Dse.Graph.Edge">
            <summary>
            Represents an edge in DSE graph.
            </summary>
        </member>
        <member name="P:Dse.Graph.Edge.InV">
            <summary>
            Gets the incoming/head vertex.
            </summary>
        </member>
        <member name="P:Dse.Graph.Edge.InVLabel">
            <summary>
            Gets the label of the incoming/head vertex.
            </summary>
        </member>
        <member name="P:Dse.Graph.Edge.OutV">
            <summary>
            Gets the outgoing/tail vertex.
            </summary>
        </member>
        <member name="P:Dse.Graph.Edge.OutVLabel">
            <summary>
            Gets the label of the outgoing/tail vertex.
            </summary>
        </member>
        <member name="M:Dse.Graph.Edge.#ctor(Dse.Graph.GraphNode,System.String,System.Collections.Generic.IDictionary{System.String,Dse.Graph.GraphNode},Dse.Graph.GraphNode,System.String,Dse.Graph.GraphNode,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.Edge"/>.
            </summary>
        </member>
        <member name="T:Dse.Graph.Element">
            <summary>
            Base class for vertices and edges
            </summary>
        </member>
        <member name="M:Dse.Graph.Element.#ctor(Dse.Graph.GraphNode,System.String,System.Collections.Generic.IDictionary{System.String,Dse.Graph.GraphNode})">
            <summary>
            Creates a new instance of a Graph <see cref="T:Dse.Graph.Element"/>.
            </summary>
        </member>
        <member name="P:Dse.Graph.Element.Id">
            <summary>
            Gets the identifier
            </summary>
        </member>
        <member name="P:Dse.Graph.Element.Dse#Graph#IElement#Id">
            <summary>
            Gets the identifier
            </summary>
        </member>
        <member name="P:Dse.Graph.Element.Label">
            <summary>
            Gets the label of the element
            </summary>
        </member>
        <member name="P:Dse.Graph.Element.Properties">
            <summary>
            Gets the properties
            </summary>
        </member>
        <member name="M:Dse.Graph.Element.GetProperty(System.String)">
            <summary>
            Gets a property by name.
            </summary>
        </member>
        <member name="M:Dse.Graph.Element.GetProperties">
            <summary>
            Gets all properties of an element.
            </summary>
        </member>
        <member name="T:Dse.Graph.GraphNode">
            <summary>
            Represents an item of a graph query result, it can be a vertex, an edge, a path or an scalar value.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphNode.IsArray">
            <summary>
            Returns true if the underlying value is an array.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphNode.IsObjectTree">
            <summary>
            Returns true if the underlying value is an object tree.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphNode.IsScalar">
            <summary>
            Returns true if the underlying value is a scalar value (string, double, boolean, ...).
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphNode.Bulk">
            <summary>
            Gets the number of identical results represented by this instance.
            Defaults to 1.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.GraphNode"/>.
            </summary>
            <param name="json">The graph string json with the form: "{\"result\": ...}".</param>
        </member>
        <member name="M:Dse.Graph.GraphNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.GraphNode"/> using a serialization information.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.Get``1(System.String)">
            <summary>
            Gets the typed value of a property of the result.
            </summary>
            <typeparam name="T">Type of the property. Use dynamic for object trees.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.GetRaw">
            <summary>
            Gets the raw data represented by this instance.
            <para>
            Raw internal representation might be different depending on the graph serialization format and
            it is subject to change without any prior notice.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.HasProperty(System.String)">
            <summary>
            Returns true if the property is defined in this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the underlying value is not an object tree</exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.Equals(Dse.Graph.GraphNode)">
            <summary>
            Returns true if the value represented by this instance is the same.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.Equals(System.Object)">
            <summary>
            Returns true if the value represented by this instance is the same.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.GetHashCode">
            <summary>
            Gets the hash code for this instance, based on its value.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphNode.GetProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.To``1">
            <summary>
            Returns the representation of the <see cref="T:Dse.Graph.GraphNode"/> as an instance of type T.
            </summary>
            <typeparam name="T">The type to which the current instance is going to be converted to.</typeparam>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.To(System.Type)">
            <summary>
            Returns the representation of the <see cref="T:Dse.Graph.GraphNode"/> as an instance of the type provided.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToArray">
            <summary>
            Converts the instance into an array when the internal representation is a json array.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToIArray">
            <summary>
            Converts the instance into an array when the internal representation is a json array.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToBoolean">
            <summary>
            Returns the representation of the result as a boolean.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It throws an InvalidOperationException when the internal value is not an scalar.
            </exception>
            <exception cref="T:System.InvalidCastException">When the scalar value is not convertible to target type.</exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToDouble">
            <summary>
            Returns the representation of the result as a double.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It throws an InvalidOperationException when the internal value is not an scalar.
            </exception>
            <exception cref="T:System.InvalidCastException">When the scalar value is not convertible to target type.</exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToEdge">
            <summary>
            Returns an edge representation of the current instance.
            <para>
            This method is maintained for backward compatibity. It's recommended that you use
            <see cref="M:Dse.Graph.GraphNode.To``1"/> instead, providing <see cref="T:Dse.Graph.IEdge"/> as type parameter
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToInt32">
            <summary>
            Returns the representation of the result as an int.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It throws an InvalidOperationException when the internal value is not an scalar.
            </exception>
            <exception cref="T:System.InvalidCastException">When the scalar value is not convertible to target type.</exception>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToPath">
            <summary>
            Returns a <see cref="T:Dse.Graph.Path"/> representation of the current instance.
            <para>
            This method is maintained for backward compatibity. It's recommended that you use
            <see cref="M:Dse.Graph.GraphNode.To``1"/> instead, providing <see cref="T:Dse.Graph.IPath"/> as type parameter.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToString">
            <summary>
            Returns the json representation of the result.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.ToVertex">
            <summary>
            Returns a vertex representation of the current instance.
            <para>
            This method is maintained for backward compatibity. It's recommended that you use
            <see cref="M:Dse.Graph.GraphNode.To``1"/> instead, providing <see cref="T:Dse.Graph.IVertex"/> as type parameter.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Equality(Dse.Graph.GraphNode,Dse.Graph.GraphNode)">
            <summary>
            Returns true if the value represented by the instances are the same.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Inequality(Dse.Graph.GraphNode,Dse.Graph.GraphNode)">
            <summary>
            Compares the values for inequality.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~Dse.Graph.Vertex">
            <summary>
            Converts this instance to a <see cref="T:Dse.Graph.Vertex"/> instance.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~Dse.Graph.Edge">
            <summary>
            Converts this instance to an <see cref="T:Dse.Graph.Edge"/> instance.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~Dse.Graph.Path">
            <summary>
            Converts this instance to a <see cref="T:Dse.Graph.Path"/> instance.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.String">
            <summary>
            Converts this instance to a string representation.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.Int16">
            <summary>
            Converts this instance to a short representation.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.Int32">
            <summary>
            Converts this instance to an int representation.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.Int64">
            <summary>
            Converts this instance to a long representation.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.Single">
            <summary>
            Converts this instance to a float representation.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.Double">
            <summary>
            Converts this instance to a long representation.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphNode.op_Implicit(Dse.Graph.GraphNode)~System.Boolean">
            <summary>
            Converts this instance to a boolean representation.
            </summary>
        </member>
        <member name="T:Dse.Graph.GraphOptions">
            <summary>
            The default graph options to use for a DSE cluster.
            <para>
            These options will be used for all graph statements sent to the cluster, unless they have been explicitly overridden
            at the statement level.
            </para>
            </summary>
        </member>
        <member name="F:Dse.Graph.GraphOptions.DefaultLanguage">
            <summary>
            Default value for graph language.
            </summary>
        </member>
        <member name="F:Dse.Graph.GraphOptions.GraphSON2Language">
            <summary>
            Default value for graph language.
            </summary>
        </member>
        <member name="F:Dse.Graph.GraphOptions.DefaultSource">
            <summary>
            Default value for graph source.
            </summary>
        </member>
        <member name="F:Dse.Graph.GraphOptions.DefaultReadTimeout">
            <summary>
            Default value for read timeout.
            </summary>
        </member>
        <member name="F:Dse.Graph.GraphOptions.ConsistencyLevelNames">
            <summary>
            The consistency levels names that are different from ConsistencyLevel.ToString().ToUpper()
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphOptions.Language">
            <summary>
            Gets the graph language to use in graph queries.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphOptions.Name">
            <summary>
            Gets the graph name to use in graph queries.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphOptions.ReadConsistencyLevel">
            <summary>
            Gets the consistency level used for read queries
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphOptions.ReadTimeoutMillis">
            <summary>
            Gets the value that overrides the 
            <see href="http://docs.datastax.com/en/drivers/csharp/3.0/html/P_Cassandra_SocketOptions_ReadTimeoutMillis.htm">
            default per-host read timeout</see> in milliseconds for all graph queries.
            <para>Default: <c>Timeout.Infinite</c> (-1).</para>
            </summary>
            <seealso cref="M:Dse.Graph.GraphOptions.SetReadTimeoutMillis(System.Int32)"/>
        </member>
        <member name="P:Dse.Graph.GraphOptions.Source">
            <summary>
            Gets the graph traversal source name in graph queries.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphOptions.WriteConsistencyLevel">
            <summary>
            Gets the consistency level used for read queries
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.GraphOptions"/>.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetLanguage(System.String)">
            <summary>
            Sets the graph language to use in graph queries.
            If you don't call this method, it defaults to <see cref="F:Dse.Graph.GraphOptions.DefaultLanguage"/>.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetName(System.String)">
            <summary>
            Sets the graph name to use in graph queries.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetReadConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the consistency level for the read graph queries. 
            </summary>
            <param name="consistency">The consistency level to use in read graph queries.</param>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetReadTimeoutMillis(System.Int32)">
            <summary>
            Sets the default per-host read timeout in milliseconds for all graph queries.
            <para>
            When setting a value of less than or equals to zero (<see cref="F:System.Threading.Timeout.Infinite"/>),
            it will use an infinite timeout.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetSource(System.String)">
            <summary>
            Sets the graph traversal source name to use in graph queries.
            If you don't call this method, it defaults to <see cref="F:Dse.Graph.GraphOptions.DefaultSource"/>.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetSourceAnalytics">
            <summary>
            Sets the graph source to the server-defined analytic traversal source ('a')
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphOptions.SetWriteConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the consistency level for the write graph queries. 
            </summary>
            <param name="consistency">The consistency level to use in write graph queries.</param>
        </member>
        <member name="T:Dse.Graph.GraphResultSet">
            <summary>
            Represents the result set containing the Graph nodes returned from a query.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphResultSet.Info">
            <summary>
            Gets the execution information for the query execution.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphResultSet.#ctor(Dse.RowSet)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.GraphResultSet"/>.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphResultSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphResultSet.YieldNodes">
            <summary>
            Yields the nodes considering "bulk" property, by returning bulked results more than once.
            </summary>
        </member>
        <member name="M:Dse.Graph.GraphResultSet.To``1">
            <summary>
            Applies a conversion to each element of the sequence.
            </summary>
            <returns>
            An IEnumerable{T} that contains each element of the source sequence converted to the specified type.
            </returns>
        </member>
        <member name="T:Dse.Graph.GraphStatement">
            <summary>
            Base class for graph statements.
            </summary>
        </member>
        <member name="P:Dse.Graph.GraphStatement.ConsistencyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.GraphAlias">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.GraphLanguage">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.GraphName">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.GraphReadConsistencyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.GraphSource">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.GraphWriteConsistencyLevel">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.IsSystemQuery">
            <inheritdoc/>
        </member>
        <member name="P:Dse.Graph.GraphStatement.ReadTimeoutMillis">
            <inheritdoc />
        </member>
        <member name="P:Dse.Graph.GraphStatement.Timestamp">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.GetIStatement(Dse.Graph.GraphOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.IsAnonymous(System.Object)">
            <summary>
            Determines whether the object is anonymous.
            </summary>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetConsistencyLevel(Dse.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetGraphLanguage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetGraphName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetGraphReadConsistencyLevel(Dse.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetGraphSource(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetGraphSourceAnalytics">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetGraphWriteConsistencyLevel(Dse.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetReadTimeoutMillis(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetSystemQuery">
            <inheritdoc />
        </member>
        <member name="M:Dse.Graph.GraphStatement.SetTimestamp(System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="T:Dse.Graph.IEdge">
            <summary>
            Represents an edge in DSE graph.
            </summary>
        </member>
        <member name="P:Dse.Graph.IEdge.InV">
            <summary>
            Gets the incoming/head vertex.
            </summary>
        </member>
        <member name="P:Dse.Graph.IEdge.InVLabel">
            <summary>
            Gets the label of the incoming/head vertex.
            </summary>
        </member>
        <member name="P:Dse.Graph.IEdge.OutV">
            <summary>
            Gets the outgoing/tail vertex.
            </summary>
        </member>
        <member name="P:Dse.Graph.IEdge.OutVLabel">
            <summary>
            Gets the label of the outgoing/tail vertex.
            </summary>
        </member>
        <member name="T:Dse.Graph.IElement">
            <summary>
            Represents an element in DSE Graph.
            </summary>
        </member>
        <member name="P:Dse.Graph.IElement.Label">
            <summary>
            Gets the label of the element.
            </summary>
        </member>
        <member name="P:Dse.Graph.IElement.Id">
            <summary>
            Gets the identifier as an instance of <see cref="T:Dse.Graph.IGraphNode"/>.
            </summary>
        </member>
        <member name="M:Dse.Graph.IElement.GetProperty(System.String)">
            <summary>
            Gets a property by name.
            </summary>
        </member>
        <member name="M:Dse.Graph.IElement.GetProperties">
            <summary>
            Gets all properties of an element.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphNode.IsArray">
            <summary>
            Returns true if the underlying value is an array.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphNode.IsObjectTree">
            <summary>
            Returns true if the underlying value is an object tree.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphNode.IsScalar">
            <summary>
            Returns true if the underlying value is a scalar value (string, double, boolean, ...).
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphNode.Get``1(System.String)">
            <summary>
            Gets the typed value of a property of the result.
            </summary>
            <typeparam name="T">Type of the property. Use dynamic for object trees.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Graph.IGraphNode.HasProperty(System.String)">
            <summary>
            Returns true if the property is defined in this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the underlying value is not an object tree</exception>
        </member>
        <member name="M:Dse.Graph.IGraphNode.To``1">
            <summary>
            Returns the representation of the <see cref="T:Dse.Graph.GraphNode"/> as an instance of type T.
            </summary>
            <typeparam name="T">The type to which the current instance is going to be converted to.</typeparam>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Graph.IGraphNode.To(System.Type)">
            <summary>
            Returns the representation of the <see cref="T:Dse.Graph.GraphNode"/> as an instance of the type provided.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Graph.IGraphNode.GetProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphNode.ToIArray">
            <summary>
            Converts the instance into an array when the internal representation is a json array.
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphNode.ToBoolean">
            <summary>
            Returns the representation of the result as a boolean.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It throws an InvalidOperationException when the internal value is not an scalar.
            </exception>
            <exception cref="T:System.InvalidCastException">When the scalar value is not convertible to target type.</exception>
        </member>
        <member name="M:Dse.Graph.IGraphNode.ToDouble">
            <summary>
            Returns the representation of the result as a double.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It throws an InvalidOperationException when the internal value is not an scalar.
            </exception>
            <exception cref="T:System.InvalidCastException">When the scalar value is not convertible to target type.</exception>
        </member>
        <member name="M:Dse.Graph.IGraphNode.ToInt32">
            <summary>
            Returns the representation of the result as an int.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            It throws an InvalidOperationException when the internal value is not an scalar.
            </exception>
            <exception cref="T:System.InvalidCastException">When the scalar value is not convertible to target type.</exception>
        </member>
        <member name="T:Dse.Graph.IGraphStatement">
            <summary>
            Represents a graph statement.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.ConsistencyLevel">
            <summary>
            Returns the consistency level to use for this statement.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.GraphLanguage">
            <summary>
            Gets the graph language to use with this statement.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.GraphName">
            <summary>
            Gets the graph name to use with this statement.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.GraphReadConsistencyLevel">
            <summary>
            Gets the consistency level used for read graph queries.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.ReadTimeoutMillis">
            <summary>
            Gets the ReadTimeout for the statement that, when is different than 0, overrides
            <see cref="P:Dse.Graph.GraphOptions.ReadTimeoutMillis"/>.
            <para>Use <see cref="F:System.Threading.Timeout.Infinite"/> to disable timeouts for this Statement.</para>
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.GraphSource">
            <summary>
            Gets the graph traversal source name to use with this statement.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.GraphWriteConsistencyLevel">
            <summary>
            Gets the consistency level used for write graph queries.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.IsSystemQuery">
            <summary>
            Determines whether this statement is marked as a system query.
            </summary>
        </member>
        <member name="P:Dse.Graph.IGraphStatement.Timestamp">
            <summary>
            Gets the default timestamp for this query.
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.ToIStatement(Dse.Graph.GraphOptions)">
            <summary>
            Returns the <see cref="T:Dse.IStatement"/> representation of the Graph statement.
            </summary>
            <remarks>Used by the DSE driver to translate between this statement and Core driver statement instances</remarks>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the consistency level to use for this statement.
            <para>
            This setting will affect the general consistency when executing the gremlin query. However
            executing a gremlin query on the server side is going to involve the execution of CQL queries to the 
            persistence engine that is Cassandra. Those queries can be both reads and writes and both will have a
            settable consistency level. Setting only this property will indicate to the server to use this consistency
            level for both reads and writes in Cassandra. Read or write consistency level can be set separately with
            respectively
            <see cref="M:Dse.Graph.IGraphStatement.SetGraphReadConsistencyLevel(Dse.ConsistencyLevel)"/> and
            <see cref="M:Dse.Graph.IGraphStatement.SetGraphWriteConsistencyLevel(Dse.ConsistencyLevel)"/> will override the consistency set
            here.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetGraphLanguage(System.String)">
            <summary>
            Sets the graph language to use with this statement.
            <para>
            This property is not required; if it is not set, the default <see cref="P:Dse.Graph.GraphOptions.Language"/> will be
            used when executing the statement.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetGraphName(System.String)">
            <summary>
            Sets the graph name to use in graph queries.
            If you don't call this method, it is left unset.
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetGraphReadConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the consistency level used for the graph read query.
            <para>
            This setting will override the consistency level set with 
            <see cref="M:Dse.Graph.IGraphStatement.SetConsistencyLevel(Dse.ConsistencyLevel)"/> only for the READ part of the graph query.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetGraphSource(System.String)">
            <summary>
            Sets the graph traversal source name to use in graph queries.
            If you don't call this method, it defaults to <see cref="P:Dse.Graph.GraphOptions.Source"/>.
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetGraphSourceAnalytics">
            <summary>
            Sets the graph source to the server-defined analytic traversal source ("a") for this statement.
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetGraphWriteConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the consistency level used for the graph write query.
            <para>
            This setting will override the consistency level set with 
            <see cref="M:Dse.Graph.IGraphStatement.SetConsistencyLevel(Dse.ConsistencyLevel)"/> only for the WRITE part of the graph query.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetReadTimeoutMillis(System.Int32)">
            <summary>
            Sets the per-host read timeout in milliseconds for this statement.
            <para>Use <see cref="F:System.Threading.Timeout.Infinite"/> to disable timeouts for this Statement.</para>
            <para>Use zero to use the default value specified in the <see cref="P:Dse.Graph.GraphOptions.ReadTimeoutMillis"/>.</para>
            </summary>
            <param name="timeout">Timeout in milliseconds.</param>
            <returns>This instance</returns>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetSystemQuery">
            <summary>
            Forces this statement to use no graph name, even if a default graph name was defined 
            with <see cref="M:Dse.Graph.GraphOptions.SetName(System.String)"/>.
            <para>
            If a graph name was previously defined on this statement, it will be reset.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.IGraphStatement.SetTimestamp(System.DateTimeOffset)">
            <summary>
            Sets the timestamp associated with this query.
            </summary>
        </member>
        <member name="T:Dse.Graph.IPath">
            <summary>
            Represents a walk through a graph as defined by a traversal.
            </summary>
        </member>
        <member name="P:Dse.Graph.IPath.Labels">
            <summary>
            Gets the sets of labels of the steps traversed by this path, or an empty list, if this path is empty.
            </summary>
        </member>
        <member name="P:Dse.Graph.IPath.Objects">
            <summary>
            Gets the objects traversed by this path, or an empty list, if this path is empty.
            </summary>
        </member>
        <member name="T:Dse.Graph.IProperty">
            <summary>
            Represents a property in DSE Graph.
            </summary>
        </member>
        <member name="P:Dse.Graph.IProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Dse.Graph.IProperty.Value">
            <summary>
            Gets the property value.
            </summary>
        </member>
        <member name="T:Dse.Graph.IVertex">
            <summary>
            Represents a Vertex in DSE Graph.
            </summary>
        </member>
        <member name="M:Dse.Graph.IVertex.GetProperty(System.String)">
            <summary>
            Gets the first property of this element that has the given name, or null if the property 
            does not exist.
            <para>
            If more than one property of this element has the given name, it will return one of them 
            (unspecified order).
            </para>
            </summary>
        </member>
        <member name="M:Dse.Graph.IVertex.GetProperties(System.String)">
            <summary>
            Gets the properties of this element that has the given name or an empty iterator if not found.
            </summary>
        </member>
        <member name="M:Dse.Graph.IVertex.GetProperties">
            <summary>
            Gets the properties of this element.
            </summary>
        </member>
        <member name="T:Dse.Graph.IVertexProperty">
            <summary>
            Represents a vertex property in DSE Graph.
            <para>
            Vertex properties are special because they are also elements, and thus have an identifier; they can also
            contain properties of their own (usually referred to as "meta properties").
            </para>
            </summary>
        </member>
        <member name="T:Dse.Graph.Path">
            <summary>
            Represents a walk through a graph as defined by a traversal.
            </summary>
        </member>
        <member name="P:Dse.Graph.Path.Labels">
            <summary>
            Returns the sets of labels of the steps traversed by this path, or an empty list, if this path is empty.
            </summary>
        </member>
        <member name="P:Dse.Graph.Path.Objects">
            <summary>
            Returns the objects traversed by this path, or an empty list, if this path is empty.
            </summary>
        </member>
        <member name="M:Dse.Graph.Path.#ctor(System.Collections.Generic.ICollection{System.Collections.Generic.ICollection{System.String}},System.Collections.Generic.ICollection{Dse.Graph.GraphNode})">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.Path"/>.
            </summary>
            <param name="labels">The sets of labels of the steps traversed by this path.</param>
            <param name="objects">The objects traversed by this path</param>
        </member>
        <member name="T:Dse.Graph.Property">
            <summary>
            Internal default implementation of a property.
            </summary>
        </member>
        <member name="T:Dse.Graph.SimpleGraphStatement">
            <summary>
            Represents a graph query.
            </summary>
        </member>
        <member name="P:Dse.Graph.SimpleGraphStatement.Query">
            <summary>
            The underlying query string
            </summary>
        </member>
        <member name="P:Dse.Graph.SimpleGraphStatement.Values">
            <summary>
            Values object used for parameter substitution in the query string
            </summary>
        </member>
        <member name="P:Dse.Graph.SimpleGraphStatement.ValuesDictionary">
            <summary>
            Values dictionary used for parameter substitution in the query string
            </summary>
        </member>
        <member name="M:Dse.Graph.SimpleGraphStatement.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.SimpleGraphStatement"/> using a query with no parameters.
            </summary>
            <param name="query">The graph query string.</param>
        </member>
        <member name="M:Dse.Graph.SimpleGraphStatement.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.SimpleGraphStatement"/> using a query with named parameters.
            </summary>
            <param name="query">The graph query string.</param>
            <param name="values">An anonymous object containing the parameters as properties.</param>
            <example>
            <code>new SimpleGraphStatement(&quot;g.V().has('name', myName)&quot;, new { myName = &quot;mark&quot;})</code>
            </example>
        </member>
        <member name="M:Dse.Graph.SimpleGraphStatement.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Graph.SimpleGraphStatement"/> using a query with named parameters.
            </summary>
            <param name="values">An Dictionary object containing the parameters name and values as key and values.</param>
            <param name="query">The graph query string.</param>
            <example>
            <code>
            new SimpleGraphStatement(
                new Dictionary&lt;string, object&gt;{ { &quot;myName&quot;, &quot;mark&quot; } }, 
                &quot;g.V().has('name', myName)&quot;)
            </code>
            </example>
        </member>
        <member name="T:Dse.Graph.Vertex">
            <summary>
            Represents a vertex in DSE graph.
            </summary>
        </member>
        <member name="M:Dse.Graph.Vertex.#ctor(Dse.Graph.GraphNode,System.String,System.Collections.Generic.IDictionary{System.String,Dse.Graph.GraphNode})">
            <summary>
            Creates a new <see cref="T:Dse.Graph.Vertex"/> instance.
            </summary>
        </member>
        <member name="M:Dse.Graph.Vertex.GetProperty(System.String)">
            <summary>
            Gets the first property of this element that has the given name, or null if the property 
            does not exist.
            <para>
            If more than one property of this element has the given name, it will return one of them 
            (unspecified order).
            </para>
            </summary>
            <param name="name">The name of the property</param>
            <returns>The property or null.</returns>
        </member>
        <member name="M:Dse.Graph.Vertex.GetProperties(System.String)">
            <summary>
            Gets the properties of this element that has the given name.
            </summary>
            <param name="name">The name of the property</param>
        </member>
        <member name="M:Dse.Graph.Vertex.GetProperties">
            <summary>
            Gets the properties of this element.
            </summary>
        </member>
        <member name="T:Dse.Graph.VertexProperty">
            <summary>
            Internal default implementation of <see cref="T:Dse.Graph.IVertexProperty"/>.
            </summary>
        </member>
        <member name="T:Dse.Host">
            <summary>
            Represents a Cassandra node.
            </summary>
        </member>
        <member name="E:Dse.Host.Down">
            <summary>
            Event that gets raised when the host is set as DOWN (not available) by the driver, after being UP.
            It provides the delay for the next reconnection attempt.
            </summary>
        </member>
        <member name="E:Dse.Host.Up">
            <summary>
            Event that gets raised when the host is considered back UP (available for queries) by the driver.
            </summary>
        </member>
        <member name="E:Dse.Host.Remove">
            <summary>
            Event that gets raised when the host is being decommissioned from the cluster.
            </summary>
        </member>
        <member name="E:Dse.Host.DistanceChanged">
            <summary>
            Event that gets raised when there is a change in the distance, perceived by the host.
            </summary>
        </member>
        <member name="P:Dse.Host.IsUp">
            <summary>
            Determines if the host is UP for the driver
            </summary>
        </member>
        <member name="P:Dse.Host.IsConsiderablyUp">
            <summary>
            This property is going to be removed in future versions, use <see cref="P:Dse.Host.IsUp"/> instead.
            Used to determines if the host can be considered as UP
            </summary>
        </member>
        <member name="P:Dse.Host.Address">
            <summary>
             Gets the node address.
            </summary>
        </member>
        <member name="P:Dse.Host.Tokens">
            <summary>
            Tokens assigned to the host
            </summary>
        </member>
        <member name="P:Dse.Host.Datacenter">
            <summary>
             Gets the name of the datacenter this host is part of. The returned
             datacenter name is the one as known by Cassandra. Also note that it is
             possible for this information to not be available. In that case this method
             returns <c>null</c> and caller should always expect that possibility.
            </summary>
        </member>
        <member name="P:Dse.Host.Rack">
            <summary>
             Gets the name of the rack this host is part of. The returned rack name is
             the one as known by Cassandra. Also note that it is possible for this
             information to not be available. In that case this method returns
             <c>null</c> and caller should always expect that possibility.
            </summary>
        </member>
        <member name="P:Dse.Host.CassandraVersion">
            <summary>
            The Cassandra version the host is running.
            <remarks>
            The value returned can be null if the information is unavailable.
            </remarks>
            </summary>
        </member>
        <member name="P:Dse.Host.Workloads">
            <summary>
            Gets the DSE Workloads the host is running.
            <para>
              This is based on the "workload" or "workloads" columns in <c>system.local</c> and <c>system.peers</c>.
            </para>
            <para>
              Workload labels may vary depending on the DSE version in use; e.g. DSE 5.1 may report two distinct
              workloads: <c>Search</c> and <c>Analytics</c>, while DSE 5.0 would report a single
              <c>SearchAnalytics</c> workload instead. The driver simply returns the workload labels as reported by
              DSE, without any form of pre-processing.
            </para>
            <para>When the information is unavailable, this property returns an empty collection.</para>
            </summary>
            <remarks>Collection can be considered as immutable.</remarks>
        </member>
        <member name="P:Dse.Host.DseVersion">
            <summary>
            Gets the DSE version the server is running.
            This property might be null on older server versions.
            </summary>
        </member>
        <member name="M:Dse.Host.#ctor(System.Net.IPEndPoint,Dse.IReconnectionPolicy)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Host"/>.
            </summary>
        </member>
        <member name="M:Dse.Host.SetDown">
            <summary>
            Sets the Host as Down.
            Returns false if it was already considered as Down by the driver.
            </summary>
        </member>
        <member name="M:Dse.Host.BringUpIfDown">
            <summary>
            Returns true if the host was DOWN and it was set as UP.
            </summary>
        </member>
        <member name="M:Dse.Host.SetInfo(Dse.IRow)">
            <summary>
            Sets datacenter, rack and other basic information of a host.
            </summary>
        </member>
        <member name="M:Dse.Host.GetHashCode">
            <summary>
            The hash value of the address of the host
            </summary>
        </member>
        <member name="M:Dse.Host.Equals(Dse.Host)">
            <summary>
            Determines if the this instance can be considered equal to the provided host.
            </summary>
        </member>
        <member name="M:Dse.Host.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Host.SetDistance(Dse.HostDistance)">
            <summary>
            Updates the internal state representing the distance.
            </summary>
        </member>
        <member name="T:Dse.HostConnectionPool">
            <summary>
            Represents a pool of connections to a host
            </summary>
        </member>
        <member name="T:Dse.HostConnectionPool.PoolState">
            <summary>
            Represents the possible states of the pool.
            Possible state transitions:
             - From Init to Closing: The pool must be closed because the host is ignored or because the pool should
               not attempt more reconnections (another pool is trying to reconnect to a UP host).
             - From Init to ShuttingDown: The pool is being shutdown as a result of a client shutdown.
             - From Closing to Init: The pool finished closing connections (is now ignored) and it resets to
               initial state in case the host is marked as local/remote in the future.
             - From Closing to ShuttingDown (rare): It was marked as ignored, now the client is being shutdown.
             - From ShuttingDown to Shutdown: Finished shutting down, the pool should not be reused.
            </summary>
        </member>
        <member name="F:Dse.HostConnectionPool.PoolState.Init">
            <summary>
            Initial state: open / opening / ready to be opened
            </summary>
        </member>
        <member name="F:Dse.HostConnectionPool.PoolState.Closing">
            <summary>
            When the pool is being closed as part of a distance change
            </summary>
        </member>
        <member name="F:Dse.HostConnectionPool.PoolState.ShuttingDown">
            <summary>
            When the pool is being shutdown for good
            </summary>
        </member>
        <member name="F:Dse.HostConnectionPool.PoolState.Shutdown">
            <summary>
            When the pool has being shutdown
            </summary>
        </member>
        <member name="P:Dse.HostConnectionPool.HasConnections">
            <summary>
            Determines whether the connection pool has opened connections using snapshot semantics.
            </summary>
        </member>
        <member name="P:Dse.HostConnectionPool.OpenConnections">
            <summary>
            Gets the total amount of open connections. 
            </summary>
        </member>
        <member name="P:Dse.HostConnectionPool.InFlight">
            <summary>
            Gets the total of in-flight requests on all connections. 
            </summary>
        </member>
        <member name="P:Dse.HostConnectionPool.IsClosing">
            <summary>
            Determines whether the pool is not on the initial state.
            </summary>
        </member>
        <member name="P:Dse.HostConnectionPool.ConnectionsSnapshot">
            <summary>
            Gets a snapshot of the current state of the pool.
            </summary>
        </member>
        <member name="M:Dse.HostConnectionPool.BorrowConnection">
            <summary>
            Gets an open connection from the host pool (creating if necessary).
            It returns null if the load balancing policy didn't allow connections to this host.
            </summary>
            <exception cref="T:Dse.DriverInternalError" />
            <exception cref="T:Dse.BusyPoolException" />
            <exception cref="T:Dse.UnsupportedProtocolVersionException" />
            <exception cref="T:System.Net.Sockets.SocketException" />
            <exception cref="T:Dse.AuthenticationException" />
        </member>
        <member name="M:Dse.HostConnectionPool.Remove(Dse.Connection)">
            <summary>
            Closes the connection and removes it from the pool
            </summary>
        </member>
        <member name="M:Dse.HostConnectionPool.Dispose">
            <summary>
            Releases the resources associated with the pool.
            </summary>
        </member>
        <member name="M:Dse.HostConnectionPool.MinInFlight(Dse.Connection[],System.Int32@,System.Int32,System.Int32@)">
            <summary>
            Gets the connection with the minimum number of InFlight requests.
            Only checks for index + 1 and index, to avoid a loop of all connections.
            </summary>
            <param name="connections">A snapshot of the pool of connections</param>
            <param name="connectionIndex">Current round-robin index</param>
            <param name="inFlightThreshold">
            The max amount of in-flight requests that cause this method to continue
            iterating until finding the connection with min number of in-flight requests.
            </param>
            <param name="inFlight">
            Out parameter containing the amount of in-flight requests of the selected connection.
            </param>
        </member>
        <member name="M:Dse.HostConnectionPool.DrainConnections(System.Action)">
            <summary>
            Removes the connections from the pool and defers the closing of the connections until twice the
            readTimeout. The connection might be already selected and sending requests.
            </summary>
        </member>
        <member name="M:Dse.HostConnectionPool.OnIdleRequestException(Dse.Connection,System.Exception)">
            <summary>
            Handler that gets invoked when if there is a socket exception when making a heartbeat/idle request
            </summary>
        </member>
        <member name="M:Dse.HostConnectionPool.ScheduleReconnection(System.Boolean)">
            <summary>
            Adds a new reconnection timeout using a new schedule.
            Resets the status of the pool to allow further reconnections.
            </summary>
        </member>
        <member name="M:Dse.HostConnectionPool.StartCreatingConnection(Dse.IReconnectionSchedule)">
            <summary>
            Asynchronously starts to create a new connection (if its not already being created).
            A <c>null</c> schedule signals that the pool is not reconnecting but growing to the expected size.
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Dse.HostConnectionPool.CreateOpenConnection(System.Boolean)">
            <summary>
            Opens one connection. 
            If a connection is being opened it yields the same task, preventing creation in parallel.
            </summary>
            <param name="satisfyWithAnOpenConnection">
            Determines whether the Task should be marked as completed when there is a connection already opened.
            </param>
            <exception cref="T:System.Net.Sockets.SocketException">Throws a SocketException when the connection could not be established with the host</exception>
            <exception cref="T:Dse.AuthenticationException" />
            <exception cref="T:Dse.UnsupportedProtocolVersionException" />
        </member>
        <member name="M:Dse.HostConnectionPool.EnsureCreate">
            <summary>
            Ensures that the pool has at least contains 1 connection to the host.
            </summary>
            <returns>An Array of connections with 1 or more elements or throws an exception.</returns>
            <exception cref="T:System.Net.Sockets.SocketException" />
            <exception cref="T:Dse.AuthenticationException" />
            <exception cref="T:Dse.UnsupportedProtocolVersionException" />
        </member>
        <member name="M:Dse.HostConnectionPool.Warmup">
            <summary>
            Creates the required connections to the hosts and awaits for all connections to be open.
            The task is completed when at least 1 of the connections is opened successfully.
            Until the task is completed, no other thread is expected to be using this instance.
            </summary>
        </member>
        <member name="T:Dse.HostDistance">
            <summary>
            The distance to a Cassandra node as assigned by a <see cref="T:Dse.ILoadBalancingPolicy"/> relative to the
            <see cref="T:Dse.ICluster"/> instance.
            <para>
            The distance assigned to a host influences how many connections the driver maintains towards this host.
            </para>
            </summary>
        </member>
        <member name="E:Dse.Hosts.Down">
            <summary>
            Event that gets triggered when a host is considered as DOWN (not available)
            </summary>
        </member>
        <member name="E:Dse.Hosts.Up">
            <summary>
            Event that gets triggered when a host is considered back UP (available for queries)
            </summary>
        </member>
        <member name="E:Dse.Hosts.Added">
            <summary>
            Event that gets triggered when a new host has been added to the pool
            </summary>
        </member>
        <member name="E:Dse.Hosts.Removed">
            <summary>
            Event that gets triggered when a host has been removed
            </summary>
        </member>
        <member name="P:Dse.Hosts.Count">
            <summary>
            Gets the total amount of hosts in the cluster
            </summary>
        </member>
        <member name="M:Dse.Hosts.Add(System.Net.IPEndPoint)">
            <summary>
            Adds the host if not exists
            </summary>
        </member>
        <member name="T:Dse.IAddressTranslator">
            <summary>
                Translates IP addresses received from Cassandra nodes into locally queriable addresses.
            </summary>
            <remarks>
                The driver auto-detect new Cassandra nodes added to the cluster through server side
                pushed notifications and through checking the system tables. For each node, the address
                the driver will receive will correspond to the address set as rpc_address in the node
                yaml file. In most case, this is the correct address to use by the driver and that is
                what is used by default. However, sometimes the addresses received through this
                mechanism will either not be reachable directly by the driver or should not be the
                preferred address to use to reach the node (for instance, the rpc_address set on
                Cassandra nodes might be a private IP, but some clients may have to use a public IP,
                or pass by a router to reach that node). This interface allows to deal with such cases,
                by allowing to translate an address as sent by a Cassandra node to another address
                to be used by the driver for connection.
                Please note that the contact points addresses provided while creating the
                <c>Cluster</c> instance are not "translated", only IP address retrieve from or sent
                by Cassandra nodes to the driver are.
            </remarks>
        </member>
        <member name="M:Dse.IAddressTranslator.Translate(System.Net.IPEndPoint)">
            <summary>
                Translates a Cassandra rpc_address to another address if necessary.
            </summary>
            <param name="address">
                the address of a node as returned by Cassandra. Note that if the rpc_address of
                a node has been configured to 0.0.0.0 server side, then the provided address will
                be the node listen_address, <b>not</b> 0.0.0.0. Also note that the port for
                <c>IPEndPoint</c> will always be the one set at Cluster construction time
                (9042 by default).
            </param>
            <returns>
                the address the driver should actually use to connect to the node. If the return is
                <c>null</c>, then address will be used by the driver (it is thus equivalent to
                returing address directly).
            </returns>
        </member>
        <member name="T:Dse.IAuthenticator">
            <summary>
             Handles SASL authentication with Cassandra servers. A server which requires
             authentication responds to a startup message with an challenge in the form of
             an <c>AuthenticateMessage</c>. Authenticator implementations should be
             able to respond to that challenge and perform whatever authentication
             negotiation is required by the server. The exact nature of that negotiation
             is specific to the configuration of the server.
            </summary>
        </member>
        <member name="M:Dse.IAuthenticator.InitialResponse">
            <summary>
             Obtain an initial response token for initializing the SASL handshake
            </summary>
            
            <returns>the initial response to send to the server, may be null</returns>
        </member>
        <member name="M:Dse.IAuthenticator.EvaluateChallenge(System.Byte[])">
            <summary>
             Evaluate a challenge received from the Server. Generally, this method should
             return null when authentication is complete from the client perspective
            </summary>
            <param name="challenge"> the server's SASL challenge' </param>
            
            <returns>updated SASL token, may be null to indicate the client requires no
             further action</returns>
        </member>
        <member name="T:Dse.IAuthInfoProvider">
            <summary>
             Authentication informations provider to connect to Cassandra nodes. <p> The
             authentication information themselves are just a key-value pairs. Which exact
             key-value pairs are required depends on the authenticator set for the
             Cassandra nodes.</p>
            </summary>
            
        </member>
        <member name="M:Dse.IAuthInfoProvider.GetAuthInfos(System.Net.IPEndPoint)">
            <summary>
             The authentication informations to use to connect to <c>host</c>.
             Please note that if authentication is required, this method will be called to
             initialize each new connection created by the driver. It is thus a good idea
             to make sure this method returns relatively quickly.
            </summary>
            <param name="host"> the Cassandra host for which authentication information
             are requested. </param>
            
            <returns>The authentication informations to use.</returns>
        </member>
        <member name="T:Dse.IAuthProvider">
            <summary>
            Provides <see cref="T:Dse.IAuthenticator"/> instances for use when connecting to Cassandra nodes. See 
            <see cref="T:Dse.PlainTextAuthProvider"/> for an implementation which uses SASL PLAIN mechanism to authenticate using
            username/password strings.
            </summary>
        </member>
        <member name="M:Dse.IAuthProvider.NewAuthenticator(System.Net.IPEndPoint)">
            <summary>
            The <see cref="T:Dse.IAuthenticator"/> to use when connecting to host.
            </summary>
            <param name="host">The Cassandra host to connect to. </param>
            <returns>The authentication instance to use.</returns>
        </member>
        <member name="T:Dse.IAuthProviderNamed">
            <summary>
            Represents a <see cref="T:Dse.IAuthProvider"/> that is dependant on the name provided by Cassandra.
            </summary>
            <exclude />
        </member>
        <member name="M:Dse.IAuthProviderNamed.SetName(System.String)">
            <summary>
            Sets the authenticator name from Cassandra.
            <para>
            This method is guaranteed to be called before <see cref="M:Dse.IAuthProvider.NewAuthenticator(System.Net.IPEndPoint)"/>.
            </para>
            </summary>
        </member>
        <member name="T:Dse.ICluster">
            <summary>
             Informations and known state of a Cassandra cluster. <p> This is the main
             entry point of the driver. A simple example of access to a Cassandra cluster
             would be: 
            <pre> Cluster cluster = Cluster.Builder.AddContactPoint("192.168.0.1").Build(); 
             Session session = Cluster.Connect("db1"); 
             foreach (var row in session.execute("SELECT * FROM table1")) 
               //do something ... </pre> 
             </p><p> A cluster object maintains a
             permanent connection to one of the cluster node that it uses solely to
             maintain informations on the state and current topology of the cluster. Using
             the connection, the driver will discover all the nodes composing the cluster
             as well as new nodes joining the cluster.</p>
            </summary>
        </member>
        <member name="P:Dse.ICluster.Metadata">
            <summary>
             Gets read-only metadata on the connected cluster. 
            <para>This includes the
             know nodes (with their status as seen by the driver) as well as the schema
             definitions.
            </para>
            <para>This method may trigger the creation of a connection if none has been established yet.
            </para>
            </summary>
        </member>
        <member name="P:Dse.ICluster.Configuration">
            <summary>
            Cluster client configuration
            </summary>
        </member>
        <member name="M:Dse.ICluster.AllHosts">
            <summary>
             Returns all known hosts of this cluster.
            </summary>
        </member>
        <member name="E:Dse.ICluster.HostAdded">
            <summary>
            Event that gets triggered when a new host is added to the cluster
            </summary>
        </member>
        <member name="E:Dse.ICluster.HostRemoved">
            <summary>
            Event that gets triggered when a host has been removed from the cluster
            </summary>
        </member>
        <member name="M:Dse.ICluster.Connect">
            <summary>
             Creates a new session on this cluster.
            </summary>
            <returns>a new session on this cluster set to no keyspace.</returns>
        </member>
        <member name="M:Dse.ICluster.Connect(System.String)">
            <summary>
             Creates a new session on this cluster and sets a keyspace to use.
            </summary>
            <param name="keyspace">Case-sensitive keyspace name to use.</param>
            <returns>a new session on this cluster set to keyspace: <c>keyspaceName</c>. </returns>
        </member>
        <member name="M:Dse.ICluster.GetHost(System.Net.IPEndPoint)">
            <summary>
            Get the host instance for a given Ip address.
            </summary>
            <param name="address">Ip address of the host</param>
            <returns>The host or null if not found</returns>
        </member>
        <member name="M:Dse.ICluster.GetReplicas(System.Byte[])">
            <summary>
            Gets a collection of replicas for a given partitionKey. Backward-compatibility only, use GetReplicas(keyspace, partitionKey) instead.
            </summary>
            <param name="partitionKey">Byte array representing the partition key</param>
            <returns></returns>
        </member>
        <member name="M:Dse.ICluster.GetReplicas(System.String,System.Byte[])">
            <summary>
            Gets a collection of replicas for a given partitionKey on a given keyspace
            </summary>
            <param name="keyspace">Byte array representing the partition key</param>
            <param name="partitionKey">Byte array representing the partition key</param>
            <returns></returns>
        </member>
        <member name="M:Dse.ICluster.Shutdown(System.Int32)">
            <summary>
             Shutdown this cluster instance. This closes all connections from all the
             sessions of this <c>* Cluster</c> instance and reclaim all resources
             used by it. <p> This method has no effect if the cluster was already shutdown.</p>
            </summary>
        </member>
        <member name="T:Dse.IDseCluster">
            <summary>
            Represents a DSE cluster client that contains information and known state of a DSE cluster.
            </summary>
        </member>
        <member name="P:Dse.IDseCluster.Configuration">
            <summary>
            Gets the DSE cluster client configuration.
            </summary>
        </member>
        <member name="M:Dse.IDseCluster.Connect">
            <summary>
            Creates a new DSE session on this cluster and initializes it.
            </summary>
            <returns>A new <see cref="T:Dse.IDseSession"/> instance.</returns>
        </member>
        <member name="M:Dse.IDseCluster.Connect(System.String)">
            <summary>
            Creates a new DSE session on this cluster, initializes it and sets the keyspace to the provided one.
            </summary>
            <param name="keyspace">The keyspace to connect to</param>
            <returns>A new <see cref="T:Dse.IDseSession"/> instance.</returns>
        </member>
        <member name="T:Dse.IDseSession">
            <summary>
            Represents an <see cref="T:Dse.ISession"/> suitable for querying a DataStax Enterprise (DSE) Cluster.
            <para>
            Session instances are designed to be long-lived, thread-safe and usually a single instance is enough per 
            application.
            </para>
            </summary>
        </member>
        <member name="M:Dse.IDseSession.ExecuteGraph(Dse.Graph.IGraphStatement)">
            <summary>
            Executes a graph statement.
            </summary>
            <param name="statement">The graph statement containing the query</param>
            <example>
            <code>
            GraphResultSet rs = session.ExecuteGraph(new SimpleGraphStatement("g.V()"));
            </code>
            </example>
        </member>
        <member name="M:Dse.IDseSession.ExecuteGraphAsync(Dse.Graph.IGraphStatement)">
            <summary>
            Executes a graph statement.
            </summary>
            <param name="statement">The graph statement containing the query</param>
            <example>
            <code>
            Task&lt;GraphResultSet$gt; task = session.ExecuteGraphAsync(new SimpleGraphStatement("g.V()"));
            </code>
            </example>
        </member>
        <member name="T:Dse.IFrameCompressor">
            <summary>
            Defines the methods for frame compression and decompression
            </summary>
        </member>
        <member name="M:Dse.IFrameCompressor.Decompress(System.IO.Stream)">
            <summary>
            Creates and returns stream (clear text) using the provided compressed <c>stream</c> as input.
            </summary>
        </member>
        <member name="T:Dse.IInitializer">
            <summary>
             Initializer for <link>Cluster</link> instances. <p> If you want to create a
             new <c>Cluster</c> instance programmatically, then it is advised to use
             <link>Cluster.Builder</link> (obtained through the
             <link>Cluster#builder</link> method).</p> <p> But it is also possible to
             implement a custom <c>Initializer</c> that retrieve initialization from
             a web-service or from a configuration file for instance.</p>
            </summary>
        </member>
        <member name="P:Dse.IInitializer.ContactPoints">
            <summary>
             Gets the initial Cassandra hosts to connect to.See
             <link>Builder.AddContactPoint</link> for more details on contact
            </summary>
        </member>
        <member name="M:Dse.IInitializer.GetConfiguration">
            <summary>
             The configuration to use for the new cluster. <p> Note that some
             configuration can be modified after the cluster initialization but some other
             cannot. In particular, the ones that cannot be change afterwards includes:
             <ul> <li>the port use to connect to Cassandra nodes (see
             <link>ProtocolOptions</link>).</li> <li>the policies used (see
             <link>Policies</link>).</li> <li>the authentication info provided (see
             <link>Configuration</link>).</li> <li>whether metrics are enabled (see
             <link>Configuration</link>).</li> </ul></p>
            </summary>
        </member>
        <member name="T:Dse.IndexMetadata">
            <summary>
            A representation of a secondary index in Cassandra
            </summary>
        </member>
        <member name="T:Dse.IndexMetadata.IndexKind">
            <summary>
            Describes the possible kinds of indexes
            </summary>
        </member>
        <member name="P:Dse.IndexMetadata.Name">
            <summary>
            Gets the index name
            </summary>
        </member>
        <member name="P:Dse.IndexMetadata.Target">
            <summary>
            Gets the index target
            </summary>
        </member>
        <member name="P:Dse.IndexMetadata.Kind">
            <summary>
            Gets the index kind
            </summary>
        </member>
        <member name="P:Dse.IndexMetadata.Options">
            <summary>
            Gets index options
            </summary>
        </member>
        <member name="M:Dse.IndexMetadata.FromTableColumn(Dse.TableColumn)">
            <summary>
            From legacy columns
            </summary>
        </member>
        <member name="M:Dse.IndexMetadata.FromRow(Dse.Row)">
            <summary>
            From a row in the 'system_schema.indexes' table
            </summary>
        </member>
        <member name="T:Dse.ISession">
            <summary>
            A session holds connections to a Cassandra cluster, allowing it to be queried.
            <para>
            Each session maintains multiple connections to the cluster nodes,
            provides policies to choose which node to use for each query (round-robin on
            all nodes of the cluster by default), and handles retries for failed query (when
            it makes sense), etc...
            </para>
            <para>
            Session instances are thread-safe and usually a single instance is enough
            per application. However, a given session can only be set to one keyspace
            at a time, so one instance per keyspace is necessary.
            </para>
            </summary>
        </member>
        <member name="P:Dse.ISession.BinaryProtocolVersion">
            <summary>
            Gets the Cassandra native binary protocol version
            </summary>
        </member>
        <member name="P:Dse.ISession.Cluster">
            <summary>
            Gets the cluster information and state
            </summary>
        </member>
        <member name="P:Dse.ISession.IsDisposed">
            <summary>
            Determines if the object has been disposed.
            </summary>
        </member>
        <member name="P:Dse.ISession.Keyspace">
            <summary>
            Gets name of currently used keyspace. 
            </summary>
        </member>
        <member name="P:Dse.ISession.UserDefinedTypes">
            <summary>
            Gets the user defined type mappings
            </summary>
        </member>
        <member name="M:Dse.ISession.BeginExecute(Dse.IStatement,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Dse.ISession.BeginExecute(System.String,Dse.ConsistencyLevel,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous execute operation
            </summary>
        </member>
        <member name="M:Dse.ISession.BeginPrepare(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins asynchronous prepare operation
            </summary>
        </member>
        <member name="M:Dse.ISession.ChangeKeyspace(System.String)">
            <summary>
            Switches to the specified keyspace.
            </summary>
            <param name="keyspaceName">Case-sensitive name of keyspace to be used.</param>
            <exception cref="T:Dse.InvalidQueryException">When keyspace does not exist</exception>
        </member>
        <member name="M:Dse.ISession.CreateKeyspace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
             Creates new keyspace in current cluster.        
            </summary>
            <param name="keyspaceName">Case-sensitive name of keyspace to be created.</param>
            <param name="replication">
            Replication property for this keyspace.
            To set it, refer to the <see cref="T:Dse.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option. 
            <para>Default value is <c>SimpleStrategy</c> with <c>replication_factor = 1</c></para>
            </param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
        </member>
        <member name="M:Dse.ISession.CreateKeyspaceIfNotExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
             Creates new keyspace in current cluster.
             If keyspace with specified name already exists, then this method does nothing.
            </summary>
            <param name="keyspaceName">Case-sensitive name of keyspace to be created.</param>
            <param name="replication">
            Replication property for this keyspace.
            To set it, refer to the <see cref="T:Dse.ReplicationStrategies"/> class methods. 
            It is a dictionary of replication property sub-options where key is a sub-option name and value is a value for that sub-option.
            <para>Default value is <c>'SimpleStrategy'</c> with <c>'replication_factor' = 2</c></para>
            </param>
            <param name="durableWrites">Whether to use the commit log for updates on this keyspace. Default is set to <c>true</c>.</param>
        </member>
        <member name="M:Dse.ISession.DeleteKeyspace(System.String)">
            <summary>
             Deletes specified keyspace from current cluster.
             If keyspace with specified name does not exist, then exception will be thrown.
            </summary>
            <param name="keyspaceName">Name of keyspace to be deleted.</param>
        </member>
        <member name="M:Dse.ISession.DeleteKeyspaceIfExists(System.String)">
            <summary>
             Deletes specified keyspace from current cluster.
             If keyspace with specified name does not exist, then this method does nothing.
            </summary>
            <param name="keyspaceName">Name of keyspace to be deleted.</param>
        </member>
        <member name="M:Dse.ISession.EndExecute(System.IAsyncResult)">
            <summary>
            Ends asynchronous execute operation
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.ISession.EndPrepare(System.IAsyncResult)">
            <summary>
            Ends asynchronous prepare operation
            </summary>
        </member>
        <member name="M:Dse.ISession.Execute(Dse.IStatement)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Dse.ISession.Execute(System.String)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Dse.ISession.Execute(System.String,Dse.ConsistencyLevel)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Dse.ISession.Execute(System.String,System.Int32)">
            <summary>
            Executes the provided query.
            </summary>
        </member>
        <member name="M:Dse.ISession.ExecuteAsync(Dse.IStatement)">
            <summary>
            Executes a query asynchronously
            </summary>
            <param name="statement">The statement to execute (simple, bound or batch statement)</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Dse.ISession.Prepare(System.String)">
            <summary>
            Prepares the provided query string.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
        </member>
        <member name="M:Dse.ISession.Prepare(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Prepares the query string, sending the custom payload request.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
            <param name="customPayload">Custom outgoing payload to send with the prepare request</param>
        </member>
        <member name="M:Dse.ISession.Prepare(System.String,System.String)">
            <summary>
            Prepares the query on the provided keyspace.
            </summary>
            <param name="cqlQuery">Cql query to prepare</param>
            <param name="keyspace">The keyspace to prepare this query with</param>
        </member>
        <member name="M:Dse.ISession.Prepare(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Prepares the provided query string asynchronously on the provided keyspace, sending the custom payload
            as part of the request.
            </summary>
            <param name="cqlQuery">Cql query to prepare</param>
            <param name="keyspace">The keyspace to prepare this query with</param>
            <param name="customPayload">Custom outgoing payload to send with the prepare request</param>
        </member>
        <member name="M:Dse.ISession.PrepareAsync(System.String)">
            <summary>
            Prepares the provided query string asynchronously.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
        </member>
        <member name="M:Dse.ISession.PrepareAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Prepares the provided query string asynchronously, and sending the custom payload request.
            </summary>
            <param name="cqlQuery">cql query to prepare</param>
            <param name="customPayload">Custom outgoing payload to send with the prepare request</param>
        </member>
        <member name="M:Dse.ISession.PrepareAsync(System.String,System.String)">
            <summary>
            Prepares the query asynchronously on the provided keyspace.
            </summary>
            <param name="cqlQuery">Cql query to prepare</param>
            <param name="keyspace">The keyspace to prepare this query with</param>
        </member>
        <member name="M:Dse.ISession.PrepareAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Prepares the provided query asynchronously on the provided keyspace, sending the custom payload
            as part of the request.
            </summary>
            <param name="cqlQuery">Cql query to prepare</param>
            <param name="keyspace">The keyspace to prepare this query with</param>
            <param name="customPayload">Custom outgoing payload to send with the prepare request</param>
        </member>
        <member name="T:Dse.ISessionState">
            <summary>
            Represents the state of a <see cref="T:Dse.ISession"/>.
            <para>Exposes information on the connections maintained by a Client at a specific time.</para>
            </summary>
        </member>
        <member name="M:Dse.ISessionState.GetConnectedHosts">
            <summary>
            The hosts to which the <see cref="T:Dse.ISession"/> is connected to, at the time this state was obtained.
            <para>
            Please note that this method really returns the hosts for which the session currently
            holds a connection pool. As such, it's unlikely but not impossible for a host to be listed
            in the output of this method but to have <see cref="M:Dse.ISessionState.GetOpenConnections(Dse.Host)"/> return 0, if the
            pool itself is created but no connections have been successfully opened yet.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.ISessionState.GetOpenConnections(Dse.Host)">
            <summary>
            The number of open connections to a given host.
            </summary>
            <param name="host">The host to get open connections for.</param>
            <returns>
            The number of open connections to {@code host}. If the session is not connected to that host, 0 is returned.
            </returns>
        </member>
        <member name="M:Dse.ISessionState.GetInFlightQueries(Dse.Host)">
            <summary>
            The number of queries that are currently being executed through a given host. 
            <para>
            This corresponds to the number of queries that have been sent (by the session this
            is a State of) to the server Host on one of its connections but haven't yet returned.
            In that sense this provides a sort of measure of how busy the connections to that node
            are (at the time the state was obtained at least).
            </para>
            </summary>
            <param name="host">The host to get in-flight queries for.</param>
            <returns>The number of executing queries to <see cref="T:Dse.Host"/> at the time the state was obtained.</returns>
        </member>
        <member name="T:Dse.IStatement">
            <summary>
             An executable query.
             This represents either a <see cref="T:Dse.SimpleStatement"/>, a <see cref="T:Dse.BoundStatement"/> or a
             <see cref="T:Dse.BoundStatement"/> along with the query options (consistency level,
             whether to trace the query, ...).
            </summary>
        </member>
        <member name="P:Dse.IStatement.AutoPage">
            <summary>
            Determines if the <see cref="T:Dse.RowSet"/> returned when executing this <c>IStatement</c> will automatically fetch the following result pages. Defaults to true.
            </summary>
        </member>
        <member name="P:Dse.IStatement.ConsistencyLevel">
            <summary>
            Gets the consistency level for this query.
            </summary>
        </member>
        <member name="M:Dse.IStatement.DisableTracing">
            <summary>
             Disable tracing for the statement.
            </summary>
        </member>
        <member name="M:Dse.IStatement.EnableTracing(System.Boolean)">
            <summary>
             Enables tracing for the statement
            </summary>
        </member>
        <member name="P:Dse.IStatement.IsTracing">
            <summary>
             Gets whether tracing is enabled for this query or not.
            </summary>
        </member>
        <member name="P:Dse.IStatement.PageSize">
            <summary>
            Gets query's page size.
            </summary>
        </member>
        <member name="P:Dse.IStatement.PagingState">
            <summary>
            This object represents the next page to be fetched if the query is multi page. It can be saved and reused
            later on a different execution.
            </summary>
        </member>
        <member name="P:Dse.IStatement.Timestamp">
            <summary>
            Gets the timestamp associated with this statement execution.
            </summary>
        </member>
        <member name="P:Dse.IStatement.ReadTimeoutMillis">
            <summary>
            Gets the per-host read timeout for this statement.
            <para>
            When the value is <c>0</c> or lower, the default value from the socket options will be used.
            </para>
            </summary>
        </member>
        <member name="P:Dse.IStatement.RetryPolicy">
            <summary>
             Gets the retry policy sets for this query, if any.
            </summary>
        </member>
        <member name="P:Dse.IStatement.RoutingKey">
            <summary>
             The routing key (in binary raw form) to use for token aware routing of this
             query. <p> The routing key is optional in the sense that implementers are
             free to return <c>null</c>. The routing key is an hint used for token
             aware routing (see
             <link>TokenAwarePolicy</link>), and if
             provided should correspond to the binary value for the query partition key.
             However, not providing a routing key never causes a query to fail and if the
             load balancing policy used is not token aware, then the routing key can be
             safely ignored.</p>
            </summary>
        </member>
        <member name="P:Dse.IStatement.SerialConsistencyLevel">
            <summary>
            Gets the serial consistency level for the query.
            <para>
            The serial consistency level is only used by conditional updates (INSERT, UPDATE
            and DELETE with an IF condition).
            </para>
            </summary>
        </member>
        <member name="P:Dse.IStatement.OutgoingPayload">
            <summary>
            Gets custom payload for that will be included when executing this Statement.
            </summary>
        </member>
        <member name="P:Dse.IStatement.IsIdempotent">
            <summary>
            Determines if this statement is idempotent, i.e. whether it can be applied multiple times without 
            changing the result beyond the initial application.
            <para>
            Idempotence of the statement plays a role in <see cref="T:Dse.ISpeculativeExecutionPolicy"/>.
            If a statement is <em>not idempotent</em>, the driver will not schedule speculative executions for it.
            </para>
            When the property is null, the driver will use the default value from the <see cref="M:Dse.QueryOptions.GetDefaultIdempotence"/>.
            </summary>
        </member>
        <member name="P:Dse.IStatement.Keyspace">
            <summary>
            Gets the keyspace this query operates on. The returned value should not be <c>null</c> only when the
            <see cref="T:Dse.IStatement"/> applies to a different keyspace to the logged keyspace of the
            <see cref="T:Dse.ISession"/>.
            </summary>
        </member>
        <member name="M:Dse.IStatement.ExecutingAs(System.String)">
            <summary>
            Allows this statement to be executed as a different user/role than the one 
            currently authenticated (a.k.a. proxy execution).
            </summary>
            <param name="userOrRole">The user or role name to act as when executing this statement.</param>
            <returns>This statement</returns>
            <remarks>This feature is only available in DSE 5.1+.</remarks>
        </member>
        <member name="M:Dse.IStatement.SetAutoPage(System.Boolean)">
            <summary>
            Sets the paging behavior.
            When set to true (default), the <see cref="T:Dse.RowSet"/> returned when executing this <c>IStatement</c> will automatically fetch the following result pages.
            When false, the <see cref="T:Dse.RowSet"/> returned will only contain the rows contained in the result page and will not fetch additional pages.
            </summary>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Dse.IStatement.SetConsistencyLevel(System.Nullable{Dse.ConsistencyLevel})">
            <summary>
             Sets the consistency level for the query. <p> The default consistency level,
             if this method is not called, is ConsistencyLevel.ONE.</p>
            </summary>
            <param name="consistency"> the consistency level to set. </param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Dse.IStatement.SetPageSize(System.Int32)">
            <summary>
            Sets the page size for this query.
            The page size controls how much resulting rows will be retrieved
            simultaneously (the goal being to avoid loading too much results
            in memory for queries yielding large results). Please note that
            while value as low as 1 can be used, it is highly discouraged to
            use such a low value in practice as it will yield very poor
            performance. If in doubt, leaving the default is probably a good
            idea.
            <p>
            Also note that only <c>SELECT</c> queries ever make use of that
            setting.
            </p>
            <param name="pageSize">the page size to use. If set to 0 or less, the default value will be used.
            To disable paging of the result set, use int.MaxValue</param>
            <returns>this <c>Query</c> object.</returns>
            </summary>
        </member>
        <member name="M:Dse.IStatement.SetPagingState(System.Byte[])">
            <summary>
            Sets the paging state, a token representing the current page state of query used to continue paging by retrieving the following result page.
            Setting the paging state will disable automatic paging.
            </summary>
            <param name="pagingState">The page state token</param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Dse.IStatement.SetReadTimeoutMillis(System.Int32)">
            <summary>
            Overrides the default per-host read timeout <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/> for this statement.
            </summary>
            <param name="timeout">
            Timeout in milliseconds. If the value is not greater than zero, the default value 
            from the socket options will be used.
            </param>
        </member>
        <member name="M:Dse.IStatement.SetRetryPolicy(Dse.IRetryPolicy)">
            <summary>
            Sets the retry policy to use for this query.
            <para>
            Calling this method is only required when you want to override the default 
            <see cref="P:Dse.Policies.RetryPolicy"/> set in the cluster configuration for this request.
            </para>
            <para>
            Use a <see cref="T:Dse.IExtendedRetryPolicy"/> implementation to cover all error scenarios.
            </para>
            </summary>
            <param name="policy">The retry policy to use for this query.</param>
            <returns>this <see cref="T:Dse.IStatement"/> instance.</returns>
        </member>
        <member name="M:Dse.IStatement.SetSerialConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the serial consistency level for the query.
            The serial consistency level is only used by conditional updates (so INSERT, UPDATE
            and DELETE with an IF condition). For those, the serial consistency level defines
            the consistency level of the serial phase (or "paxos" phase) while the
            normal consistency level defines the consistency for the "learn" phase, i.e. what
            type of reads will be guaranteed to see the update right away. For instance, if
            a conditional write has a regular consistency of QUORUM (and is successful), then a
            QUORUM read is guaranteed to see that write. But if the regular consistency of that
            write is ANY, then only a read with a consistency of SERIAL is guaranteed to see it
            (even a read with consistency ALL is not guaranteed to be enough).
            </summary>
            <param name="serialConsistency">Can be set only to ConsistencyLevel.Serial or 
            ConsistencyLevel.LocalSerial. Setting it to ConsistencyLevel.Serial guarantees full 
            linearizability while ConsistencyLevel.LocalSerial guarantees it only in the local datacenter. </param>
            <returns>this <c>IStatement</c> object.</returns>
        </member>
        <member name="M:Dse.IStatement.SetTimestamp(System.DateTimeOffset)">
            <summary>
            Sets the timestamp associated with this statement execution.
            If provided, this will replace the server side assigned 
            timestamp as default timestamp. Note that a timestamp in the query itself will still override this timestamp.
            </summary>
        </member>
        <member name="M:Dse.IStatement.SetOutgoingPayload(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Sets a custom outgoing payload for this statement.
            Each time this statement is executed, this payload will be included in the request.
            Once it is set using this method, the payload should not be modified.
            </summary>
        </member>
        <member name="M:Dse.IStatement.SetIdempotence(System.Boolean)">
            <summary>
            Sets whether this statement is idempotent.
            <para>
            Idempotence of the statement plays a role in <see cref="T:Dse.ISpeculativeExecutionPolicy"/>.
            If a statement is <em>not idempotent</em>, the driver will not schedule speculative executions for it.
            </para>
            </summary>
        </member>
        <member name="T:Dse.ITypeAdapter">
            <summary>
            DEPRECATED, use <see cref="T:Dse.Serialization.TypeSerializer`1"/> instead.
            Represents a adapter to convert a Cassandra type to a CLR type.
            </summary>
        </member>
        <member name="P:Dse.KeyspaceMetadata.Name">
            <summary>
             Gets the name of this keyspace.
            </summary>
            <returns>the name of this CQL keyspace.</returns>
        </member>
        <member name="P:Dse.KeyspaceMetadata.DurableWrites">
            <summary>
             Gets a value indicating whether durable writes are set on this keyspace.
            </summary>
            <returns><c>true</c> if durable writes are set on this keyspace
             , <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Dse.KeyspaceMetadata.StrategyClass">
            <summary>
             Gets the Strategy Class of this keyspace.
            </summary>
            <returns>name of StrategyClass of this keyspace.</returns>
        </member>
        <member name="P:Dse.KeyspaceMetadata.Replication">
            <summary>
             Returns the replication options for this keyspace.
            </summary>
            
            <returns>a dictionary containing the keyspace replication strategy options.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetTableMetadata(System.String)">
            <summary>
             Returns metadata of specified table in this keyspace.
            </summary>
            <param name="tableName"> the name of table to retrieve </param>
            <returns>the metadata for table <c>tableName</c> in this keyspace if it
             exists, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetMaterializedViewMetadata(System.String)">
            <summary>
             Returns metadata of specified view in this keyspace.
            </summary>
            <param name="viewName">the name of view to retrieve </param>
            <returns>the metadata for view <c>viewName</c> in this keyspace if it
             exists, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.ClearTableMetadata(System.String)">
            <summary>
            Removes table metadata forcing refresh the next time the table metadata is retrieved
            </summary>
        </member>
        <member name="M:Dse.KeyspaceMetadata.ClearViewMetadata(System.String)">
            <summary>
            Removes the view metadata forcing refresh the next time the view metadata is retrieved
            </summary>
        </member>
        <member name="M:Dse.KeyspaceMetadata.ClearFunction(System.String,System.String[])">
            <summary>
            Removes function metadata forcing refresh the next time the function metadata is retrieved
            </summary>
        </member>
        <member name="M:Dse.KeyspaceMetadata.ClearAggregate(System.String,System.String[])">
            <summary>
            Removes aggregate metadata forcing refresh the next time the function metadata is retrieved
            </summary>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetTablesMetadata">
            <summary>
             Returns metadata of all tables defined in this keyspace.
            </summary>
            <returns>an IEnumerable of TableMetadata for the tables defined in this
             keyspace.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetTablesNames">
            <summary>
             Returns names of all tables defined in this keyspace.
            </summary>
            
            <returns>a collection of all, defined in this
             keyspace tables names.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.ExportAsString">
            <summary>
             Return a <c>String</c> containing CQL queries representing this
             name and the table it contains. In other words, this method returns the
             queries that would allow to recreate the schema of this name, along with
             all its table. Note that the returned String is formatted to be human
             readable (for some definition of human readable at least).
            </summary>
            <returns>the CQL queries representing this name schema as a code
             String}.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.AsCqlQuery">
            <summary>
             Returns a CQL query representing this keyspace. This method returns a single
             'CREATE KEYSPACE' query with the options corresponding to this name
             definition.
            </summary>
            <returns>the 'CREATE KEYSPACE' query corresponding to this name.
             <see>#ExportAsString</see></returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetUdtDefinition(System.String)">
            <summary>
            Gets the definition of a User defined type
            </summary>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetUdtDefinitionAsync(System.String)">
            <summary>
            Gets the definition of a User defined type asynchronously
            </summary>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetFunction(System.String,System.String[])">
            <summary>
            Gets a CQL function by name and signature
            </summary>
            <returns>The function metadata or null if not found.</returns>
        </member>
        <member name="M:Dse.KeyspaceMetadata.GetAggregate(System.String,System.String[])">
            <summary>
            Gets a CQL aggregate by name and signature
            </summary>
            <returns>The aggregate metadata or null if not found.</returns>
        </member>
        <member name="T:Dse.KeyType">
            <summary>
            Describes the type of key.
            <para>
            This enum is going to be deprecated in future releases, use
            <see cref="P:Dse.DataCollectionMetadata.PartitionKeys"/>, <see cref="P:Dse.DataCollectionMetadata.ClusteringKeys"/>
            and <see cref="P:Dse.TableMetadata.Indexes"/> for a more accurate representation of a table or view keys and
            indexes.
            </para>
            </summary>
        </member>
        <member name="T:Dse.LocalDate">
            <summary>
            A date without a time-zone in the ISO-8601 calendar system.
            LocalDate is an immutable date-time object that represents a date, often viewed as year-month-day.
            This class is implemented to match the Date representation CQL string literals.
            </summary>
        </member>
        <member name="F:Dse.LocalDate.DaysToMonth">
            <summary>
            Day number relatively to the year based on the month index
            </summary>
        </member>
        <member name="P:Dse.LocalDate.DaysSinceEpochCentered">
            <summary>
            An unsigned integer representing days with epoch centered at 2^31 (unix epoch January 1st, 1970).
            </summary>
        </member>
        <member name="M:Dse.LocalDate.#ctor(System.UInt32)">
            <summary>
            Creates a new instance based on the days since unix epoch.
            </summary>
            <param name="days">An unsigned integer representing days with epoch centered at 2^31.</param>
        </member>
        <member name="M:Dse.LocalDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of LocalDate
            </summary>
            <param name="year">Year according to ISO-8601. Year 0 represents 1 BC.</param>
            <param name="month">The month number from 1 to 12</param>
            <param name="day">A day of the month from 1 to 31.</param>
        </member>
        <member name="M:Dse.LocalDate.DaysSinceYearZero(System.Int32)">
            <summary>
            Returns the value in days since year zero (1 BC).
            </summary>
            <param name="year"></param>
        </member>
        <member name="M:Dse.LocalDate.DaysSinceJan1(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the amount of days since Jan 1, for a given month/day
            </summary>
        </member>
        <member name="M:Dse.LocalDate.LeapDays(System.Int64)">
            <param name="year">0-based year number: 0 equals to 1 AD</param>
        </member>
        <member name="M:Dse.LocalDate.CompareTo(Dse.LocalDate)">
            <summary>
            Compares this instance value to another and returns an indication of their relative values.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.LocalDate.Equals(Dse.LocalDate)">
            <summary>
            Determines if the value is equal to this instance.
            </summary>
        </member>
        <member name="M:Dse.LocalDate.Parse(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.LocalDate"/> using the year, month and day provided in the form:
            yyyy-mm-dd or days since epoch (i.e. -1 for Dec 31, 1969).
            </summary>
        </member>
        <member name="M:Dse.LocalDate.ToDateTimeOffset">
            <summary>
            Returns the DateTimeOffset representation of the LocalDate for dates between 0001-01-01 and 9999-12-31
            </summary>
        </member>
        <member name="M:Dse.LocalDate.ToString">
            <summary>
            Returns the string representation of the LocalDate in yyyy-MM-dd format
            </summary>
        </member>
        <member name="T:Dse.LocalTime">
            <summary>
            A time without a time-zone in the ISO-8601 calendar system, such as 10:30:05.
            LocalTime is an immutable date-time object that represents a time, often viewed as hour-minute-second. 
            Time is represented to nanosecond precision. For example, the value "13:45.30.123456789" can be stored in a LocalTime.
            </summary>
        </member>
        <member name="P:Dse.LocalTime.TotalNanoseconds">
            <summary>
            Gets the number of nanoseconds since midnight.
            </summary>
        </member>
        <member name="P:Dse.LocalTime.Hour">
            <summary>
            Gets the hour component of the time represented by the current instance, a number from 0 to 23.
            </summary>
        </member>
        <member name="P:Dse.LocalTime.Minute">
            <summary>
            Gets the minute component of the time represented by the current instance, a number from 0 to 59.
            </summary>
        </member>
        <member name="P:Dse.LocalTime.Second">
            <summary>
            Gets the second component of the time represented by the current instance, a number from 0 to 59.
            </summary>
        </member>
        <member name="P:Dse.LocalTime.Nanoseconds">
            <summary>
            Gets the nanoseconds component of the time represented by the current instance, a number from 0 to 999,999,999.
            </summary>
        </member>
        <member name="M:Dse.LocalTime.#ctor(System.Int64)">
            <summary>
            Creates a new instance based on nanoseconds since midnight.
            </summary>
            <param name="totalNanoseconds">Nanoseconds since midnight. Valid values are in the range 0 to 86399999999999.</param>
        </member>
        <member name="M:Dse.LocalTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance based on the specified hour, minutes, seconds, millis and nanoseconds.
            </summary>
            <param name="hour">A number between 0 and 23 representing the hour portion of the time</param>
            <param name="minute">A number between 0 and 59 representing the minutes portion of the time</param>
            <param name="second">A number between 0 and 59 representing the seconds portion of the time</param>
            <param name="nanosecond">A number between 0 and 999,999,999  representing the seconds portion of the time</param>
        </member>
        <member name="M:Dse.LocalTime.Parse(System.String)">
            <summary>
            Creates a new <see cref="T:Dse.LocalTime"/> instance based on the string representation.
            </summary>
        </member>
        <member name="T:Dse.Logger">
            <summary>
            Represents a driver Logger
            </summary>
        </member>
        <member name="T:Dse.Logger.ILoggerHandler">
            <summary>
            Represents the actual logger
            </summary>
        </member>
        <member name="M:Dse.M3PToken.M3PTokenFactory.Murmur(System.Byte[])">
            <summary>
            Murmur hash it
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dse.Mapping.AppliedInfo`1">
            <summary>
            When using Lightweight transactions, it provides information whether the change was applied or not.
            </summary>
        </member>
        <member name="P:Dse.Mapping.AppliedInfo`1.Applied">
            <summary>
            Determines if the change was applied.
            </summary>
        </member>
        <member name="P:Dse.Mapping.AppliedInfo`1.Existing">
            <summary>
            Gets or sets the existing data that prevented
            </summary>
        </member>
        <member name="M:Dse.Mapping.AppliedInfo`1.#ctor(System.Boolean)">
            <summary>
            Creates a new instance marking the change as applied 
            </summary>
        </member>
        <member name="M:Dse.Mapping.AppliedInfo`1.#ctor(`0)">
            <summary>
            Creates a new instance marking the change as not applied and provides information about the existing data.
            </summary>
            <param name="existing"></param>
        </member>
        <member name="M:Dse.Mapping.AppliedInfo`1.FromRowSet(Dse.Mapping.MapperFactory,System.String,Dse.RowSet)">
            <summary>
            Adapts a LWT RowSet and returns a new AppliedInfo
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.AttributeBasedColumnDefinition">
            <summary>
            A column definition that uses attributes on the field/property to get its settings.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.AttributeBasedColumnDefinition.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Creates a new column definition for the field specified using any attributes on the field to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.AttributeBasedColumnDefinition.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new column definition for the property specified using any attributes on the property to determine mapping configuration.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.AttributeBasedColumnDefinition.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines if the member has an attribute applied
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.AttributeBasedTypeDefinition">
            <summary>
            A type definition that uses attributes on the class to determine its settings.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.AttributeBasedTypeDefinition.#ctor(System.Type)">
            <summary>
            Creates a new TypeDefinition for the POCO Type specified using any attributes on the class to determine mappings.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.ClusteringKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Clustering Key
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.ClusteringKeyAttribute.ClusteringSortOrder">
            <summary>
            Gets or sets the clustering order
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.ClusteringKeyAttribute.Index">
            <summary>
            Index of the clustering key, relative to the other clustering keys
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.ClusteringKeyAttribute.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.ColumnAttribute">
            <summary>
            Used on a POCO property of field.  Can be used to override the column name in the database that property or field maps to.
            When the <see cref="P:Dse.Mapping.Attributes.TableAttribute.ExplicitColumns"/> is set, this attribute also indicates that a property or field should be
            mapped.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.ColumnAttribute.Name">
            <summary>
            The column name in the database this property or field maps to.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.ColumnAttribute.Type">
            <summary>
            Used to override the Type of the column in the database for INSERTs/UPDATEs.  The data in the property/field this attribute is 
            applied to will be converted to this Type for INSERTs/UPDATEs.  If null, the same Type of the property/field will be used
            instead.  (NOTE: This does NOT affect the Type when fetching/SELECTing data from the database.)
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            Specifies the name of the column in the database to use for this property/field.  If the <see cref="P:Dse.Mapping.Attributes.TableAttribute.ExplicitColumns"/>
            is used on the POCO, also tells the mapper that this column should be included when mapping.
            </summary>
            <param name="name">The name of the column in the database to map this property or field to.</param>
        </member>
        <member name="M:Dse.Mapping.Attributes.ColumnAttribute.#ctor">
            <summary>
            Used with the <see cref="P:Dse.Mapping.Attributes.TableAttribute.ExplicitColumns"/>, indicates this property should be mapped and that the column name
            is the same as the property or field name.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.CounterAttribute">
            <summary>
            Indicates that the property or field is a counter column
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.FrozenAttribute">
            <summary>
            Indicates that the property or field is Frozen.
            Only valid for collections, tuples, and user-defined types.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.FrozenKeyAttribute">
            <summary>
            Indicates that the property or field represents a column which key is frozen.
            Only valid for maps and sets.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.FrozenValueAttribute">
            <summary>
            Indicates that the property or field represents a column which value is frozen.
            Only valid for maps and lists.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.IgnoreAttribute">
            <summary>
            Tells the mapper to ignore mapping this property.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.PartitionKeyAttribute">
            <summary>
            Indicates that the property or field is part of the Partition Key
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.PartitionKeyAttribute.Index">
            <summary>
            The index of the key, relative to the other partition keys.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.PartitionKeyAttribute.#ctor(System.Int32)">
            <summary>
            Specify the primary key column names (in order) for the table.
            </summary>
            <param name="index">The index of the key, relative to the other partition keys.</param>
        </member>
        <member name="T:Dse.Mapping.Attributes.SecondaryIndexAttribute">
            <summary>
            Determines that there is a secondary index defined for the column
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.StaticColumnAttribute">
            <summary>
            Indicates that the property or field is a static column in Cassandra
            </summary>
        </member>
        <member name="T:Dse.Mapping.Attributes.TableAttribute">
            <summary>
            Used to specify the table a POCO maps to.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.TableAttribute.Name">
            <summary>
            The table name.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.TableAttribute.CompactStorage">
            <summary>
            Determines if the table is defined with COMPACT STORAGE
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.TableAttribute.AllowFiltering">
            <summary>
            Determines if all the queries generated for this table uses ALLOW FILTERING option
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.TableAttribute.CaseSensitive">
            <summary>
            If the table identifiers are case sensitive (defaults to false)
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.TableAttribute.Keyspace">
            <summary>
            Gets or sets the keyspace name. 
            Use only if the table you are mapping is in a different keyspace than the current <see cref="T:Dse.ISession"/>.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Attributes.TableAttribute.ExplicitColumns">
            <summary>
            Determines if it should only map properties/fields on the POCO that have a <see cref="T:Dse.Mapping.Attributes.ColumnAttribute"/>
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.TableAttribute.#ctor">
            <summary>
            Specifies the table the POCO maps to.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Attributes.TableAttribute.#ctor(System.String)">
            <summary>
            Specifies the table a POCO maps to.
            </summary>
            <param name="tableName">The name of the table to map this POCO to.</param>
        </member>
        <member name="T:Dse.Mapping.ColumnMap">
            <summary>
            A class for defining how a property or field on a POCO is mapped to a column via a fluent-style interface.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.#ctor(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Creates a new ColumnMap for the property/field specified by the MemberInfo.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.Ignore">
            <summary>
            Tells the mapper to ignore this property/field when mapping.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.WithName(System.String)">
            <summary>
            Tells the mapper to use the column name specified when mapping the property/field.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.WithDbType(System.Type)">
            <summary>
            Tells the mapper to convert the data in the property or field to the Type specified when doing an INSERT or UPDATE (i.e. the
            column type in Cassandra).  (NOTE: This does NOT affect the Type when fetching/SELECTing data from the database.)
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.WithDbType``1">
            <summary>
            Tells the mapper to convert the data in the property or field to Type T when doing an INSERT or UPDATE (i.e. the
            column type in Cassandra).  (NOTE: This does NOT affect the Type when fetching/SELECTing data from the database.)
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.WithSecondaryIndex">
            <summary>
            Tells the mapper that this column is defined also as a secondary index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.AsCounter">
            <summary>
            Tells the mapper that this is a counter column
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.AsStatic">
            <summary>
            Tells the mapper that this is a static column
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.AsFrozen">
            <summary>
            Tells the mapper that the column type is frozen.
            Only valid for collections, tuples, and user-defined types. For example: frozen&lt;address&gt;
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.WithFrozenKey">
            <summary>
            Tells the mapper that the key of the column type is frozen.
            Only valid for maps and sets, for example: map&lt;frozen&lt;tuple&lt;text, text&gt;&gt;, uuid&gt; .
            </summary>
        </member>
        <member name="M:Dse.Mapping.ColumnMap.WithFrozenValue">
            <summary>
            Tells the mapper that the value of the column type is frozen.
            Only valid for maps and lists, for example: map&lt;uuid, frozen&lt;tuple&lt;text, text&gt;&gt;&gt; .
            </summary>
        </member>
        <member name="T:Dse.Mapping.Cql">
            <summary>
            Represents a CQL statement and its arguments.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Cql.Statement">
            <summary>
            The CQL string.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Cql.Arguments">
            <summary>
            Any bind variable values for the CQL string.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Cql.QueryOptions">
            <summary>
            Options that are available on a per-query basis.
            </summary>
        </member>
        <member name="P:Dse.Mapping.Cql.AutoPage">
            <summary>
            Determines if automatic paging is enabled. Defaults to true.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Cql.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new Cql instance using the CQL string and bind variable values specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Cql.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})">
            <summary>
            Configures any options for execution of this Cql instance.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Cql.New(System.String,System.Object[])">
            <summary>
            Creates a new CQL instance from the CQL statement and parameters specified.
            </summary>
        </member>
        <member name="T:Dse.Mapping.CqlBatch">
            <summary>
            A batch of CQL statements.
            </summary>
        </member>
        <member name="T:Dse.Mapping.CqlQueryOptions">
            <summary>
            Represents options available on a per-query basis.
            </summary>
        </member>
        <member name="F:Dse.Mapping.CqlQueryOptions.None">
            <summary>
            An empty instance of CqlQueryOptions (i.e. no options are set).
            </summary>
        </member>
        <member name="P:Dse.Mapping.CqlQueryOptions.NoPrepare">
            <summary>
            Whether or not to use a PreparedStatement when executing the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.SetConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the consistency level to be used when executing the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.EnableTracing">
            <summary>
            Enables tracing for the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.DisableTracing">
            <summary>
            Disables tracing for the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.SetPageSize(System.Int32)">
            <summary>
            Sets the page size for automatic paging for the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.SetPagingState(System.Byte[])">
            <summary>
            Sets the token representing the page state for the query.
            Use <c>null</c> to get the first page of results.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.SetRetryPolicy(Dse.IRetryPolicy)">
            <summary>
            Sets the retry policy for the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.SetSerialConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the serial consistency level for execution of the query.  (NOTE: This only applies to queries using lightweight
            transactions -- LWT).
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.DoNotPrepare">
            <summary>
            Specifies that a PreparedStatement should not be used for executing the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.SetTimestamp(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the timestamp for the query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.CopyOptionsToStatement(Dse.IStatement)">
            <summary>
            Copies any options set on this Cql instance to the statement provided.
            </summary>
        </member>
        <member name="M:Dse.Mapping.CqlQueryOptions.New">
            <summary>
            Creates a new instance of CqlQueryOptions.
            </summary>
        </member>
        <member name="T:Dse.Mapping.CqlQueryOptions.EmptyQueryOptions">
            <summary>
            Represents no query options.  Copying options to a statement is a no-op.
            </summary>
        </member>
        <member name="T:Dse.Mapping.IColumnDefinition">
            <summary>
            A definition for how a property/field maps to a POCO.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.MemberInfo">
            <summary>
            The MemberInfo for the property or field.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.MemberInfoType">
            <summary>
            The Type of the property or field (i.e. FieldInfo.FieldType or PropertyInfo.PropertyType).
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.ColumnName">
            <summary>
            The name of the column in the database that this property/field maps to.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.ColumnType">
            <summary>
            The data type of the column in C* for inserting/updating data.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.Ignore">
            <summary>
            Whether the property/field should be ignored when mapping.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.IsExplicitlyDefined">
            <summary>
            Whether or not this column has been explicitly defined (for use when TypeDefinition.ExplicitColumns is true).
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.SecondaryIndex">
            <summary>
            Determines if there is a secondary index defined for this column
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.IsCounter">
            <summary>
            Determines if this column is a counter column
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.IsStatic">
            <summary>
            Determines if this column is a static column
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.IsFrozen">
            <summary>
            Determines if the column is frozen.
            Only valid for collections, tuples, and user-defined types. For example: frozen&lt;address&gt;
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.HasFrozenKey">
            <summary>
            Determines if the key of the column type is frozen.
            Only valid for maps and sets, for example: map&lt;frozen&lt;tuple&lt;text, text&gt;&gt;, uuid&gt; .
            </summary>
        </member>
        <member name="P:Dse.Mapping.IColumnDefinition.HasFrozenValue">
            <summary>
            Determines if the value of the column type is frozen.
            Only valid for maps and lists, for example: map&lt;uuid, frozen&lt;tuple&lt;text, text&gt;&gt;&gt; .
            </summary>
        </member>
        <member name="T:Dse.Mapping.ICqlBatch">
            <summary>
            Represents a batch of CQL statements.  Use the write methods (Insert, Update, Delete, etc.) to add statements to the batch.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ICqlBatch.Statements">
            <summary>
            The statements in the batch.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ICqlBatch.BatchType">
            <summary>
            The type of batch to use.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ICqlBatch.Options">
            <summary>
            The execution options to use.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})">
            <summary>
            Configures any individual option for this instance.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlBatch.ConvertCqlArgument``2(``0)">
            <summary>
            Allows you to convert an argument/bind variable value being used in a CQL statement using the same converters that are being used by the client
            internally, including any user-defined conversions if you configured them.  Will convert a value of Type <typeparamref name="TValue"/> to a value of
            Type <typeparamref name="TDatabase"/> or throw an InvalidOperationException if no converter is available.
            </summary>
            <typeparam name="TValue">The original Type of the value.</typeparam>
            <typeparam name="TDatabase">The Type expected by Cassandra to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Dse.Mapping.ICqlBatch.InsertIfNotExists``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra if not exists.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlBatch.InsertIfNotExists``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra if not exists.
            </summary>
        </member>
        <member name="T:Dse.Mapping.ICqlQueryAsyncClient">
            <summary>
            A client capable of querying (reading) POCOs from a Cassandra cluster.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FetchAsync``1(Dse.Mapping.CqlQueryOptions)">
            <summary>
            Gets a list of all T from Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FetchAsync``1(System.String,System.Object[])">
            <summary>
            Gets a list of T from Cassandra using the CQL statement and parameter values specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FetchAsync``1(Dse.Mapping.Cql)">
            <summary>
            Gets a list of T from Cassandra using the CQL statement specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FetchPageAsync``1(Dse.Mapping.Cql)">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FetchPageAsync``1(Dse.Mapping.CqlQueryOptions)">
            <summary>
            Gets a paged list of T results from Cassandra using the CQL statement specified.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FetchPageAsync``1(System.Int32,System.Byte[],System.String,System.Object[])">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
            <param name="pageSize">Amount of items to return</param>
            <param name="pagingState">The token representing the state of the result page. To get the first page, use a null value.</param>
            <param name="query">Cql query</param>
            <param name="args">Query parameters</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.SingleAsync``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will throw if
            no records or more than one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.SingleAsync``1(Dse.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will throw if no records or more than one
            record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.SingleOrDefaultAsync``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T if no records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.SingleOrDefaultAsync``1(Dse.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will return the default value of T if no
            records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FirstAsync``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will throw if no
            records are returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FirstAsync``1(Dse.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL specified.  Will throw if no records are returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FirstOrDefaultAsync``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T is no records are found.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryAsyncClient.FirstOrDefaultAsync``1(Dse.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL specified.  Will return the default value of T if no records
            are found.
            </summary>
        </member>
        <member name="T:Dse.Mapping.ICqlQueryClient">
            <summary>
            The contract for synchronous read operations.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.Fetch``1(Dse.Mapping.CqlQueryOptions)">
            <summary>
            Gets a list of all T from Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.Fetch``1(System.String,System.Object[])">
            <summary>
            Gets a list of T from Cassandra using the CQL statement and parameter values specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.Fetch``1(Dse.Mapping.Cql)">
            <summary>
            Gets a list of T from Cassandra using the CQL statement specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.FetchPage``1(Dse.Mapping.Cql)">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.FetchPage``1(Dse.Mapping.CqlQueryOptions)">
            <summary>
            Gets a paged list of T results from Cassandra using the CQL statement specified.
            Suitable for manually page through all the results of a query.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.FetchPage``1(System.Int32,System.Byte[],System.String,System.Object[])">
            <summary>
            Gets a paged list of T results from Cassandra.
            Suitable for manually page through all the results of a query.
            </summary>
            <param name="pageSize">Amount of items to return</param>
            <param name="pagingState">The token representing the state of the result page. To get the first page, use a null value.</param>
            <param name="query">Cql query</param>
            <param name="args">Query parameters</param>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.Single``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will throw if
            no records or more than one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.Single``1(Dse.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will throw if no records or more than
            one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
            Gets a single T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T if no records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.SingleOrDefault``1(Dse.Mapping.Cql)">
            <summary>
            Gets a single T from Cassandra using the CQL statement specified.  Will return the default value of T if
            no records are found.  Will throw if more than one record is returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.First``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will throw if no
            records are returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.First``1(Dse.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL statement specified.  Will throw if no records are returned.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
            Gets the first T from Cassandra using the CQL statement and parameter values specified.  Will return the
            default value of T is no records are found.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlQueryClient.FirstOrDefault``1(Dse.Mapping.Cql)">
            <summary>
            Gets the first T from Cassandra using the CQL statement specified.  Will return the default value of T if
            no records are found.
            </summary>
        </member>
        <member name="T:Dse.Mapping.ICqlWriteAsyncClient">
            <summary>
            The contract for Async write operations.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.InsertAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.InsertAsync``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT 
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.InsertAsync``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT 
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="ttl">Time to live (in seconds) for the inserted values. If set, the inserted values are automatically removed
            from the database after the specified time.</param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.UpdateAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Updates the POCO specified in Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.UpdateAsync``1(System.String,System.Object[])">
            <summary>
            Updates the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "UPDATE tablename " to the CQL
            string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
            <typeparam name="T">The POCO Type being updated.</typeparam>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.UpdateAsync``1(Dse.Mapping.Cql)">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified.  Prepends "UPDATE tablename" to the CQL statement you specify,
            getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.DeleteAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Deletes the specified POCO from Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.DeleteAsync``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "DELETE FROM tablname " to
            the CQL string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.DeleteAsync``1(Dse.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL statement specified.  Prepends "DELETE FROM tablename " to the CQL statement you
            specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.ExecuteAsync(System.String,System.Object[])">
            <summary>
            Executes an arbitrary CQL string with the bind variable values specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteAsyncClient.ExecuteAsync(Dse.Mapping.Cql)">
            <summary>
            Executes an arbitrary CQL statement.
            </summary>
        </member>
        <member name="T:Dse.Mapping.ICqlWriteClient">
            <summary>
            The contract for synchronous write operations.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Insert``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Insert``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT 
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Insert``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT 
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="queryOptions">Optional query options</param>
            <param name="ttl">Time to live (in seconds) for the inserted values. If set, the inserted values are automatically removed
            from the database after the specified time.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Update``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Updates the POCO specified in Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Update``1(System.String,System.Object[])">
            <summary>
            Updates the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "UPDATE tablename " to the CQL
            string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
            <typeparam name="T">The POCO Type being updated.</typeparam>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Update``1(Dse.Mapping.Cql)">
            <summary>
            Updates the table for the POCO type specified (T) using the CQL statement specified.  Prepends "UPDATE tablename" to the CQL statement you specify,
            getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Delete``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Deletes the specified POCO from Cassandra.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Delete``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string and bind variable values specified.  Prepends "DELETE FROM tablname " to
            the CQL string you specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Delete``1(Dse.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string specified.  Prepends "DELETE FROM tablename " to the CQL statement you
            specify, getting the tablename appropriately from the POCO Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Execute(System.String,System.Object[])">
            <summary>
            Executes an arbitrary CQL string with the bind variable values specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ICqlWriteClient.Execute(Dse.Mapping.Cql)">
            <summary>
            Executes the arbitrary CQL statement specified.
            </summary>
        </member>
        <member name="T:Dse.Mapping.IMapper">
            <summary>
            A client for creating, updating, deleting, and reading POCOs from a Cassandra cluster.
            </summary>
            <seealso cref="T:Dse.Mapping.Mapper"/>
        </member>
        <member name="M:Dse.Mapping.IMapper.CreateBatch">
            <summary>
            Creates a new batch.
            <para>
            To set the consistency level, timestamp and other batch options, use
            <see cref="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})"/>. Individual options for each
            query within the batch will be ignored.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.CreateBatch(Dse.BatchType)">
            <summary>
            Creates a new batch.
            <para>
            To set the consistency level, timestamp and other batch options, use
            <see cref="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})"/>. Individual options for each
            query within the batch will be ignored.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.Execute(Dse.Mapping.ICqlBatch)">
            <summary>
            Executes the batch specfied synchronously.
            </summary>
            <remarks>
            To set the consistency level, timestamp and other batch options, use
            <see cref="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})"/>. Individual options for each
            query within the batch will be ignored.
            </remarks>
        </member>
        <member name="M:Dse.Mapping.IMapper.ExecuteAsync(Dse.Mapping.ICqlBatch)">
            <summary>
            Executes the batch specified asynchronously.
            </summary>
            <remarks>
            To set the consistency level, timestamp and other batch options, use
            <see cref="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})"/>. Individual options for each
            query within the batch will be ignored.
            </remarks>
        </member>
        <member name="M:Dse.Mapping.IMapper.ConvertCqlArgument``2(``0)">
            <summary>
            Allows you to convert an argument/bind variable value being used in a CQL statement using the same converters that are being used by the client
            internally, including any user-defined conversions if you configured them.  Will convert a value of Type <typeparamref name="TValue"/> to a value of
            Type <typeparamref name="TDatabase"/> or throw an InvalidOperationException if no converter is available.
            </summary>
            <typeparam name="TValue">The original Type of the value.</typeparam>
            <typeparam name="TDatabase">The Type expected by Cassandra to convert to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Dse.Mapping.IMapper.DeleteIf``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string specified and query parameters specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.DeleteIf``1(Dse.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the Cql query specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.DeleteIfAsync``1(System.String,System.Object[])">
            <summary>
            Deletes from the table for the POCO type specified (T) using the CQL string specified and query parameters specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.DeleteIfAsync``1(Dse.Mapping.Cql)">
            <summary>
            Deletes from the table for the POCO type specified (T) using the Cql query specified.  
            Prepends "DELETE FROM tablename " to the CQL statement you specify, getting the tablename appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.InsertIfNotExistsAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.InsertIfNotExistsAsync``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.IMapper.InsertIfNotExistsAsync``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="ttl">Time to live (in seconds) for the inserted values. If set, the inserted values are automatically removed
            from the database after the specified time.</param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.IMapper.InsertIfNotExists``1(``0,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.InsertIfNotExists``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.IMapper.InsertIfNotExists``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <summary>
            Inserts the specified POCO in Cassandra, if not exists.
            </summary>
            <param name="poco">The POCO instance</param>
            <param name="insertNulls">
            Determines if the query must be generated using <c>NULL</c> values for <c>null</c> POCO
            members. 
            <para>
            Use <c>false</c> if you don't want to consider <c>null</c> values for the INSERT
            operation (recommended).
            </para> 
            <para>
            Use <c>true</c> if you want to override all the values in the table,
            generating tombstones for null values.
            </para>
            </param>
            <param name="ttl">Time to live (in seconds) for the inserted values. If set, the inserted values are automatically removed
            from the database after the specified time.</param>
            <param name="queryOptions">Optional query options</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.IMapper.UpdateIf``1(Dse.Mapping.Cql)">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.UpdateIf``1(System.String,System.Object[])">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.UpdateIfAsync``1(Dse.Mapping.Cql)">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.UpdateIfAsync``1(System.String,System.Object[])">
            <summary>
            Updates the table for the poco type specified (T) using the CQL statement specified, using lightweight transactions.
            Prepends "UPDATE tablename" to the CQL statement you specify, getting the table name appropriately from the POCO Type T.
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Mapping.IMapper.ExecuteConditionalAsync``1(Dse.Mapping.ICqlBatch)">
            <summary>
            Executes a batch that contains a Lightweight transaction. 
            </summary>
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            <remarks>
            To set the consistency level, timestamp and other batch options, use
            <see cref="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})"/>. Individual options for each
            query within the batch will be ignored.
            </remarks>
        </member>
        <member name="M:Dse.Mapping.IMapper.ExecuteConditional``1(Dse.Mapping.ICqlBatch)">
            <summary>
            Executes a batch that contains a Lightweight transaction. 
            </summary>
            <para>
            Returns information whether it was applied or not. If it was not applied, it returns details of the existing values.
            </para>
            <remarks>
            To set the consistency level, timestamp and other batch options, use
            <see cref="M:Dse.Mapping.ICqlBatch.WithOptions(System.Action{Dse.Mapping.CqlQueryOptions})"/>. Individual options for each
            query within the batch will be ignored.
            </remarks>
        </member>
        <member name="T:Dse.Mapping.IPage`1">
            <summary>
            Represents the result of a paged query, returned by manually paged query executions.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IPage`1.CurrentPagingState">
            <summary>
            Returns a token representing the state used to retrieve this results.
            </summary>
        </member>
        <member name="P:Dse.Mapping.IPage`1.PagingState">
            <summary>
            Returns a token representing the state to retrieve the next page of results.
            </summary>
        </member>
        <member name="T:Dse.Mapping.ITypeDefinition">
            <summary>
            A definition for how to map a POCO.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.PocoType">
            <summary>
            The Type of the POCO.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.TableName">
            <summary>
            The name of the table to map the POCO to.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.KeyspaceName">
            <summary>
            The name of the keyspace where the table is defined.
            When the keyspace name is not null, the table name for the query generated will be fully qualified (ie: keyspace.tablename)
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.ExplicitColumns">
            <summary>
            Whether or not this POCO should only have columns explicitly defined mapped.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.PartitionKeys">
            <summary>
            Gets the partition key columns of the table.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.ClusteringKeys">
            <summary>
            Gets the clustering key columns of the table.
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.CaseSensitive">
            <summary>
            Determines if the queries generated using this definition should be case-sensitive
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.CompactStorage">
            <summary>
            Determines if the table is declared with COMPACT STORAGE
            </summary>
        </member>
        <member name="P:Dse.Mapping.ITypeDefinition.AllowFiltering">
            <summary>
            Determines that all queries generated for this table can be made allowing server side filtering
            </summary>
        </member>
        <member name="M:Dse.Mapping.ITypeDefinition.GetColumnDefinition(System.Reflection.FieldInfo)">
            <summary>
            Gets a column definition for the given field on the POCO.
            </summary>
        </member>
        <member name="M:Dse.Mapping.ITypeDefinition.GetColumnDefinition(System.Reflection.PropertyInfo)">
            <summary>
            Gets a column definition for the given property on the POCO.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Map`1">
            <summary>
            A class for defining how to map a POCO via a fluent-style interface.  The mapping for Type T should be defined in the
            constructor of the sub class.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.#ctor">
            <summary>
            Creates a new fluent mapping definition for POCOs of Type TPoco.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.TableName(System.String)">
            <summary>
            Specifies what table to map the POCO to.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.PartitionKey(System.String[])">
            <summary>
            Specifies the partition key column names for the table using the order provided.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.PartitionKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Specifies the properties/fields on the POCO whose column names are the partition key for the table.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.ClusteringKey(System.String[])">
            <summary>
            Specifies the clustering key column names for the table using the order provided.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.ClusteringKey(System.Tuple{System.String,Dse.Mapping.SortOrder}[])">
            <summary>
            Specifies the Clustering keys with the corresponding clustering order
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.ClusteringKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Dse.Mapping.SortOrder)">
            <summary>
            Specifies a Clustering key with its clustering order
            </summary>
            <param name="column">Expression to select the property or the field</param>
            <param name="order">Clustering order</param>
        </member>
        <member name="M:Dse.Mapping.Map`1.ClusteringKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a Clustering key with unspecified order
            </summary>
            <param name="column">Expression to select the property or the field</param>
        </member>
        <member name="M:Dse.Mapping.Map`1.ExplicitColumns">
            <summary>
            Specifies that when mapping, we should only map columns that are explicitly defined here.  Use the Column method
            to define columns.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.CaseSensitive">
            <summary>
            Specifies that when generating queries, the table and column names identifiers must be quoted. Defaults to false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.Map`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{Dse.Mapping.ColumnMap})">
            <summary>
            Defines options for mapping the column specified.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.KeyspaceName(System.String)">
            <summary>
            Specifies that when mapping, the table name should include the keyspace.
            Use only if the table you are mapping is in a different keyspace than the current <see cref="T:Dse.ISession"/>.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.CompactStorage">
            <summary>
            Specifies that the table is defined as COMPACT STORAGE
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.Map`1.Column``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the mapping for the expression using the default options.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Map`1.GetPropertyOrField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the MemberInfo for the property or field that the expression provided refers to.  Will throw if the Expression does not refer
            to a valid property or field on TPoco.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Mapper">
            <summary>
            The default CQL client implementation which uses the DataStax driver <see cref="T:Dse.ISession"/> provided in the constructor
            for running queries against a Cassandra cluster.
            </summary>
            <seealso cref="T:Dse.Mapping.IMapper"/>
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.#ctor(Dse.ISession,Dse.Mapping.MappingConfiguration)">
            <summary>
            Creates a new instance of the mapper using the configuration provided
            </summary>
            <param name="session">Session to be used to execute the statements</param>
            <param name="config">Mapping definitions for the POCOs</param>
        </member>
        <member name="M:Dse.Mapping.Mapper.#ctor(Dse.ISession)">
            <summary>
            Creates a new instance of the mapper using <see cref="P:Dse.Mapping.MappingConfiguration.Global"/> mapping definitions.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Mapper.ExecuteAsyncAndAdapt``1(Dse.Mapping.Cql,System.Func{Dse.Statement,Dse.RowSet,``0})">
            <summary>
            Executes asynchronously and uses the delegate to adapt the RowSet into the return value.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchAsync``1(Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchPageAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchPageAsync``1(Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchPageAsync``1(System.Int32,System.Byte[],System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.SingleAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.SingleAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.SingleOrDefaultAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.SingleOrDefaultAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FirstAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FirstAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FirstOrDefaultAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FirstOrDefaultAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertAsync``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertAsync``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertIfNotExistsAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertIfNotExistsAsync``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertIfNotExistsAsync``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateIfAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateIfAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteAsync``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.ExecuteAsync(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.ExecuteAsync(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.CreateBatch">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.CreateBatch(Dse.BatchType)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Execute(Dse.Mapping.ICqlBatch)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.ExecuteAsync(Dse.Mapping.ICqlBatch)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteIf``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteIf``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteIfAsync``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.DeleteIfAsync``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Fetch``1(Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Fetch``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Fetch``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchPage``1(Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchPage``1(System.Int32,System.Byte[],System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FetchPage``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Single``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Single``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.SingleOrDefault``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.SingleOrDefault``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.First``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.First``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FirstOrDefault``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.FirstOrDefault``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Insert``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Insert``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Insert``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertIfNotExists``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertIfNotExists``1(``0,System.Boolean,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.InsertIfNotExists``1(``0,System.Boolean,System.Nullable{System.Int32},Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Update``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Update``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Update``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateIf``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.UpdateIf``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Delete``1(``0,Dse.Mapping.CqlQueryOptions)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Delete``1(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Delete``1(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Execute(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.Execute(Dse.Mapping.Cql)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.ExecuteConditionalAsync``1(Dse.Mapping.ICqlBatch)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Mapping.Mapper.ExecuteConditional``1(Dse.Mapping.ICqlBatch)">
            <inheritdoc />
        </member>
        <member name="T:Dse.Mapping.MapperFactory">
            <summary>
            Component capable of getting/creating Func&lt;Row, T&gt; functions that create POCOs of type T from a Cassandra Row.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.GetMapper``1(System.String,Dse.RowSet)">
            <summary>
            Gets a mapper Func that can map from a C* row to the POCO type T for the given statement.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.GetValueCollector``1(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a Func that can collect all the values on a given POCO T and return an object[] of those values in the same
            order as the PocoColumns for T's PocoData.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.CreateMapper``1(Dse.RowSet)">
            <summary>
            Creates a mapper Func for going from a C* Row to a POCO, T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.CreateValueCollector``1(System.Boolean,System.Boolean)">
            <summary>
            Creates a Func that collects all the values from a POCO (of type T) into an object[], with the values being in the array in the
            same order as the POCO's PocoData.Columns collection.
            </summary>
            <param name="primaryKeyValuesOnly">Determines if only the primary key values should be extracted</param>
            <param name="primaryKeyValuesLast">Determines if only the values should contain first the non primary keys and then the primary keys</param>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.CreateMapperForSingleColumnToPoco``1(Dse.RowSet,Dse.Mapping.PocoData)">
            <summary>
            Creates a mapper that flattens a single column's value directly to the "POCO"'s value.  (POCO here most likely being a value type/string/etc.)
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.CreateMapperForPoco``1(Dse.RowSet,Dse.Mapping.PocoData)">
            <summary>
            Creates a mapper Func for a POCO.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.CreateMapperForProjection``1(Dse.RowSet,Dse.Mapping.TypeConversion.NewTypeProjection)">
            <summary>
            Creates a mapper Func for a projection.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.GetExpressionToGetValueFromPoco(System.Linq.Expressions.ParameterExpression,Dse.Mapping.PocoColumn)">
            <summary>
            Gets an Expression that gets the value of a POCO field or property.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.GetExpressionToGetColumnValueFromRow(System.Linq.Expressions.ParameterExpression,Dse.CqlColumn,System.Type)">
            <summary>
            Gets an Expression that represents calling Row.GetValue&lt;T&gt;(columnIndex) and applying any type conversion necessary to
            convert it to the destination type on the POCO.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.TryGetCreateEmptyCollectionExpression(Dse.CqlColumn,System.Type,System.Linq.Expressions.Expression@)">
            <summary>
            Tries to get an Expression that will create an empty collection compatible with the POCO column's type if the type coming from
            the database is a collection type.  Returns true if successful, along with the Expression in an out parameter.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.IsCassandraCollection(Dse.CqlColumn)">
            <summary>
            Returns true if the CqlColumn is a collection type.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MapperFactory.ImplementsCollectionInterface(System.Type)">
            <summary>
            Returns true if the Type implements the ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="T:Dse.Mapping.MappingConfiguration">
            <summary>
            Stores the mapping definitions to be used by the Mapper and Linq components.
            </summary>
        </member>
        <member name="F:Dse.Mapping.MappingConfiguration.GlobalInstance">
            <summary>
            Instance to be used for global mappings. It won't get initialized until the first use.
            </summary>
        </member>
        <member name="P:Dse.Mapping.MappingConfiguration.Global">
            <summary>
            Global mapping definitions to be reused across all the Application Domain.
            </summary>
        </member>
        <member name="P:Dse.Mapping.MappingConfiguration.MapperFactory">
            <summary>
            Retrieves the MapperFactory associated with this configuration instance
            </summary>
        </member>
        <member name="P:Dse.Mapping.MappingConfiguration.StatementFactory">
            <summary>
            Retrieves the StatementFactory associated with this configuration instance
            </summary>
        </member>
        <member name="P:Dse.Mapping.MappingConfiguration.MaxPreparedStatementsThreshold">
            <summary>
            Gets or sets the maximum amount of prepared statements before issuing a logger warning. Defaults to 500.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.#ctor">
            <summary>
            Creates a new instance of MappingConfiguration to store the mapping definitions to be used by the Mapper or Linq components.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.ConvertTypesUsing(Dse.Mapping.TypeConversion.TypeConverter)">
            <summary>
            Configures CqlPoco to use the specified type conversion factory when getting type conversion functions for converting 
            between data types in the database and your POCO objects.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.Define(Dse.Mapping.ITypeDefinition[])">
            <summary>
            Specifies an individual mapping definition.  Usually used along with the <see cref="T:Dse.Mapping.Map`1"/> class which
            allows you to define mappings with a fluent interface.  Will throw if a mapping has already been defined for a
            given POCO Type.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.Define(Dse.Mapping.Mappings[])">
            <summary>
            Specifies collections of <see cref="T:Dse.Mapping.Mappings"/> specified.  Users should sub-class the <see cref="T:Dse.Mapping.Mappings"/>
            class and use the fluent interface there to define mappings for POCOs.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.Define``1">
            <summary>
            Specifies a collection of mappings defined in Type T.  Type T should be a sub-class of <see cref="T:Dse.Mapping.Mappings"/> and
            must have a parameter-less constructor.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.Get``1">
            <summary>
            If defined, returns the mapping for POCO type T, otherwise returns null.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.SetMaxPreparedStatementsThreshold(System.Int32)">
            <summary>
            Sets the maximum amount of prepared statements before issuing a logger warning. Defaults to 500.
            </summary>
        </member>
        <member name="M:Dse.Mapping.MappingConfiguration.Clear">
            <summary>
            Clears all the mapping defined for this instance
            </summary>
        </member>
        <member name="T:Dse.Mapping.Mappings">
            <summary>
            A class for defining how to map multiple POCOs via a fluent-style interface.  Inheritors should use the 
            <see cref="M:Dse.Mapping.Mappings.For``1"/> method inside their constructor to define mappings.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Mappings.#ctor">
            <summary>
            Creates a new collection of mappings.  Inheritors should define all their mappings in the constructor of the sub-class.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Mappings.For``1">
            <summary>
            Adds a mapping for the Poco type specified (TPoco).
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.ColumnName">
            <summary>
            The name of the column in the database.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.ColumnType">
            <summary>
            The data type of the column in the database for use when inserting/updating.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.MemberInfo">
            <summary>
            The MemberInfo for the POCO field/property.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.MemberInfoType">
            <summary>
            The .NET Type of the POCO field/property (i.e. FieldInfo.FieldType or PropertyInfo.PropertyType)
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.SecondaryIndex">
            <summary>
            Determines that there is a secondary index defined for this column
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.IsCounter">
            <summary>
            Determines that it is a counter column
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.IsStatic">
            <summary>
            Determines that it is a static column
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.IsFrozen">
            <summary>
            Determines if the column is frozen.
            Only valid for collections, tuples, and user-defined types. For example: frozen&lt;address&gt;
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.HasFrozenKey">
            <summary>
            Determines if the key of the column type is frozen.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoColumn.HasFrozenValue">
            <summary>
            Determines if the value of the column type is frozen.
            </summary>
        </member>
        <member name="T:Dse.Mapping.PocoData">
            <summary>
            Represents data about a POCO and its mapping to Cassandra Rows in a table.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.PocoType">
            <summary>
            The .NET Type of the POCO this data is for.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.TableName">
            <summary>
            The table name the POCO maps to in C*.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.KeyspaceName">
            <summary>
            When defined, states that all queries generated should include fully qualified table names (ie: keyspace.table)
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.Columns">
            <summary>
            All columns (including PK columns) keyed by their column names and ordered so that the primary key columns are in order last.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.PartitionKeys">
            <summary>
            Gets the partition key columns of the table.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.ClusteringKeys">
            <summary>
            Gets the clustering key columns of the table.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.CaseSensitive">
            <summary>
            Determines if the queries generated using this poco information should be case-sensitive
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.AllowFiltering">
            <summary>
            Determines that all queries generated should allow filtering. Backwards compatibility.
            </summary>
        </member>
        <member name="P:Dse.Mapping.PocoData.MissingPrimaryKeyColumns">
            <summary>
            The column names of any primary key columns that aren't in the Columns collection.  Could indicate a misconfiguration if the POCO
            is going to be used in auto-generated UPDATE/DELETE statements.
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoData.GetNonPrimaryKeyColumns">
            <summary>
            Gets only the PocoColumns from the collection of all columns that are NOT part of the partition or clustering keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.PocoData.GetPrimaryKeyColumns">
            <summary>
            Gets only the PocoColumns from the collection of all columns that are uniquely identifies a cql row.
            First partition and then clustering keys.
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoData.GetColumnByMemberName(System.String)">
            <summary>
            Gets the column information for a given member name
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoData.GetColumnNameByMemberName(System.String)">
            <summary>
            Gets the column name for a given member name
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoData.GetColumnName(System.Reflection.MemberInfo)">
            <summary>
            Gets the column name for a given member
            </summary>
        </member>
        <member name="T:Dse.Mapping.PocoDataFactory">
            <summary>
            Factory responsible for creating PocoData instances, uses AttributeBasedTypeDefinition to create new Poco information in case a definition was not provided.
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoDataFactory.#ctor(Dse.Mapping.Utils.LookupKeyedCollection{System.Type,Dse.Mapping.ITypeDefinition})">
            <summary>
            Creates a new factory responsible of PocoData instances.
            </summary>
            <param name="predefinedTypeDefinitions">Explicitly declared type definitions</param>
        </member>
        <member name="M:Dse.Mapping.PocoDataFactory.AddDefinitionDefault(System.Type,System.Func{Dse.Mapping.ITypeDefinition})">
            <summary>
            Adds a definition to the local state in case no definition was explicitly defined.
            Used when the local default (AttributeBasedTypeDefinition) is not valid for a given type.
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoDataFactory.GetMappableFields(System.Type)">
            <summary>
            Gets any public instance fields that are settable for the given type.
            </summary>
        </member>
        <member name="M:Dse.Mapping.PocoDataFactory.GetMappableProperties(System.Type)">
            <summary>
            Gets any public instance properties for the given type.
            </summary>
        </member>
        <member name="T:Dse.Mapping.ProjectionExpressionVisitor">
            <summary>
            A Linq expression visitor that extracts the projection to allow to be reconstructed from a different origin.
            </summary>
        </member>
        <member name="T:Dse.Mapping.SortOrder">
            <summary>
            Specifies sort order
            </summary>
        </member>
        <member name="T:Dse.Mapping.Statements.CqlGenerator">
            <summary>
            A utility class capable of generating CQL statements for a POCO.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.AddSelect``1(Dse.Mapping.Cql)">
            <summary>
            Adds "SELECT columnlist" and "FROM tablename" to a CQL statement if they don't already exist for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.Escape(System.String,Dse.Mapping.PocoData)">
            <summary>
            Escapes an identier if necessary
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.GenerateInsert``1(System.Boolean,System.Object[],System.Object[]@,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Generates an "INSERT INTO tablename (columns) VALUES (?...)" statement for a POCO of Type T.
            </summary>
            <param name="insertNulls">When set to <c>true</c>, it will only generate columns which POCO members are not null</param>
            <param name="pocoValues">The parameters of this query, it will only be used if <c>insertNulls</c> is set to <c>true</c></param>
            <param name="queryParameters">The parameters for this query. When insertNulls is <c>true</c>, the <c>pocoValues</c>
            is the <c>queryParameters</c>, when set to <c>false</c> the <c>queryParameters do not include <c>null</c> values</c></param>
            <param name="ifNotExists">Determines if it should add the IF NOT EXISTS at the end of the query</param>
            <param name="ttl">Amount of seconds for the data to expire (TTL)</param>
            <param name="timestamp">Data timestamp</param>
            <param name="tableName">Table name. If null, it will use table name based on Poco Data</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.GenerateUpdate``1">
            <summary>
            Generates an "UPDATE tablename SET columns = ? WHERE pkColumns = ?" statement for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.PrependUpdate``1(Dse.Mapping.Cql)">
            <summary>
            Prepends the CQL statement specified with "UPDATE tablename " for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.GenerateDelete``1">
            <summary>
            Generates a "DELETE FROM tablename WHERE pkcolumns = ?" statement for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.PrependDelete``1(Dse.Mapping.Cql)">
            <summary>
            Prepends the CQL statement specified with "DELETE FROM tablename " for a POCO of Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.CqlGenerator.GetCreate(Dse.Serialization.Serializer,Dse.Mapping.PocoData,System.String,System.String,System.Boolean)">
            <summary>
            Gets the CQL queries involved in a table creation (CREATE TABLE, CREATE INDEX)
            </summary>
        </member>
        <member name="T:Dse.Mapping.Statements.StatementFactory">
            <summary>
            Creates statements from CQL that can be executed with the C* driver.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Statements.StatementFactory.GetStatementAsync(Dse.ISession,Dse.Mapping.Cql,System.Nullable{System.Boolean})">
            <summary>
            Given a <see cref="T:Dse.Mapping.Cql"/>, it creates the corresponding <see cref="T:Dse.Statement"/>.
            </summary>
            <param name="session">The current session.</param>
            <param name="cql">The cql query, parameter and options.</param>
            <param name="forceNoPrepare">When defined, it's used to override the CQL options behavior.</param>
        </member>
        <member name="T:Dse.Mapping.TypeConversion.DefaultTypeConverter">
            <summary>
            A default implementation of TypeConversionFactory that doesn't do any user defined conversions.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.DefaultTypeConverter.GetUserDefinedFromDbConverter``2">
            <summary>
            Always returns null.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.DefaultTypeConverter.GetUserDefinedToDbConverter``2">
            <summary>
            Always returns null.
            </summary>
        </member>
        <member name="T:Dse.Mapping.TypeConversion.EnumStringMapper`1">
            <summary>
            A class that maps strings to enum values.  Uses a cache internally to speed lookups.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.EnumStringMapper`1.MapStringToEnum(System.String)">
            <summary>
            Converts a string value to an enum of Type T.
            </summary>
        </member>
        <member name="T:Dse.Mapping.TypeConversion.NewTypeProjection">
            <summary>
            Represents the components to build a expression to create a new instance.
            </summary>
        </member>
        <member name="T:Dse.Mapping.TypeConversion.NullableEnumStringMapper`1">
            <summary>
            Static class for mapping between strings and nullable enums.  Uses a cache internally to speed lookups.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.NullableEnumStringMapper`1.MapStringToEnum(System.String)">
            <summary>
            Converts a string value to a nullable enum value of Type T.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.NullableEnumStringMapper`1.MapEnumToString(`0)">
            <summary>
            Converts a nullable enum value of Type T to a string.
            </summary>
        </member>
        <member name="T:Dse.Mapping.TypeConversion.TypeConverter">
            <summary>
            A factory for retrieving Functions capable of converting between two Types.  To use custom Type conversions, inheritors
            should derive from this class and implement the <see cref="M:Dse.Mapping.TypeConversion.TypeConverter.GetUserDefinedFromDbConverter``2"/> and
            <see cref="M:Dse.Mapping.TypeConversion.TypeConverter.GetUserDefinedToDbConverter``2"/> methods.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.#ctor">
            <summary>
            Creates a new TypeConverter instance.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.ConvertCqlArgument``2(``0)">
            <summary>
            Converts a value of Type <typeparamref name="TValue"/> to a value of Type <typeparamref name="TDatabase"/> using any available converters that would 
            normally be used when converting a value for storage in Cassandra.  If no converter is available, wlll throw an InvalidOperationException.
            </summary>
            <typeparam name="TValue">The value's original Type.</typeparam>
            <typeparam name="TDatabase">The Type expected by the database for the parameter.</typeparam>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.ConvertToDbFromUdtFieldValue(System.Type,System.Type,System.Object)">
            <summary>
            Converts a UDT field value (POCO) to to a destination type value for storage in C*.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.ConvertToUdtFieldFromDbValue(System.Type,System.Type,System.Object)">
            <summary>
            Converts a source type value from the database to a destination type value on a POCO.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.TryGetFromDbConverter(System.Type,System.Type)">
            <summary>
            Gets a Function that can convert a source type value from the database to a destination type value on a POCO.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.TryGetFromDbConverter``2">
            <summary>
            Gets the conversion function from cache or tries to cast.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.GetToDbConverter(System.Type,System.Type)">
            <summary>
            Gets a Function that can convert a source type value on a POCO to a destination type value for storage in C*.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.FindFromDbConverter``2">
            <summary>
            This method is generic because it seems like a good idea to enforce that the abstract method that returns
            a user-defined Func returns one with the correct type parameters, so we'd be invoking that abstract method
            generically via reflection anyway each time.  So we might as well make this method generic and invoke it
            via reflection (it also makes the code for returning the built-in EnumStringMapper func simpler since that
            class is generic).
            </summary>
            <returns>A delegate or null.</returns>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.FindToDbConverter``2">
            <summary>
            See note above on why this is generic.
            </summary>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.GetUserDefinedFromDbConverter``2">
            <summary>
            Gets any user defined conversion functions that can convert a value of type <typeparamref name="TDatabase"/> (coming from Cassandra) to a
            type of <typeparamref name="TPoco"/> (a field or property on a POCO).  Return null if no conversion Func is available.
            </summary>
            <typeparam name="TDatabase">The Type of the source value from Cassandra to be converted.</typeparam>
            <typeparam name="TPoco">The Type of the destination value on the POCO.</typeparam>
            <returns>A Func that can convert between the two types or null if one is not available.</returns>
        </member>
        <member name="M:Dse.Mapping.TypeConversion.TypeConverter.GetUserDefinedToDbConverter``2">
            <summary>
            Gets any user defined conversion functions that can convert a value of type <typeparamref name="TPoco"/> (coming from a property/field on a
            POCO) to a type of <typeparamref name="TDatabase"/> (the Type expected by Cassandra for the database column).  Return null if no conversion
            Func is available.
            </summary>
            <typeparam name="TPoco">The Type of the source value from the POCO property/field to be converted.</typeparam>
            <typeparam name="TDatabase">The Type expected by C* for the database column.</typeparam>
            <returns>A Func that can converter between the two Types or null if one is not available.</returns>
        </member>
        <member name="T:Dse.Mapping.Utils.EnumerableExtensions">
            <summary>
            Extension methods to IEnumerable&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Dse.Mapping.Utils.EnumerableExtensions.ToCommaDelimitedString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts an IEnumerable&lt;string&gt; to a comma-delimited string.
            </summary>
        </member>
        <member name="T:Dse.Mapping.Utils.LookupKeyedCollection`2">
            <summary>
            A concrete implementation of System.Collections.ObjectModel.KeyedCollection which acts as a List/Dictionary hybrid where
            the Dictionary key is embedded in the item and list order is preserved.
            </summary>
        </member>
        <member name="T:Dse.MaterializedViewMetadata">
            <summary>
            Describes a materialized view in Cassandra. 
            </summary>
        </member>
        <member name="P:Dse.MaterializedViewMetadata.WhereClause">
            <summary>
            Gets the view where clause
            </summary>
        </member>
        <member name="T:Dse.Metadata">
            <summary>
             Keeps metadata on the connected cluster, including known nodes and schema
             definitions.
            </summary>
        </member>
        <member name="P:Dse.Metadata.ClusterName">
            <summary>
             Returns the name of currently connected cluster.
            </summary>
            <returns>the Cassandra name of currently connected cluster.</returns>
        </member>
        <member name="P:Dse.Metadata.Configuration">
            <summary>
            Gets the configuration associated with this instance.
            </summary>
        </member>
        <member name="P:Dse.Metadata.ControlConnection">
            <summary>
            Control connection to be used to execute the queries to retrieve the metadata
            </summary>
        </member>
        <member name="M:Dse.Metadata.AllHosts">
            <summary>
             Returns all known hosts of this cluster.
            </summary>
            <returns>collection of all known hosts of this cluster.</returns>
        </member>
        <member name="M:Dse.Metadata.GetReplicas(System.String,System.Byte[])">
            <summary>
            Get the replicas for a given partition key and keyspace
            </summary>
        </member>
        <member name="M:Dse.Metadata.GetKeyspace(System.String)">
            <summary>
             Returns metadata of specified keyspace.
            </summary>
            <param name="keyspace"> the name of the keyspace for which metadata should be
             returned. </param>
            <returns>the metadata of the requested keyspace or <c>null</c> if
             <c>* keyspace</c> is not a known keyspace.</returns>
        </member>
        <member name="M:Dse.Metadata.GetKeyspaces">
            <summary>
             Returns a collection of all defined keyspaces names.
            </summary>
            <returns>a collection of all defined keyspaces names.</returns>
        </member>
        <member name="M:Dse.Metadata.GetTables(System.String)">
            <summary>
             Returns names of all tables which are defined within specified keyspace.
            </summary>
            <param name="keyspace">the name of the keyspace for which all tables metadata should be
             returned.</param>
            <returns>an ICollection of the metadata for the tables defined in this
             keyspace.</returns>
        </member>
        <member name="M:Dse.Metadata.GetTable(System.String,System.String)">
            <summary>
             Returns TableMetadata for specified table in specified keyspace.
            </summary>
            <param name="keyspace">name of the keyspace within specified table is defined.</param>
            <param name="tableName">name of table for which metadata should be returned.</param>
            <returns>a TableMetadata for the specified table in the specified keyspace.</returns>
        </member>
        <member name="M:Dse.Metadata.GetMaterializedView(System.String,System.String)">
            <summary>
             Returns the view metadata for the provided view name in the keyspace.
            </summary>
            <param name="keyspace">name of the keyspace within specified view is defined.</param>
            <param name="name">name of view.</param>
            <returns>a MaterializedViewMetadata for the view in the specified keyspace.</returns>
        </member>
        <member name="M:Dse.Metadata.GetUdtDefinition(System.String,System.String)">
            <summary>
            Gets the definition associated with a User Defined Type from Cassandra
            </summary>
        </member>
        <member name="M:Dse.Metadata.GetUdtDefinitionAsync(System.String,System.String)">
            <summary>
            Gets the definition associated with a User Defined Type from Cassandra
            </summary>
        </member>
        <member name="M:Dse.Metadata.GetFunction(System.String,System.String,System.String[])">
            <summary>
            Gets the definition associated with a User Defined Function from Cassandra
            </summary>
            <returns>The function metadata or null if not found.</returns>
        </member>
        <member name="M:Dse.Metadata.GetAggregate(System.String,System.String,System.String[])">
            <summary>
            Gets the definition associated with a aggregate from Cassandra
            </summary>
            <returns>The aggregate metadata or null if not found.</returns>
        </member>
        <member name="M:Dse.Metadata.GetQueryTraceAsync(Dse.QueryTrace)">
            <summary>
            Gets the query trace.
            </summary>
            <param name="trace">The query trace that contains the id, which properties are going to be populated.</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Metadata.RefreshSchema(System.String,System.String)">
            <summary>
            Updates the keyspace and token information
            </summary>
        </member>
        <member name="M:Dse.Metadata.RefreshKeyspaces(System.Boolean)">
            <summary>
            Retrieves the keyspaces, stores the information in the internal state and rebuilds the token map
            </summary>
        </member>
        <member name="M:Dse.Metadata.WaitForSchemaAgreement(Dse.Connection)">
            <summary>
            Waits until that the schema version in all nodes is the same or the waiting time passed.
            This method blocks the calling thread.
            </summary>
        </member>
        <member name="M:Dse.Metadata.SetCassandraVersion(System.Version)">
            <summary>
            Sets the Cassandra version in order to identify how to parse the metadata information
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:Dse.NoneAuthProvider">
            <summary>
             A provider that provides no authentication capability. <p> This is only
             useful as a placeholder when no authentication is to be used. </p>
            </summary>
        </member>
        <member name="T:Dse.OperationState">
            <summary>
            Represents the state of the ongoing operation for the Connection
            </summary>
        </member>
        <member name="P:Dse.OperationState.Header">
            <summary>
            8 byte header of the frame
            </summary>
        </member>
        <member name="P:Dse.OperationState.TimeoutMillis">
            <summary>
            Gets or sets the timeout in milliseconds for the request.
            </summary>
        </member>
        <member name="M:Dse.OperationState.#ctor(System.Action{System.Exception,Dse.Responses.Response})">
            <summary>
            Creates a new operation state with the provided callback
            </summary>
        </member>
        <member name="M:Dse.OperationState.SetTimeout(Dse.Tasks.HashedWheelTimer.ITimeout)">
            <summary>
            Sets the read timeout associated with the request
            </summary>
        </member>
        <member name="M:Dse.OperationState.SetCompleted">
            <summary>
            Marks this operation as completed and returns the callback.
            Note that the returned callback might be a reference to <see cref="F:Dse.OperationState.Noop"/>, as the original callback
            might be already called.
            </summary>
        </member>
        <member name="M:Dse.OperationState.InvokeCallback(System.Exception)">
            <summary>
            Marks this operation as completed and invokes the callback with the exception using the default task scheduler.
            Its safe to call this method multiple times as the underlying callback will be invoked just once.
            </summary>
        </member>
        <member name="M:Dse.OperationState.MarkAsTimedOut(Dse.OperationTimedOutException,System.Action)">
            <summary>
            Marks this operation as timed-out, callbacks with the exception 
            and sets a handler when the response is received
            </summary>
        </member>
        <member name="M:Dse.OperationState.Cancel">
            <summary>
            Removes the context associated with this request, if possible
            </summary>
        </member>
        <member name="M:Dse.OperationState.CallbackMultiple(System.Collections.Generic.IEnumerable{Dse.OperationState},System.Exception)">
            <summary>
            Asynchronously marks the provided operations as completed and invoke the callbacks with the exception.
            </summary>
        </member>
        <member name="T:Dse.OutputFunctionFailure">
            <summary>
            Parses a FunctionFailureException from a function failure error
            </summary>
        </member>
        <member name="T:Dse.OutputReadTimeout">
            <summary>
            Handles the parsing of the read timeout and read failure errors
            </summary>
        </member>
        <member name="M:Dse.OutputReadTimeout.GetReasonsDictionary(Dse.FrameReader,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dse.OutputRows.RowSet">
            <summary>
            Gets or sets the RowSet parsed from the response
            </summary>
        </member>
        <member name="P:Dse.OutputRows.NewResultMetadataId">
            <summary>
            Gets the new_metadata_id or null if not provided.
            </summary>
        </member>
        <member name="M:Dse.OutputRows.ProcessRows(Dse.RowSet,Dse.FrameReader)">
            <summary>
            Process rows and sets the paging event handler
            </summary>
        </member>
        <member name="M:Dse.OutputRows.GetBuffer(System.Int32,Dse.ColumnTypeCode)">
            <summary>
            Reduces allocations by reusing a 16-length buffer for types where is possible
            </summary>
        </member>
        <member name="T:Dse.PlainTextAuthProvider">
            <summary>
            A simple <see cref="T:Dse.IAuthProvider"/> implementation. 
            <para>
            This provider allows to programmatically define authentication information that will then apply to all hosts.
            The PlainTextAuthenticator instances it returns support SASL authentication using the PLAIN mechanism for
            version 2 or above of the CQL native protocol.
            </para>
            </summary>
        </member>
        <member name="M:Dse.PlainTextAuthProvider.#ctor(System.String,System.String)">
            <summary>
             Creates a new simple authentication information provider with the supplied
             credentials.
            </summary>
            <param name="username"> to use for authentication requests </param>
            <param name="password"> to use for authentication requests</param>
        </member>
        <member name="M:Dse.PlainTextAuthProvider.NewAuthenticator(System.Net.IPEndPoint)">
            <summary>
            Uses the supplied credentials and the SASL PLAIN mechanism to login to the server.
            </summary>
            <param name="host"> the Cassandra host with which we want to authenticate</param>
            <returns>
            An Authenticator instance which can be used to perform authentication negotiations on behalf of the client.
            </returns>
            <throws name="SaslException"> if an unsupported SASL mechanism is supplied or
             an error is encountered when initializing the authenticator</throws>
        </member>
        <member name="T:Dse.PlainTextAuthProvider.PlainTextAuthenticator">
            <summary>
             Simple implementation of <link>Authenticator</link> which can perform
             authentication against Cassandra servers configured with
             PasswordAuthenticator.
            </summary>
        </member>
        <member name="T:Dse.AtomicMonotonicTimestampGenerator">
            <summary>
            A timestamp generator that guarantees monotonically increasing timestamps among all client threads
            and logs warnings when timestamps drift in the future.
            </summary>
        </member>
        <member name="F:Dse.AtomicMonotonicTimestampGenerator.DefaultWarningThreshold">
            <summary>
            Default warning threshold in milliseconds.
            </summary>
        </member>
        <member name="F:Dse.AtomicMonotonicTimestampGenerator.DefaultMinLogInterval">
            <summary>
            Default time separation between log events (expressed in milliseconds) in case of multiple log events.
            </summary>
        </member>
        <member name="F:Dse.AtomicMonotonicTimestampGenerator.TicksPerMicrosecond">
            <summary>
            The amount of ticks per microsecond.
            </summary>
        </member>
        <member name="F:Dse.AtomicMonotonicTimestampGenerator.UnixEpochTicks">
            <summary>
            The amount of ticks since 1/1/1 to unix epoch.
            </summary>
        </member>
        <member name="M:Dse.AtomicMonotonicTimestampGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Dse.AtomicMonotonicTimestampGenerator"/>.
            </summary>
            <param name="warningThreshold">
            Determines how far in the future timestamps are allowed to drift before a warning is logged, expressed
            in milliseconds. Default: <c>1000</c>
            </param>
            <param name="minLogInterval">
            In case of multiple log events, it determines the time separation between log events, expressed in 
            milliseconds. Use 0 to disable. Default: <c>1000</c>.
            </param>
        </member>
        <member name="M:Dse.AtomicMonotonicTimestampGenerator.#ctor(System.Int32,System.Int32,Dse.Logger)">
            <summary>
            Internal constructor to allow injection of the logger
            </summary>
        </member>
        <member name="M:Dse.AtomicMonotonicTimestampGenerator.GetTimestamp">
            <summary>
            Retrieves the current system-clock time in expressed microseconds since UNIX epoch.
            </summary>
        </member>
        <member name="M:Dse.AtomicMonotonicTimestampGenerator.Next">
            <inheritdoc />
        </member>
        <member name="T:Dse.AtomicMonotonicWinApiTimestampGenerator">
            <summary>
            A timestamp generator that guarantees monotonically increasing timestamps among all client threads
            and logs warnings when timestamps drift in the future, using Win API high precision
            <see href="https://msdn.microsoft.com/en-us/library/windows/desktop/hh706895.aspx">
            GetSystemTimePreciseAsFileTime()</see> method call available in Windows 8+ and Windows Server 2012+.
            </summary>
        </member>
        <member name="M:Dse.AtomicMonotonicWinApiTimestampGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Dse.AtomicMonotonicTimestampGenerator"/>.
            </summary>
            <param name="warningThreshold">
            Determines how far in the future timestamps are allowed to drift before a warning is logged, expressed
            in milliseconds. Default: <c>1000</c>
            </param>
            <param name="minLogInterval">
            In case of multiple log events, it determines the time separation between log events, expressed in 
            milliseconds. Use 0 to disable. Default: <c>1000</c>.
            </param>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="T:Dse.ConstantReconnectionPolicy">
            <summary>
             A reconnection policy that waits a constant time between each reconnection attempt.
            </summary>
        </member>
        <member name="P:Dse.ConstantReconnectionPolicy.ConstantDelayMs">
            <summary>
            Gets the constant delay used by this reconnection policy. 
            </summary>
        </member>
        <member name="M:Dse.ConstantReconnectionPolicy.#ctor(System.Int64)">
            <summary>
             Creates a reconnection policy that creates with the provided constant wait
             time between reconnection attempts.
            </summary>
            <param name="constantDelayMs"> the constant delay in milliseconds to use.</param>
        </member>
        <member name="M:Dse.ConstantReconnectionPolicy.NewSchedule">
            <summary>
             A new schedule that uses a constant <c>ConstantDelayMs</c> delay between reconnection attempt. 
            </summary>
            
            <returns>the newly created schedule.</returns>
        </member>
        <member name="T:Dse.ConstantSpeculativeExecutionPolicy">
            <summary>
            A <see cref="T:Dse.ISpeculativeExecutionPolicy"/> that schedules a given number of speculative 
            executions, separated by a fixed delay.
            </summary>
        </member>
        <member name="M:Dse.ConstantSpeculativeExecutionPolicy.#ctor(System.Int64,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Dse.ISpeculativeExecutionPolicy"/> that schedules a given
             number of speculative executions, separated by a fixed delay.
            </summary>
            <param name="delay">The constant delay in milliseconds between each speculative execution. Must be strictly positive.</param>
            <param name="maxSpeculativeExecutions">The number of speculative executions. Must be strictly positive.</param>
        </member>
        <member name="T:Dse.DCAwareRoundRobinPolicy">
            <summary>
             A data-center aware Round-robin load balancing policy. <p> This policy
             provides round-robin queries over the node of the local datacenter. It also
             includes in the query plans returned a configurable number of hosts in the
             remote datacenters, but those are always tried after the local nodes. In
             other words, this policy guarantees that no host in a remote datacenter will
             be queried unless no host in the local datacenter can be reached. </p><p> If used
             with a single datacenter, this policy is equivalent to the
             <see cref="T:Dse.RoundRobinPolicy"/> policy, but its GetDatacenter awareness
             incurs a slight overhead so the <see cref="T:Dse.RoundRobinPolicy"/>
             policy could be preferred to this policy in that case.</p>
            </summary>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.#ctor">
            <summary>
            Creates a new datacenter aware round robin policy that auto-discover the local data-center.
            <para>
            If this constructor is used, the data-center used as local will the
            data-center of the first Cassandra node the driver connects to. This
            will always be ok if all the contact points use at <see cref="T:Dse.Cluster"/>
            creation are in the local data-center. If it's not the case, you should
            provide the local data-center name yourself by using one of the other
            constructor of this class.
            </para>
            </summary>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.#ctor(System.String)">
            <summary>
             Creates a new datacenter aware round robin policy given the name of the local
             datacenter. <p> The name of the local datacenter provided must be the local
             datacenter name as known by Cassandra. </p><p> The policy created will ignore all
             remote hosts. In other words, this is equivalent to 
             <c>new DCAwareRoundRobinPolicy(localDc, 0)</c>.</p>
            </summary>
            <param name="localDc"> the name of the local datacenter (as known by Cassandra).</param>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.#ctor(System.String,System.Int32)">
            <summary>
             Creates a new DCAwareRoundRobin policy given the name of the local
             datacenter and that uses the provided number of host per remote
             datacenter as failover for the local hosts.
             <p>
             The name of the local datacenter provided must be the local
             datacenter name as known by Cassandra.</p>
            </summary>
             <param name="localDc"> the name of the local datacenter (as known by
             Cassandra).</param>
             <param name="usedHostsPerRemoteDc"> the number of host per remote
             datacenter that policies created by the returned factory should
             consider. Created policies <c>distance</c> method will return a
             <c>HostDistance.Remote</c> distance for only <c>
             usedHostsPerRemoteDc</c> hosts per remote datacenter. Other hosts
             of the remote datacenters will be ignored (and thus no
             connections to them will be maintained).</param>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.GetLocalHost">
            <summary>
            Gets the current local host.
            If can not be determined, it returns any of the nodes.
            </summary>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.Distance(Dse.Host)">
            <summary>
             Return the HostDistance for the provided host. <p> This policy consider nodes
             in the local datacenter as <c>Local</c>. For each remote datacenter, it
             considers a configurable number of hosts as <c>Remote</c> and the rest
             is <c>Ignored</c>. </p><p> To configure how many host in each remote
             datacenter is considered <c>Remote</c>.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.NewQueryPlan(System.String,Dse.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will always
             try each known host in the local datacenter first, and then, if none of the
             local host is reachable, will try up to a configurable number of other host
             per remote datacenter. The order of the local node in the returned query plan
             will follow a Round-robin algorithm.</p>
            </summary>
            <param name="keyspace">Keyspace on which the query is going to be executed</param>
            <param name="query"> the query for which to build the plan. </param>
            <returns>a new query plan, i.e. an iterator indicating which host to try
             first for querying, which one to use as failover, etc...</returns>
        </member>
        <member name="M:Dse.DCAwareRoundRobinPolicy.GetHosts">
            <summary>
            Gets a tuple containing the list of local and remote nodes
            </summary>
        </member>
        <member name="T:Dse.DefaultRetryPolicy">
            <summary>
             The default retry policy. <p> This policy retries queries in only two cases:
             <ul> <li>On a read timeout, if enough replica replied but data was not
             retrieved.</li> <li>On a write timeout, if we timeout while writting the
             distributed log used by batch statements.</li> </ul> </p> <p> This retry policy is
             conservative in that it will never retry with a different consistency level
             than the one of the initial operation. </p><p> In some cases, it may be
             convenient to use a more aggressive retry policy like
             <link>DowngradingConsistencyRetryPolicy</link>.</p>
            </summary>
        </member>
        <member name="M:Dse.DefaultRetryPolicy.OnReadTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> This method triggers a maximum of one retry, and only if enough replica
             had responded to the read request but data was not retrieved amongst those.
             Indeed, that case usually means that enough replica are alive to satisfy the
             consistency but the coordinator picked a dead one for data retrieval, not
             having detected that replica as dead yet. The reasoning for retrying then is
             that by the time we get the timeout the dead replica will likely have been
             detected as dead and the retry has a high change of success.</p>
            </summary>
            <param name="query"> the original query that timed out. </param>
            <param name="cl"> the original consistency level of the read that timed out.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.Retry(cl)</c> if no retry attempt has yet
             been tried and <c>receivedResponses >= requiredResponses &amp;&amp;
             !dataRetrieved</c>, <c>RetryDecision.Rethrow()</c>
             otherwise.</returns>
        </member>
        <member name="M:Dse.DefaultRetryPolicy.OnWriteTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
             <p> This method triggers a maximum of one retry, and only in the case of a
             <c>WriteType.BATCH_LOG</c> write. The reasoning for the retry in that
             case is that write to the distributed batch log is tried by the coordinator
             of the write against a small subset of all the node alive in the local
             datacenter. Hence, a timeout usually means that none of the nodes in that
             subset were alive but the coordinator hasn't' detected them as dead. By the
             time we get the timeout the dead nodes will likely have been detected as dead
             and the retry has thus a high change of success.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.retry(cl)</c> if no retry attempt has yet
             been tried and <c>writeType == WriteType.BATCH_LOG</c>,
             <c>RetryDecision.rethrow()</c> otherwise.</returns>
        </member>
        <member name="M:Dse.DefaultRetryPolicy.OnUnavailable(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception. <p> This method never retries as a retry on an unavailable
             exception using the same consistency level has almost no change of success.</p>
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Dse.DefaultRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)">
            <summary>
            The default implementation triggers a retry on the next host in the query plan with the same consistency level,
            regardless of the statement's idempotence, for historical reasons.
            </summary>
        </member>
        <member name="T:Dse.DowngradingConsistencyRetryPolicy">
            <summary>
             A retry policy that sometimes retry with a lower consistency level than the
             one initially requested.
             <para>
             <b>BEWARE</b>: This policy may retry queries
             using a lower consistency level than the one initially requested. By doing
             so, it may break consistency guarantees. In other words, if you use this
             retry policy, there are cases (documented below) where a read at
             <c>Quorum</c> may not see a preceding write at
             <c>Quorum</c>. Do not use this policy unless you have understood the
             cases where this can happen and are OK with that. It is also highly
             recommended to always wrap this policy into <see cref="T:Dse.LoggingRetryPolicy"/>
             to log the occurrences of such consistency break. This policy behaves in the
             same way as the <see cref="T:Dse.DefaultRetryPolicy"/> policy, except for the
             following cases:
             </para>
             <list type="bullet">
             <item><description>On a read timeout: if the
             number of replica that responded is greater than one but lower than is
             required by the requested consistency level, the operation is retried at a
             lower consistency level.</description></item>
             <item><description>On a write timeout: if the operation is an
             <c>UNLOGGED_BATCH</c> and at least one replica acknowledged
             the write, the operation is retried at a lower consistency level.
             Furthermore, for other operation, if at least one replica acknowledged the
             write, the timeout is ignored.</description></item>
             <item><description>On an unavailable exception: if at
             least one replica is alive, the operation is retried at a lower consistency
             level.</description></item>
             </list>
             <para>
             The reasoning behind this retry policy is the following
             one. If, based on the information the Cassandra coordinator node returns,
             retrying the operation with the initially requested consistency has a change
             to succeed, do it. Otherwise, if based on these informations we know <b>the
             initially requested consistency level cannot be achieve currently</b>, then:
             </para>
             <list type="bullet">
             <item><description>For writes, ignore the exception (thus silently failing the
             consistency requirement) if we know the write has been persisted on at least
             one replica.</description></item>
             <item><description>For reads, try reading at a lower consistency level
             (thus silently failing the consistency requirement).</description></item>
             </list>
             <para>
             In other
             words, this policy : the idea that if the requested consistency level cannot
             be achieved, the next best thing for writes is to make sure the data is
             persisted, and that reading something is better than reading nothing, even if
             there is a risk of reading stale data.
             </para>
            </summary>
        </member>
        <member name="M:Dse.DowngradingConsistencyRetryPolicy.OnReadTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> This method triggers a maximum of one retry. If less replica responsed
             than required by the consistency level (but at least one replica did
             respond), the operation is retried at a lower consistency level. If enough
             replica responded but data was not retrieve, the operation is retried with
             the initial consistency level. Otherwise, an exception is thrown.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="M:Dse.DowngradingConsistencyRetryPolicy.OnWriteTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
             <p> This method triggers a maximum of one retry. If <c>writeType ==
             WriteType.BATCH_LOG</c>, the write is retried with the initial consistency
             level. If <c>writeType == WriteType.UNLOGGED_BATCH</c> and at least one
             replica acknowleged, the write is retried with a lower consistency level
             (with unlogged batch, a write timeout can <b>always</b> mean that part of the
             batch haven't been persisted at' all, even if <c>receivedAcks > 0</c>).
             For other <c>writeType</c>, if we know the write has been persisted on
             at least one replica, we ignore the exception. Otherwise, an exception is
             thrown.</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="M:Dse.DowngradingConsistencyRetryPolicy.OnUnavailable(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception. <p> This method triggers a maximum of one retry. If at least one
             replica is know to be alive, the operation is retried at a lower consistency
             level.</p>
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>a RetryDecision as defined above.</returns>
        </member>
        <member name="T:Dse.DseLoadBalancingPolicy">
            <summary>
            A load balancing policy designed to run against DSE cluster.
            <para>
             For most executions, the query plan will be determined by the child load balancing policy.
             Except for some cases, like graph analytics queries, for which it uses the preferred analytics graph server
             previously obtained by driver as first host in the query plan.
            </para>
            </summary>
        </member>
        <member name="M:Dse.DseLoadBalancingPolicy.#ctor(Dse.ILoadBalancingPolicy)">
            <summary>
            Creates a new instance of <see cref="T:Dse.DseLoadBalancingPolicy"/> wrapping the provided child policy.
            </summary>
        </member>
        <member name="M:Dse.DseLoadBalancingPolicy.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Dse.DseLoadBalancingPolicy"/> given the name of the local datacenter and
            the amount of host per remote datacenter to use for failover for the local hosts.
            </summary>
            <param name="localDc">The name of the local datacenter (case-sensitive)</param>
            <param name="usedHostsPerRemoteDc">
            The amount of host per remote datacenter that the policy should yield in a new query plan after the local
            nodes.
            </param>
        </member>
        <member name="M:Dse.DseLoadBalancingPolicy.CreateDefault">
            <summary>
            Creates the default load balancing policy, using 
            <see cref="P:Dse.Policies.DefaultLoadBalancingPolicy"/> as child policy.
            </summary>
        </member>
        <member name="M:Dse.DseLoadBalancingPolicy.Distance(Dse.Host)">
            <summary>
            Returns the distance as determined by the child policy.
            </summary>
        </member>
        <member name="M:Dse.DseLoadBalancingPolicy.Initialize(Dse.ICluster)">
            <summary>
            Initializes the policy.
            </summary>
        </member>
        <member name="M:Dse.DseLoadBalancingPolicy.NewQueryPlan(System.String,Dse.IStatement)">
            <summary>
            Returns the hosts to used for a query.
            </summary>
        </member>
        <member name="T:Dse.ExponentialReconnectionPolicy">
            <summary>
             A reconnection policy that waits exponentially longer between each
             reconnection attempt (but keeps a constant delay once a maximum delay is
             reached).
            </summary>
        </member>
        <member name="P:Dse.ExponentialReconnectionPolicy.BaseDelayMs">
            <summary>
             Gets the base delay in milliseconds for this policy (e.g. the delay before the
             first reconnection attempt).
            </summary>
        </member>
        <member name="P:Dse.ExponentialReconnectionPolicy.MaxDelayMs">
            <summary>
             Gets the maximum delay in milliseconds between reconnection attempts for this
             policy.
            </summary>
        </member>
        <member name="M:Dse.ExponentialReconnectionPolicy.#ctor(System.Int64,System.Int64)">
            <summary>
             Creates a reconnection policy waiting exponentially longer for each new
             attempt.
            </summary>
            <param name="baseDelayMs"> the base delay in milliseconds to use for the
             schedules created by this policy.  </param>
            <param name="maxDelayMs"> the maximum delay to wait between two
             attempts.</param>
        </member>
        <member name="M:Dse.ExponentialReconnectionPolicy.NewSchedule">
            <summary>
             A new schedule that used an exponentially growing delay between reconnection
             attempts. <p> For this schedule, reconnection attempt <c>i</c> will be
             tried <c>Math.min(2^(i-1) * BaseDelayMs, MaxDelayMs)</c>
             milliseconds after the previous one.</p>
            </summary>
            
            <returns>the newly created schedule.</returns>
        </member>
        <member name="T:Dse.FallthroughRetryPolicy">
            <summary>
            A retry policy that never retry (nor ignore).
            <para>
            All of the methods of this retry policy unconditionally return <see cref="M:Dse.RetryDecision.Rethrow"/>.
            If this policy is used, retry will have to be implemented in business code.
            </para>
            </summary>
        </member>
        <member name="M:Dse.FallthroughRetryPolicy.OnReadTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Dse.FallthroughRetryPolicy.OnWriteTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Dse.FallthroughRetryPolicy.OnUnavailable(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception.
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns><c>RetryDecision.rethrow()</c>.</returns>
        </member>
        <member name="M:Dse.FallthroughRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="T:Dse.FixedReconnectionPolicy">
            <summary>
            Represents a reconnection policy that is possible to specify custom reconnection delays for each attempt.
            </summary>
        </member>
        <member name="M:Dse.FixedReconnectionPolicy.#ctor(System.Int64[])">
            <summary>
            Creates a new instance of a reconnection policy for which is possible to specify custom reconnection delays for each attempt.
            <para>The last delay provided will be used for the rest of the attempts.</para>
            </summary>
        </member>
        <member name="T:Dse.IdempotenceAwareRetryPolicy">
            <summary>
            A retry policy that avoids retrying non-idempotent statements.
            <para>
            In case of write timeouts this policy will always return <see cref="M:Dse.RetryDecision.Rethrow"/>
            if the statement is considered non-idempotent (see <see cref="P:Dse.IStatement.IsIdempotent"/>).
            For all other cases, this policy delegates the decision to the child policy.
            </para>
            </summary>
        </member>
        <member name="M:Dse.IdempotenceAwareRetryPolicy.#ctor(Dse.IRetryPolicy)">
            <summary>
            Creates a new instance of <see cref="T:Dse.IdempotenceAwareRetryPolicy"/>.
            </summary>
            <param name="childPolicy">The retry policy to wrap.</param>
        </member>
        <member name="M:Dse.IdempotenceAwareRetryPolicy.OnReadTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.IdempotenceAwareRetryPolicy.OnWriteTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.IdempotenceAwareRetryPolicy.OnUnavailable(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.IdempotenceAwareRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Dse.IExtendedRetryPolicy">
            <summary>
            A policy that extends <see cref="T:Dse.IRetryPolicy"/> providing an additional method to handle
            unexpected errors.
            </summary>
        </member>
        <member name="M:Dse.IExtendedRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)">
            <summary>
            Defines whether to retry and at which consistency level on an
            unexpected error.
            <para>
            This method might be invoked in the following situations:
            </para>
            <ol>
              <li>On a client timeout, while waiting for the server response
              (see <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/>).</li>
              <li>On a socket error (socket closed, etc.).</li>
              <li>When the contacted host replies with an <c>OVERLOADED</c> error or a <c>SERVER_ERROR</c>.</li>
            </ol>
            <para>
            Note that when such an error occurs, there is no guarantee that the mutation has been applied server-side
            or not.
            </para>
            </summary>
            <param name="statement">The original query that failed.</param>
            <param name="config">The current cluster configuration.</param>
            <param name="ex">The exception that caused this request to fail.</param>
            <param name="nbRetry">The number of retries already performed for this operation.</param>
        </member>
        <member name="M:Dse.RetryPolicyExtensions.Wrap(Dse.IRetryPolicy,Dse.IExtendedRetryPolicy)">
            <summary>
            When the policy provided implements IExtendedRetryPolicy, it returns the same instance.
            Otherwise it returns a new instance of IExtendedRetryPolicy, delegating all <see cref="T:Dse.IRetryPolicy"/>
            methods to the provided policy and the rest to the defaultPolicy.
            </summary>
            <param name="policy">The policy to wrap or cast</param>
            <param name="defaultPolicy">
            The default policy to handle IExtendedRetryPolicy methods.
            When null, the default retry policy will be used.
            </param>
        </member>
        <member name="T:Dse.RetryPolicyExtensions.WrappedExtendedRetryPolicy">
            <summary>
            A policy that delegates to the user provided retry policy for all <see cref="T:Dse.IRetryPolicy"/> method calls and
            to the default <see cref="T:Dse.IExtendedRetryPolicy"/> for the rest.
            </summary>
        </member>
        <member name="T:Dse.ILoadBalancingPolicy">
            <summary>
             The policy that decides which Cassandra hosts to contact for each new query.
             For efficiency purposes, the policy is expected to exclude down hosts from query plans.
            </summary>
        </member>
        <member name="M:Dse.ILoadBalancingPolicy.Initialize(Dse.ICluster)">
            <summary>
             Initialize this load balancing policy. 
            <para>
             Note that the driver guarantees
             that it will call this method exactly once per policy object and will do so
             before any call to another of the methods of the policy.
            </para>
            </summary>
            <param name="cluster">The information about the session instance for which the policy is created.</param>
        </member>
        <member name="M:Dse.ILoadBalancingPolicy.Distance(Dse.Host)">
            <summary>
             Returns the distance assigned by this policy to the provided host. <p> The
             distance of an host influence how much connections are kept to the node (see
             <link>HostDistance</link>). A policy should assign a <c>* LOCAL</c>
             distance to nodes that are susceptible to be returned first by
             <c>newQueryPlan</c> and it is useless for <c>newQueryPlan</c> to
             return hosts to which it assigns an <c>IGNORED</c> distance. </p><p> The
             host distance is primarily used to prevent keeping too many connections to
             host in remote datacenters when the policy itself always picks host in the
             local datacenter first.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Dse.ILoadBalancingPolicy.NewQueryPlan(System.String,Dse.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> Each new query will call this
             method. The first host in the result will then be used to perform the query.
             In the event of a connection problem (the queried host is down or appear to
             be so), the next host will be used. If all hosts of the returned
             <c>Iterator</c> are down, the query will fail.</p>
            </summary>
            <param name="query">The query for which to build a plan, it can be null.</param>
            <param name="keyspace">Keyspace on which the query is going to be executed, it can be null.</param>
            <returns>An iterator of Host. The query is tried against the hosts returned
             by this iterator in order, until the query has been sent successfully to one
             of the host.</returns>
        </member>
        <member name="T:Dse.IReconnectionPolicy">
            <summary>
             Policy that decides how often the reconnection to a dead node is attempted.
             Each time a node is detected dead (because a connection error occurs), a new
             <c>IReconnectionSchedule</c> instance is created (through the
             <link>NewSchedule()</link>). Then each call to the
             <link>IReconnectionSchedule#NextDelayMs</link> method of this instance will
             decide when the next reconnection attempt to this node will be tried. Note
             that if the driver receives a push notification from the Cassandra cluster
             that a node is UP, any existing <c>IReconnectionSchedule</c> on that
             node will be cancelled and a new one will be created (in effect, the driver
             reset the scheduler). The default <link>ExponentialReconnectionPolicy</link>
             policy is usually adequate.
            </summary>
        </member>
        <member name="M:Dse.IReconnectionPolicy.NewSchedule">
            <summary>
             Creates a new schedule for reconnection attempts.
            </summary>
        </member>
        <member name="T:Dse.IReconnectionSchedule">
            <summary>
             Schedules reconnection attempts to a node.
            </summary>
        </member>
        <member name="M:Dse.IReconnectionSchedule.NextDelayMs">
            <summary>
             When to attempt the next reconnection. This method will be called once when
             the host is detected down to schedule the first reconnection attempt, and
             then once after each failed reconnection attempt to schedule the next one.
             Hence each call to this method are free to return a different value.
            </summary>
            
            <returns>a time in milliseconds to wait before attempting the next
             reconnection.</returns>
        </member>
        <member name="T:Dse.IRetryPolicy">
            <summary>
             A policy that defines a default behavior to adopt when a request returns a
             TimeoutException or an UnavailableException. Such policy allows to centralize
             the handling of query retries, allowing to minimize the need for exception
             catching/handling in business code.
            </summary>
        </member>
        <member name="M:Dse.IRetryPolicy.OnReadTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a read timeout.
             <p> Note that this method may be called even if <c>requiredResponses >=
             receivedResponses</c> if <c>dataPresent</c> is <c>false</c>
             (see <link>com.datastax.driver.core.exceptions.ReadTimeoutException#WasDataRetrieved</link>).</p>
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the read that timeouted.
             </param>
            <param name="requiredResponses"> the number of responses that were required
             to achieve the requested consistency level. </param>
            <param name="receivedResponses"> the number of responses that had been
             received by the time the timeout exception was raised. </param>
            <param name="dataRetrieved"> whether actual data (by opposition to data
             checksum) was present in the received responses. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, a
             <link>com.datastax.driver.core.exceptions.ReadTimeoutException</link> will be
             thrown for the operation.</returns>
        </member>
        <member name="M:Dse.IRetryPolicy.OnWriteTimeout(Dse.IStatement,Dse.ConsistencyLevel,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on a write timeout.
            </summary>
            <param name="query"> the original query that timeouted. </param>
            <param name="cl"> the original consistency level of the write that timeouted.
             </param>
            <param name="writeType"> the type of the write that timeouted. </param>
            <param name="requiredAcks"> the number of acknowledgments that were required
             to achieve the requested consistency level. </param>
            <param name="receivedAcks"> the number of acknowledgments that had been
             received by the time the timeout exception was raised. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, a
             <link>com.datastax.driver.core.exceptions.WriteTimeoutException</link> will
             be thrown for the operation.</returns>
        </member>
        <member name="M:Dse.IRetryPolicy.OnUnavailable(Dse.IStatement,Dse.ConsistencyLevel,System.Int32,System.Int32,System.Int32)">
            <summary>
             Defines whether to retry and at which consistency level on an unavailable
             exception.
            </summary>
            <param name="query"> the original query for which the consistency level
             cannot be achieved. </param>
            <param name="cl"> the original consistency level for the operation. </param>
            <param name="requiredReplica"> the number of replica that should have been
             (known) alive for the operation to be attempted. </param>
            <param name="aliveReplica"> the number of replica that were know to be alive
             by the coordinator of the operation. </param>
            <param name="nbRetry"> the number of retry already performed for this
             operation. </param>
            
            <returns>the retry decision. If <c>RetryDecision.Rethrow</c> is
             returned, an
             <link>com.datastax.driver.core.exceptions.UnavailableException</link> will be
             thrown for the operation.</returns>
        </member>
        <member name="T:Dse.ISpeculativeExecutionPlan">
            <summary>
            Represents a plan that governs speculative executions for a given query.
            </summary>
        </member>
        <member name="M:Dse.ISpeculativeExecutionPlan.NextExecution(Dse.Host)">
            <summary>
            Returns the time before the next speculative query.
            </summary>
            <param name="lastQueried">the host that was just queried.</param>
            <returns>the time (in milliseconds) before a speculative query is sent to the next host. If zero or negative, no speculative query will be sent.</returns>
        </member>
        <member name="T:Dse.ISpeculativeExecutionPolicy">
            <summary>
            The policy that decides if the driver will send speculative queries to the next hosts when the current host takes too long to respond.
            only idempotent statements will be speculatively retried, see <see cref="P:Dse.IStatement.IsIdempotent"/> for more information.
            </summary>
        </member>
        <member name="M:Dse.ISpeculativeExecutionPolicy.Initialize(Dse.ICluster)">
            <summary>
            Initializes the policy at cluster startup.
            </summary>
        </member>
        <member name="M:Dse.ISpeculativeExecutionPolicy.NewPlan(System.String,Dse.IStatement)">
            <summary>
            Returns the plan to use for a new query.
            </summary>
            <param name="keyspace">the currently logged keyspace</param>
            <param name="statement">the query for which to build a plan.</param>
            <returns></returns>
        </member>
        <member name="T:Dse.ITimestampGenerator">
            <summary>
            Represents client-side, microsecond-precision query timestamps.
            <para>
            Given that Apache Cassandra uses those timestamps to resolve conflicts, implementations should generate
            monotonically increasing timestamps for successive invocations of <see cref="M:Dse.ITimestampGenerator.Next"/>.
            </para>
            </summary>
        </member>
        <member name="M:Dse.ITimestampGenerator.Next">
            <summary>
            Returns the next timestamp in microseconds since UNIX epoch.
            <para>
            Implementers should enforce increasing monotonic timestamps, that is,
            a timestamp returned should always be strictly greater that any previously returned
            timestamp.
            </para>
            <para>
            Implementers should strive to achieve microsecond precision in the best possible way,
            which is usually largely dependent on the underlying operating system's capabilities.
            </para>
            </summary>
            <returns>
            The next timestamp (in microseconds). When returning <see cref="F:System.Int64.MinValue"/>, the driver
            will not set the timestamp, letting Apache Cassandra generate a server-side timestamp.
            </returns>
        </member>
        <member name="T:Dse.LoggingRetryPolicy">
            <summary>
            A retry policy that wraps another policy, logging the decision made by its sub-policy. 
            <para>
            Note that this policy only log the <c>Ignore</c> and <c>Retry</c> decisions (since <c>Rethrow</c>
            decisions just amount to propagate the cassandra exception). The logging is done at the <c>Info</c> level.
            </para>
            </summary>
        </member>
        <member name="M:Dse.LoggingRetryPolicy.#ctor(Dse.IRetryPolicy)">
            <summary>
            Creates a new <see cref="T:Dse.IExtendedRetryPolicy"/> that logs the decision of the provided <c>policy</c>.
            </summary>
            <param name="policy"> the policy to wrap. The policy created by this
             constructor will return the same decision than <c>policy</c> but will log them.</param>
        </member>
        <member name="M:Dse.LoggingRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Dse.NoSpeculativeExecutionPolicy">
            <summary>
            A <see cref="T:Dse.ISpeculativeExecutionPolicy"/> that never schedules speculative executions.
            </summary>
        </member>
        <member name="T:Dse.Policies">
            <summary>
            Represents the policies configured for a <see cref="T:Dse.ICluster"/> instance.
            </summary>
        </member>
        <member name="P:Dse.Policies.DefaultLoadBalancingPolicy">
            <summary>
             The default load balancing policy. 
            <para> 
            The default load balancing policy is <see cref="T:Dse.TokenAwarePolicy"/> with <see cref="T:Dse.DCAwareRoundRobinPolicy"/> as child policy.
            </para>
            </summary>
        </member>
        <member name="P:Dse.Policies.DefaultReconnectionPolicy">
            <summary>
             The default reconnection policy. <p> The default reconnection policy is an
             <link>ExponentialReconnectionPolicy</link> where the base delay is 1 second
             and the max delay is 10 minutes;</p>
            </summary>
        </member>
        <member name="P:Dse.Policies.DefaultRetryPolicy">
            <summary>
             The default retry policy. <p> The default retry policy is
             <link>DefaultRetryPolicy</link>.</p>
            </summary>
        </member>
        <member name="P:Dse.Policies.DefaultSpeculativeExecutionPolicy">
            <summary>
            The <see cref="T:Dse.ISpeculativeExecutionPolicy"/> to be used by default.
            <para> 
            The default is <see cref="T:Dse.NoSpeculativeExecutionPolicy"/>.
            </para>
            </summary>
        </member>
        <member name="P:Dse.Policies.DefaultTimestampGenerator">
            <summary>
            Gets a new instance of the default <see cref="T:Dse.ITimestampGenerator"/> policy.
            <para>
            The default <see cref="T:Dse.ITimestampGenerator"/> is <see cref="T:Dse.AtomicMonotonicTimestampGenerator"/>
            </para>
            </summary>
        </member>
        <member name="P:Dse.Policies.DefaultPolicies">
            <summary>
            Gets a new instance <see cref="T:Dse.Policies"/> containing default policies of the driver.
            </summary>
        </member>
        <member name="P:Dse.Policies.LoadBalancingPolicy">
            <summary>
             Gets the load balancing policy in use. <p> The load balancing policy defines how
             Cassandra hosts are picked for queries.</p>
            </summary>
        </member>
        <member name="P:Dse.Policies.ReconnectionPolicy">
            <summary>
             Gets the reconnection policy in use. <p> The reconnection policy defines how often
             the driver tries to reconnect to a dead node.</p>
            </summary>
        </member>
        <member name="P:Dse.Policies.RetryPolicy">
            <summary>
             Gets the retry policy in use. <p> The retry policy defines in which conditions a
             query should be automatically retries by the driver.</p>
            </summary>
        </member>
        <member name="P:Dse.Policies.SpeculativeExecutionPolicy">
            <summary>
            Gets the <see cref="P:Dse.Policies.SpeculativeExecutionPolicy"/> in use.
            </summary>
        </member>
        <member name="P:Dse.Policies.ExtendedRetryPolicy">
            <summary>
            Gets the extended retry policy that contains the default behavior to handle request errors.
            The returned value is either the same instance as <see cref="P:Dse.Policies.RetryPolicy"/> or the default
            retry policy. It can not be null.
            </summary>
        </member>
        <member name="P:Dse.Policies.TimestampGenerator">
            <summary>
            Gets the <see cref="T:Dse.ITimestampGenerator"/> instance in use.
            </summary>
        </member>
        <member name="M:Dse.Policies.#ctor(Dse.ILoadBalancingPolicy,Dse.IReconnectionPolicy,Dse.IRetryPolicy)">
            <summary>
            Creates a new <c>Policies</c> object using the provided policies.
            </summary>
            <param name="loadBalancingPolicy"> the load balancing policy to use. </param>
            <param name="reconnectionPolicy"> the reconnection policy to use. </param>
            <param name="retryPolicy"> the retry policy to use.</param>
        </member>
        <member name="M:Dse.Policies.InitializeRetryPolicy(Dse.ICluster)">
            <summary>
            Sets the current policy as extended retry policy.
            If the current policy is not <see cref="T:Dse.IExtendedRetryPolicy"/>, it creates a wrapper to delegate
            the methods that were not implemented to a default policy.
            </summary>
        </member>
        <member name="T:Dse.RetryDecision">
            <summary>
             A retry decision to adopt on a Cassandra exception (read/write timeout or
             unavailable exception). <p> There is three possible decision: <ul>
             <li>Rethrow: no retry should be attempted and an exception should be
             thrown</li> <li>Retry: the operation will be retried. The consistency level
             of the retry should be specified.</li> <li>Ignore: no retry should be
             attempted and the exception should be ignored. In that case, the operation
             that triggered the Cassandra exception will return an empty result set.</li></ul></p>
            </summary>
        </member>
        <member name="T:Dse.RetryDecision.RetryDecisionType">
            <summary>
             The type of retry decisions.
            </summary>
        </member>
        <member name="F:Dse.RetryDecision.RetryDecisionType.Retry">
            <summary>
            the operation will be retried. The consistency level of the retry should be specified.
            </summary>
        </member>
        <member name="F:Dse.RetryDecision.RetryDecisionType.Rethrow">
            <summary>
            no retry should be attempted and an exception should be thrown
            </summary>
        </member>
        <member name="F:Dse.RetryDecision.RetryDecisionType.Ignore">
            <summary>
            no retry should be attempted and the exception should be ignored. In that case, the operation that triggered the Cassandra exception will return an empty result set.
            </summary>
        </member>
        <member name="P:Dse.RetryDecision.DecisionType">
            <summary>
             Gets the type of this retry decision.
            </summary>
        </member>
        <member name="P:Dse.RetryDecision.RetryConsistencyLevel">
            <summary>
             Gets the consistency level for a retry decision or <c>null</c> if
             this retry decision is an <c>Ignore</c> or a
             <c>Rethrow</c>.</summary>
        </member>
        <member name="P:Dse.RetryDecision.UseCurrentHost">
            <summary>
            Determines whether the retry policy uses the same host for retry decision. Default: true.
            </summary>
        </member>
        <member name="M:Dse.RetryDecision.Rethrow">
            <summary>
             Creates a Rethrow retry decision.
            </summary>
            <returns>a Rethrow retry decision.</returns>
        </member>
        <member name="M:Dse.RetryDecision.Retry(System.Nullable{Dse.ConsistencyLevel},System.Boolean)">
            <summary>
             Creates a decision to retry using the provided consistency level.
            </summary>
            <param name="consistency"> the consistency level to use for the retry.</param>
            <param name="useCurrentHost">Determines if the retry is made using the current host.</param>
            <returns>a Retry with consistency level <c>consistency</c> retry
             decision.</returns>
        </member>
        <member name="M:Dse.RetryDecision.Retry(System.Nullable{Dse.ConsistencyLevel})">
            <summary>
             Creates a decision to retry using the provided consistency level on the same host.
            </summary>
            <param name="consistency"> the consistency level to use for the retry.</param>
            <returns>a Retry with consistency level <c>consistency</c> retry decision.</returns>
        </member>
        <member name="M:Dse.RetryDecision.Ignore">
            <summary>
             Creates an Ignore retry decision.
            </summary>
            <returns>an Ignore retry decision.</returns>
        </member>
        <member name="T:Dse.RoundRobinPolicy">
            <summary>
             A Round-robin load balancing policy. 
            <para> This policy queries nodes in a
             round-robin fashion. For a given query, if an host fail, the next one
             (following the round-robin order) is tried, until all hosts have been tried.
             </para>
            <para> This policy is not datacenter aware and will include every known
             Cassandra host in its round robin algorithm. If you use multiple datacenter
             this will be inefficient and you will want to use the
             <see cref="T:Dse.DCAwareRoundRobinPolicy"/> load balancing policy instead.
            </para>
            </summary>
        </member>
        <member name="M:Dse.RoundRobinPolicy.Distance(Dse.Host)">
            <summary>
             Return the HostDistance for the provided host. <p> This policy consider all
             nodes as local. This is generally the right thing to do in a single
             datacenter deployment. If you use multiple datacenter, see
             <link>DCAwareRoundRobinPolicy</link> instead.</p>
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            <returns>the HostDistance to <c>host</c>.</returns>
        </member>
        <member name="M:Dse.RoundRobinPolicy.NewQueryPlan(System.String,Dse.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will try each
             known host of the cluster. Upon each call to this method, the ith host of the
             plans returned will cycle over all the host of the cluster in a round-robin
             fashion.</p>
            </summary>
            <param name="keyspace">Keyspace on which the query is going to be executed</param>
            <param name="query"> the query for which to build the plan. </param>
            <returns>a new query plan, i.e. an iterator indicating which host to try
             first for querying, which one to use as failover, etc...</returns>
        </member>
        <member name="T:Dse.TokenAwarePolicy">
            <summary>
            A wrapper load balancing policy that adds token awareness to a child policy.
            <para> This policy encapsulates another policy. The resulting policy works in the following way:
            </para>
            <list type="number">
            <item>The <see cref="M:Dse.TokenAwarePolicy.Distance(Dse.Host)"/> method is inherited  from the child policy.</item>
            <item>The host yielded by the <see cref="M:Dse.TokenAwarePolicy.NewQueryPlan(System.String,Dse.IStatement)"/> method will first return the
            <see cref="F:Dse.HostDistance.Local"/> replicas for the statement, based on the <see cref="P:Dse.Statement.RoutingKey"/>.
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Dse.TokenAwarePolicy.#ctor(Dse.ILoadBalancingPolicy)">
            <summary>
             Creates a new <c>TokenAware</c> policy that wraps the provided child
             load balancing policy.
            </summary>
            <param name="childPolicy"> the load balancing policy to wrap with token
             awareness.</param>
        </member>
        <member name="M:Dse.TokenAwarePolicy.Distance(Dse.Host)">
            <summary>
             Return the HostDistance for the provided host.
            </summary>
            <param name="host"> the host of which to return the distance of. </param>
            
            <returns>the HostDistance to <c>host</c> as returned by the wrapped
             policy.</returns>
        </member>
        <member name="M:Dse.TokenAwarePolicy.NewQueryPlan(System.String,Dse.IStatement)">
            <summary>
             Returns the hosts to use for a new query. <p> The returned plan will first
             return replicas (whose <c>HostDistance</c> for the child policy is
             <c>Local</c>) for the query if it can determine them (i.e. mainly if
             <c>IStatement.RoutingKey</c> is not <c>null</c>). Following what
             it will return the plan of the child policy.</p>
            </summary>
            <param name="loggedKeyspace">Keyspace on which the query is going to be executed</param>
            <param name="query"> the query for which to build the plan. </param>
            <returns>the new query plan.</returns>
        </member>
        <member name="T:Dse.PoolingOptions">
            <summary>
            <para>Represents the options related to connection pooling.</para>
            <para>
            For each host selected by the load balancing policy, the driver keeps a core amount of 
            connections open at all times 
            (<see cref="M:Dse.PoolingOptions.GetCoreConnectionsPerHost(Dse.HostDistance)"/>).
            If the use of those connections reaches a configurable threshold 
            (<see cref="M:Dse.PoolingOptions.GetMaxSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance)"/>), 
            more connections are created up to the configurable maximum number of connections 
            (<see cref="M:Dse.PoolingOptions.GetMaxConnectionPerHost(Dse.HostDistance)"/>).
            </para>
            <para>
            The driver uses connections in an asynchronous manner and multiple requests can be
            submitted on the same connection at the same time without waiting for a response.
            This means that the driver only needs to maintain a relatively small number of connections
            to each Cassandra host. The <see cref="T:Dse.PoolingOptions"/> allows you to to control how many
            connections are kept per host.
            </para>
            <para>
            Each of these parameters can be separately set for <see cref="F:Dse.HostDistance.Local"/> and
            <see cref="F:Dse.HostDistance.Remote"/> hosts. For <see cref="F:Dse.HostDistance.Ignored"/> hosts,
            the default for all those settings is 0 and cannot be changed.
            </para>
            <para>
            The default amount of connections depend on the Cassandra version of the Cluster, as newer
            versions of Cassandra (2.1 and above) support a higher number of in-flight requests.
            </para>
            <para>For Cassandra 2.1 and above, the default amount of connections per host are:</para>
            <list type="bullet">
            <item>Local datacenter: 1 core connection per host, with 2 connections as maximum when the simultaneous
            requests threshold is reached.</item>
            <item>Remote datacenter: 1 core connection per host (being 1 also max).</item>
            </list>
            <para>For older Cassandra versions (1.2 and 2.0), the default amount of connections per host are:</para>
            <list type="bullet">
            <item>Local datacenter: 2 core connection per host, with 8 connections as maximum when the simultaneous
            requests threshold is reached.</item>
            <item>Remote datacenter: 1 core connection per host (being 2 the maximum).</item>
            </list>
            </summary>
        </member>
        <member name="F:Dse.PoolingOptions.DefaultMaxRequestsPerConnection">
            <summary>
            Default maximum amount of requests that can be in-flight on a single connection at the same time after
            which the connection will start rejecting requests: 2048.
            </summary>
        </member>
        <member name="F:Dse.PoolingOptions.DefaultHeartBeatInterval">
            <summary>
            The default heartbeat interval in milliseconds: 30000.
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.#ctor">
            <summary>
            DEPRECATED: It will be removed in future versions. Use <see cref="M:Dse.PoolingOptions.Create(Dse.ProtocolVersion)"/> instead.
            <para>
            Creates a new instance of <see cref="T:Dse.PoolingOptions"/> using defaults suitable for old server versions
            (Apache Cassandra 2.0 and below) for compatibility reasons. It's recommended that you
            use <see cref="M:Dse.PoolingOptions.Create(Dse.ProtocolVersion)"/> providing the server protocol version.
            </para>
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.GetMinSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance)">
            <summary>
             Number of simultaneous requests on a connection below which connections in
             excess are reclaimed. <p> If an opened connection to an host at distance
             <c>distance</c> handles less than this number of simultaneous requests
             and there is more than <link>#GetCoreConnectionsPerHost</link> connections
             open to this host, the connection is closed. </p><p> The default value for this
             option is 25 for <c>Local</c> and <c>Remote</c> hosts.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.</param>
            <returns>the configured threshold, or the default one if none have been set.</returns>
        </member>
        <member name="M:Dse.PoolingOptions.SetMinSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance,System.Int32)">
            <summary>
             Sets the number of simultaneous requests on a connection below which
             connections in excess are reclaimed.
            </summary>
            <param name="distance"> the <see cref="T:Dse.HostDistance"/> for which to configure this
             threshold. </param>
            <param name="minSimultaneousRequests"> the value to set. </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
        </member>
        <member name="M:Dse.PoolingOptions.GetMaxSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance)">
            <summary>
            <para>
            Number of simultaneous requests on each connections to a host after which more
            connections are created.
            </para>
            <para>
            If all the connections opened to a host are handling more than this number of simultaneous requests
            and there is less than <see cref="M:Dse.PoolingOptions.GetMaxConnectionPerHost(Dse.HostDistance)"/> connections open to this host,
            a new connection is open.
            </para>
            </summary>
            <param name="distance"> the <see cref="T:Dse.HostDistance"/> for which to return this threshold.</param>
            <returns>the configured threshold, or the default one if none have been set.</returns>
        </member>
        <member name="M:Dse.PoolingOptions.SetMaxSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance,System.Int32)">
            <summary>
            Sets number of simultaneous requests on all connections to an host after
            which more connections are created.
            </summary>
            <param name="distance">The <see cref="T:Dse.HostDistance"/> for which to configure this
             threshold. </param>
            <param name="maxSimultaneousRequests"> the value to set. </param>
            <returns>this <c>PoolingOptions</c>. </returns>
            <throws name="IllegalArgumentException"> if <c>distance == HostDistance.Ignore</c>.</throws>
        </member>
        <member name="M:Dse.PoolingOptions.GetCoreConnectionsPerHost(Dse.HostDistance)">
            <summary>
            <para>
            The core number of connections per host.
            </para>
            <para>
            For the provided <see cref="T:Dse.HostDistance"/>, this correspond to the number of
            connections initially created and kept open to each host of that distance.
            </para>
            </summary>
            <param name="distance">The <see cref="T:Dse.HostDistance"/> for which to return this threshold.</param>
            <returns>the core number of connections per host at distance <see cref="T:Dse.HostDistance"/>.</returns>
        </member>
        <member name="M:Dse.PoolingOptions.GetWarmup">
            <summary>
            Gets whether all connections to hosts in the local datacenter must be opened on connect. Default: true.
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.SetCoreConnectionsPerHost(Dse.HostDistance,System.Int32)">
            <summary>
             Sets the core number of connections per host.
            </summary>
            <param name="distance"> the <see cref="T:Dse.HostDistance"/> for which to set this threshold.</param>
            <param name="coreConnections"> the value to set </param>
            <returns>this <c>PoolingOptions</c>. </returns>
            <throws name="IllegalArgumentException"> if <c>distance == HostDistance.Ignored</c>.</throws>
        </member>
        <member name="M:Dse.PoolingOptions.GetMaxConnectionPerHost(Dse.HostDistance)">
            <summary>
             The maximum number of connections per host. <p> For the provided
             <c>distance</c>, this correspond to the maximum number of connections
             that can be created per host at that distance.</p>
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to return this threshold.
             </param>
            
            <returns>the maximum number of connections per host at distance
             <c>distance</c>.</returns>
        </member>
        <member name="M:Dse.PoolingOptions.SetMaxConnectionsPerHost(Dse.HostDistance,System.Int32)">
            <summary>
             Sets the maximum number of connections per host.
            </summary>
            <param name="distance"> the <c>HostDistance</c> for which to set this threshold.
             </param>
            <param name="maxConnections"> the value to set </param>
            
            <returns>this <c>PoolingOptions</c>. </returns>
        </member>
        <member name="M:Dse.PoolingOptions.GetHeartBeatInterval">
            <summary>
            Gets the amount of idle time in milliseconds that has to pass
            before the driver issues a request on an active connection to avoid
            idle time disconnections.
            <remarks>
            A value of <c>0</c> or <c>null</c> means that the heartbeat
            functionality at connection level is disabled.
            </remarks>
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.SetHeartBeatInterval(System.Int32)">
            <summary>
            Sets the amount of idle time in milliseconds that has to pass
            before the driver issues a request on an active connection to avoid
            idle time disconnections.
            <remarks>
            When set to <c>0</c> the heartbeat functionality at connection
            level is disabled.
            </remarks>
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.GetMaxRequestsPerConnection">
            <summary>
            Gets the maximum amount of requests that can be in-flight on a single connection at the same time.
            <para>
            This setting acts as a fixed maximum, once this value is reached for a host the pool will start
            rejecting requests, throwing <see cref="T:Dse.BusyPoolException"/> instances.
            </para>
            <para>
            This setting should not be mistaken with <see cref="M:Dse.PoolingOptions.GetMaxSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.SetMaxRequestsPerConnection(System.Int32)">
            <summary>
            Sets the maximum amount of requests that can be in-flight on a single connection at the same time.
            <para>
            This setting acts as a fixed maximum, once this value is reached for a host the pool will start
            rejecting requests, throwing <see cref="T:Dse.BusyPoolException"/> instances.
            </para>
            <para>
            This setting should not be mistaken with <see cref="M:Dse.PoolingOptions.SetMaxSimultaneousRequestsPerConnectionTreshold(Dse.HostDistance,System.Int32)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.SetWarmup(System.Boolean)">
            <summary>
            Sets whether all connections to hosts in the local datacenter must be opened on connect. Default: true.
            </summary>
        </member>
        <member name="M:Dse.PoolingOptions.Create(Dse.ProtocolVersion)">
            <summary>
            Creates a new instance of <see cref="T:Dse.PoolingOptions"/> using the default amount of connections
            and settings based on the protocol version.
            <para>
            For modern server versions (Apache Cassandra 2.1+) the amount of core connections are set to 1,
            setting 2 for max local connections.
            </para>
            </summary>
            <returns>A new instance of <see cref="T:Dse.PoolingOptions"/></returns>
            <seealso cref="T:Dse.ProtocolVersion"/>
        </member>
        <member name="T:Dse.PreparedStatement">
            <summary>
             Represents a prepared statement, a query with bound variables that has been
             prepared (pre-parsed) by the database. <p> A prepared statement can be
             executed once concrete values has been provided for the bound variables. The
             pair of a prepared statement and values for its bound variables is a
             BoundStatement and can be executed (by <link>Session#Execute</link>).</p>
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.Cql">
            <summary>
            The cql query
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.Id">
            <summary>
            The prepared statement identifier
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.Keyspace">
            <summary>
            The keyspace were the prepared statement was first executed
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.IncomingPayload">
            <summary>
            Gets the the incoming payload, that is, the payload that the server
            sent back with its prepared response, or null if the server did not include any custom payload.
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.OutgoingPayload">
            <summary>
            Gets custom payload for that will be included when executing an Statement.
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.Variables">
            <summary>
             Gets metadata on the bounded variables of this prepared statement.
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.RoutingKey">
            <summary>
            Gets the routing key for the prepared statement.
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.RoutingIndexes">
            <summary>
            Gets or sets the parameter indexes that are part of the partition key
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.ConsistencyLevel">
            <summary>
            Gets the default consistency level for all executions using this instance
            </summary>
        </member>
        <member name="P:Dse.PreparedStatement.IsIdempotent">
            <summary>
            Determines if the query is idempotent, i.e. whether it can be applied multiple times without 
            changing the result beyond the initial application.
            <para>
            Idempotence of the prepared statement plays a role in <see cref="T:Dse.ISpeculativeExecutionPolicy"/>.
            If a query is <em>not idempotent</em>, the driver will not schedule speculative executions for it.
            </para>
            When the property is null, the driver will use the default value from the <see cref="M:Dse.QueryOptions.GetDefaultIdempotence"/>.
            </summary>
        </member>
        <member name="M:Dse.PreparedStatement.#ctor">
            <summary>
            Initializes a new instance of the Cassandra.PreparedStatement class
            </summary>
        </member>
        <member name="M:Dse.PreparedStatement.Bind(System.Object[])">
            <summary>
            <para>
            Creates a new <see cref="T:Dse.BoundStatement"/> instance with the provided parameter values.
            </para>
            <para>
            You can specify the parameter values by the position of the markers in the query, or by name 
            using a single instance of an anonymous type, with property names as parameter names.
            </para>
            <para>
            Note that while no more <c>values</c> than bound variables can be provided, it is allowed to
            provide less <c>values</c> that there is variables.
            </para>
            <para>
            You can provide a comma-separated variable number of arguments to the <c>Bind()</c> method. When providing
            an array, the reference might be used by the driver making it not safe to modify its content.
            </para>
            </summary>
            <param name="values">The values to bind to the variables of the newly created BoundStatement.</param>
            <returns>The newly created <see cref="T:Dse.BoundStatement"/> with the query parameters set.</returns>
            <example>
            Binding different parameters:
            <code>
            PreparedStatement ps = session.Prepare("INSERT INTO table (id, name) VALUES (?, ?)");
            BoundStatement statement = ps.Bind(Guid.NewGuid(), "Franz Ferdinand");
            session.Execute(statement);
            </code>
            </example>
        </member>
        <member name="M:Dse.PreparedStatement.SetConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
             Sets a default consistency level for all <c>BoundStatement</c> created
             from this object. <p> If no consistency level is set through this method, the
             BoundStatement created from this object will use the default consistency
             level (One). </p><p> Changing the default consistency level is not retroactive,
             it only applies to BoundStatement created after the change.</p>
            </summary>
            <param name="consistency"> the default consistency level to set. </param>
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Dse.PreparedStatement.SetPartitionKeys(Dse.TableColumn[])">
            <summary>
            Sets the partition keys of the query
            </summary>
            <returns>True if it was possible to set the routing indexes for this query</returns>
        </member>
        <member name="M:Dse.PreparedStatement.SetRoutingKey(Dse.RoutingKey[])">
            <summary>
            Set the routing key for this query.
            <para>
            The routing key is a hint for token aware load balancing policies but is never mandatory.
            This method allows you to manually provide a routing key for this query.
            </para>
            <para>
            Use this method ONLY if the partition keys are the same for all query executions (hard-coded parameters).
            </para>
            <para>
            If the partition key is composite, you should provide multiple routing key components.
            </para>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to
             obtain the routing key. </param>
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Dse.PreparedStatement.SetRoutingNames(System.String[])">
            <summary>
            For named query markers, it sets the parameter names that are part of the routing key.
            <para>
            Use this method ONLY if the parameter names are different from the partition key names.
            </para>
            </summary>
            <returns>this <c>PreparedStatement</c> object.</returns>
        </member>
        <member name="M:Dse.PreparedStatement.SetIdempotence(System.Boolean)">
            <summary>
            Sets whether the prepared statement is idempotent.
            <para>
            Idempotence of the query plays a role in <see cref="T:Dse.ISpeculativeExecutionPolicy"/>.
            If a query is <em>not idempotent</em>, the driver will not schedule speculative executions for it.
            </para>
            </summary>
        </member>
        <member name="M:Dse.PreparedStatement.SetOutgoingPayload(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Sets a custom outgoing payload for this statement.
            Each time an statement generated using this prepared statement is executed, this payload will be included in the request.
            Once it is set using this method, the payload should not be modified.
            </summary>
        </member>
        <member name="T:Dse.ProtocolOptions">
            <summary>
             Options of the Cassandra native binary protocol.
            </summary>
        </member>
        <member name="F:Dse.ProtocolOptions.DefaultPort">
            <summary>
             The default port for Cassandra native binary protocol: 9042.
            </summary>
        </member>
        <member name="F:Dse.ProtocolOptions.MaximumFrameLength">
            <summary>
            Maximum length of a frame according to the protocol
            </summary>
        </member>
        <member name="P:Dse.ProtocolOptions.Port">
            <summary>
             The port used to connect to the Cassandra hosts.
            </summary>
            
            <returns>the port used to connect to the Cassandra hosts.</returns>
        </member>
        <member name="P:Dse.ProtocolOptions.SslOptions">
            <summary>
            Specified SSL options used to connect to the Cassandra hosts.
            </summary>
            
            <returns>SSL options used to connect to the Cassandra hosts.</returns>
        </member>
        <member name="P:Dse.ProtocolOptions.Compression">
            <summary>
             Returns the compression used by the protocol. <p> The default compression is
             <c>Compression.SNAPPY</c>.</p>
            </summary>
            <returns>the compression used.</returns>
        </member>
        <member name="P:Dse.ProtocolOptions.CustomCompressor">
            <summary>
             Gets the custom compressor specified to be used for the compression type.
            </summary>
        </member>
        <member name="P:Dse.ProtocolOptions.MaxSchemaAgreementWaitSeconds">
            <summary>
            Gets the maximum time to wait for schema agreement before returning from a DDL query.
            </summary>
        </member>
        <member name="P:Dse.ProtocolOptions.NoCompact">
            <summary>
            Determines whether NO_COMPACT is enabled as startup option.
            <para>
            When this option is set, <c>SELECT</c>, <c>UPDATE</c>, <c>DELETE</c>, and <c>BATCH</c> statements
            on <c>COMPACT STORAGE</c> tables function in "compatibility" mode which allows seeing these tables
            as if they were "regular" CQL tables.
            </para>
            <para>
            This option only affects interactions with tables using <c>COMPACT STORAGE</c> and it is only
            supported by C* 3.0.16+, 3.11.2+, 4.0+ and DSE 6.0+.
            </para>
            </summary>
        </member>
        <member name="P:Dse.ProtocolOptions.MaxProtocolVersion">
            <summary>
            Gets the maximum protocol version to be used.
            When set, it limits the maximum protocol version used to connect to the nodes.
            Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra.
            </summary>
        </member>
        <member name="M:Dse.ProtocolOptions.#ctor">
            <summary>
             Creates a new <c>ProtocolOptions</c> instance using the
             <c>DEFAULT_PORT</c>.
            </summary>
        </member>
        <member name="M:Dse.ProtocolOptions.#ctor(System.Int32)">
            <summary>
             Creates a new <c>ProtocolOptions</c> instance using the provided port.
            </summary>
            <param name="port"> the port to use for the binary protocol.</param>
        </member>
        <member name="M:Dse.ProtocolOptions.#ctor(System.Int32,Dse.SSLOptions)">
            <summary>       
            Creates a new ProtocolOptions instance using the provided port and SSL context.        
            </summary>
            <param name="port">the port to use for the binary protocol.</param>
            <param name="sslOptions">sslOptions the SSL options to use. Use null if SSL is not to be used.</param>
        </member>
        <member name="M:Dse.ProtocolOptions.SetCompression(Dse.CompressionType)">
            <summary>
             Sets the compression to use. <p> Note that while this setting can be changed
             at any time, it will only apply to newly created connections.</p>
            </summary>
            <param name="compression"> the compression algorithm to use (or <c>Compression.NONE</c> to disable compression).
             </param>
            <returns>this <c>ProtocolOptions</c> object.</returns>
        </member>
        <member name="M:Dse.ProtocolOptions.SetCustomCompressor(Dse.IFrameCompressor)">
            <summary>
            Sets a custom compressor to be used for the compression type.
            If specified, the compression type is mandatory.
            If not specified the driver default compressor will be use for the compression type.
            </summary>
            <param name="compressor">Implementation of IFrameCompressor</param>
        </member>
        <member name="M:Dse.ProtocolOptions.SetMaxSchemaAgreementWaitSeconds(System.Int32)">
            <summary>
            Sets the maximum time to wait for schema agreement before returning from a DDL query.
            </summary>
        </member>
        <member name="M:Dse.ProtocolOptions.SetMaxProtocolVersion(System.Byte)">
            <summary>
            Sets the maximum protocol version to be used.
            When set, it limits the maximum protocol version used to connect to the nodes.
            Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra.
            </summary>
        </member>
        <member name="M:Dse.ProtocolOptions.SetMaxProtocolVersion(Dse.ProtocolVersion)">
            <summary>
            Sets the maximum protocol version to be used.
            When set, it limits the maximum protocol version used to connect to the nodes.
            Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra.
            </summary>
        </member>
        <member name="M:Dse.ProtocolOptions.SetNoCompact(System.Boolean)">
            <summary>
            When set to true, it enables the NO_COMPACT startup option.
            <para>
            When this option is set, <c>SELECT</c>, <c>UPDATE</c>, <c>DELETE</c>, and <c>BATCH</c> statements
            on <c>COMPACT STORAGE</c> tables function in "compatibility" mode which allows seeing these tables
            as if they were "regular" CQL tables.
            </para>
            <para>
            This option only affects interactions with tables using <c>COMPACT STORAGE</c> and it is only
            supported by C* 3.0.16+, 3.11.2+, 4.0+ and DSE 6.0+.
            </para>
            </summary>
        </member>
        <member name="T:Dse.ProtocolVersion">
            <summary>
            Specifies the different protocol versions and provides methods (via extension methods) to check whether a
            feature is supported in an specific version
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.V1">
            <summary>
            Cassandra protocol v1, supported in Apache Cassandra 1.2-->2.2.
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.V2">
            <summary>
            Cassandra protocol v2, supported in Apache Cassandra 2.0-->2.2.
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.V3">
            <summary>
            Cassandra protocol v3, supported in Apache Cassandra 2.1-->3.x.
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.V4">
            <summary>
            Cassandra protocol v4, supported in Apache Cassandra 2.2-->3.x.
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.V5">
            <summary>
            Cassandra protocol v5, in beta from Apache Cassandra 3.x+. Currently not supported by the driver.
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.DseV2">
            <summary>
            DSE protocol v2. DSE 6.0+.
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.MaxSupported">
            <summary>
            The higher protocol version that is supported by this driver.
            <para>When acquiring the first connection, it will use this version to start protocol negotiation.</para>
            </summary>
        </member>
        <member name="F:Dse.ProtocolVersion.MinSupported">
            <summary>
            The lower protocol version that is supported by this driver.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.IsSupported(Dse.ProtocolVersion)">
            <summary>
            Determines if the protocol version is supported by this driver.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.GetLowerSupported(Dse.ProtocolVersion)">
            <summary>
            Gets the first version number that is supported, lower than the one provided.
            Returns zero when there isn't a lower supported version.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.GetHighestCommon(Dse.ProtocolVersion,System.Collections.Generic.IEnumerable{Dse.Host})">
            <summary>
            Gets the highest supported protocol version collectively by the given hosts.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsPreparedPartitionKey(Dse.ProtocolVersion)">
            <summary>
            Determines whether the protocol supports partition key indexes in the `prepared` RESULT responses.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsSchemaChangeFullMetadata(Dse.ProtocolVersion)">
            <summary>
            Determines whether the protocol supports up to 4 strings (ie: change_type, target, keyspace and table) in
            the schema change responses.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsTimestamp(Dse.ProtocolVersion)">
            <summary>
            Determines whether the protocol supports timestamps parameters in BATCH, QUERY and EXECUTE requests.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsUnset(Dse.ProtocolVersion)">
            <summary>
            Determines whether the protocol supports unset parameters.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsBatch(Dse.ProtocolVersion)">
            <summary>
            Determines whether the protocol supports BATCH requests.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsResultMetadataId(Dse.ProtocolVersion)">
            <summary>
            Determines if the protocol supports result_metadata_id on PREPARED response and EXECUTE request.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsKeyspaceInRequest(Dse.ProtocolVersion)">
            <summary>
            Determines if the protocol supports to send the Keyspace as part of the PREPARE, QUERY and BATCH.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsDriverInfoInStartup(Dse.ProtocolVersion)">
            <summary>
            Determines if the protocol supports sending driver information in the STARTUP request.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.SupportsFailureReasons(Dse.ProtocolVersion)">
            <summary>
            Determines if the protocol provides a map of reasons as part of read_failure and write_failure.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.Uses2BytesStreamIds(Dse.ProtocolVersion)">
            <summary>
            Determines if streamIds are serialized used 2 bytes
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.Uses4BytesCollectionLength(Dse.ProtocolVersion)">
            <summary>
            Determines whether the collection length is encoded using 32 bits.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.Uses4BytesQueryFlags(Dse.ProtocolVersion)">
            <summary>
            Determines whether the QUERY, EXECUTE and BATCH flags are encoded using 32 bits.
            </summary>
        </member>
        <member name="M:Dse.ProtocolVersionExtensions.CanStartupResponseErrorBeWrapped(Dse.ProtocolVersion)">
            <summary>
            Startup responses using protocol v4+ can be a SERVER_ERROR wrapping a ProtocolException,
            this method returns true when is possible to receive such error.
            </summary>
        </member>
        <member name="T:Dse.QueryOptions">
            <summary>
            Options related to defaults for individual queries.
            </summary>
        </member>
        <member name="F:Dse.QueryOptions.Empty">
            <summary>
            Represents the 
            </summary>
        </member>
        <member name="F:Dse.QueryOptions.DefaultConsistencyLevel">
            <summary>
            The default consistency level for queries: <c>ConsistencyLevel.LocalOne</c>.
            </summary>    
        </member>
        <member name="F:Dse.QueryOptions.DefaultSerialConsistencyLevel">
            <summary>
            The default serial consistency level for conditional updates: <c>ConsistencyLevel.Serial</c>.
            </summary>
        </member>
        <member name="F:Dse.QueryOptions.DefaultPageSize">
            <summary>
            The default page size for SELECT queries: 5000.
            </summary>
        </member>
        <member name="F:Dse.QueryOptions.DefaultRetryOnTimeout">
            <summary>
            Default value for <see cref="P:Dse.QueryOptions.RetryOnTimeout"/>
            </summary>
        </member>
        <member name="P:Dse.QueryOptions.RetryOnTimeout">
            <summary>
            Gets a value that determines if the client should retry when it didn't hear back from a host within <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/>.
            <para>
            DEPRECATED: Instead, use <see cref="M:Dse.IExtendedRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)"/> to control the behavior when 
            <see cref="T:Dse.OperationTimedOutException"/> is obtained.
            </para>
            </summary>
        </member>
        <member name="M:Dse.QueryOptions.SetConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the default consistency level to use for queries.
            
            The consistency level set through this method will be use for queries
            that don't explicitely have a consistency level.
            </summary>
            <param name="consistencyLevel">the new consistency level to set as default.</param>
            <returns>this QueryOptions instance</returns>
        </member>
        <member name="M:Dse.QueryOptions.GetConsistencyLevel">
            <summary>
             The default consistency level used by queries.
            </summary>
            <returns>the default consistency level used by queries.</returns>
        </member>
        <member name="M:Dse.QueryOptions.SetSerialConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Sets the default serial consistency level to use for queries.
            The serial consistency level set through this method will be use for queries
            that don't explicitely have a serial consistency level.
            </summary>
            <param name="serialConsistencyLevel">the new serial consistency level to set as default.</param>
            <returns>this QueryOptions instance.</returns>
        </member>
        <member name="M:Dse.QueryOptions.GetSerialConsistencyLevel">
            <summary>
            The default serial consistency level used by queries.
            </summary>
            <returns>the default serial consistency level used by queries.</returns>
        </member>
        <member name="M:Dse.QueryOptions.GetSerialConsistencyLevelOrDefault(Dse.IStatement)">
            <summary>
            Gets the serial consistency level of the statement or the default value from the query options.
            </summary>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Dse.QueryOptions.SetPageSize(System.Int32)">
            <summary>
            Sets the default page size to use for SELECT queries.
            The page size set through this method will be use for queries
            that don't explicitely have a page size.
            </summary>
            <param name="pageSize">the new page size to set as default. It must be
            strictly positive but you can use int.MaxValue to disable paging.</param>
            <returns>this QueryOptions instance</returns>
        </member>
        <member name="M:Dse.QueryOptions.SetRetryOnTimeout(System.Boolean)">
            <summary>
            Determines if the client should retry when it didn't hear back from a host within <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/>.
            <para>
            DEPRECATED: Instead, use <see cref="M:Dse.IExtendedRetryPolicy.OnRequestError(Dse.IStatement,Dse.Configuration,System.Exception,System.Int32)"/> to control the behavior when 
            <see cref="T:Dse.OperationTimedOutException"/> is obtained.
            </para>
            </summary>
        </member>
        <member name="M:Dse.QueryOptions.GetPageSize">
            <summary>
            The default page size used by queries.
            </summary>
            <returns>the default page size used by queries.</returns> 
        </member>
        <member name="M:Dse.QueryOptions.SetDefaultIdempotence(System.Boolean)">
            <summary>
            Sets the default idempotence for all queries.
            </summary>
        </member>
        <member name="M:Dse.QueryOptions.GetDefaultIdempotence">
            <summary>
            Gets the default idempotence for all queries.
            </summary>
        </member>
        <member name="M:Dse.QueryOptions.IsPrepareOnAllHosts">
            <summary>
            Determines whether the driver should prepare statements on all hosts in the cluster.
            </summary>
        </member>
        <member name="M:Dse.QueryOptions.SetPrepareOnAllHosts(System.Boolean)">
            <summary>
            Sets whether the driver should prepare statements on all hosts in the cluster.
            <para>
            A statement is normally prepared in two steps: prepare the query on a single host in the cluster; 
            if that succeeds, prepare on all other hosts.
            </para>
            <para>
            This option controls whether step 2 is executed. It is enabled by default.
            </para>
            </summary>
            <remarks>
            <para>
            The reason why you might want to disable it is to optimize network usage if you have a large 
            number of clients preparing the same set of statements at startup. If your load balancing policy
            distributes queries randomly, each client will pick a different host to prepare its statements, 
            and on the whole each host has a good chance of having been hit by at least one client for each statement.
            </para>
            <para>
            On the other hand, if that assumption turns out to be wrong and one host hasn't prepared a given
            statement, it needs to be re-prepared on the fly the first time it gets executed; this causes a 
            performance penalty (one extra roundtrip to resend the query to prepare, and another to retry
            the execution).
            </para>
            </remarks>
        </member>
        <member name="M:Dse.QueryOptions.IsReprepareOnUp">
            <summary>
            Determines whether the driver should re-prepare all cached prepared statements on a host when its marks
            that host back up.
            </summary>
        </member>
        <member name="M:Dse.QueryOptions.SetReprepareOnUp(System.Boolean)">
            <summary>
            Set whether the driver should re-prepare all cached prepared statements on a host when it marks it back up.
            <para>This option is enabled by default.</para>
            </summary>
            <remarks>
            <para>
            The reason why you might want to disable it is to optimize reconnection time when you believe hosts 
            often get marked down because of temporary network issues, rather than the host really crashing. 
            In that case, the host still has prepared statements in its cache when the driver reconnects, 
            so re-preparing is redundant.
            </para>
            <para>
            On the other hand, if that assumption turns out to be wrong and the host had really restarted, 
            its prepared statement cache is empty, and statements need to be re-prepared on the fly the 
            first time they get executed; this causes a performance penalty (one extra roundtrip to resend 
            the query to prepare, and another to retry the execution).
            </para>
            </remarks>
        </member>
        <member name="P:Dse.QueryProtocolOptions.ValueNames">
            <summary>
            Names of the query parameters
            </summary>
        </member>
        <member name="M:Dse.QueryProtocolOptions.CreateForBatchItem(Dse.Statement)">
            <summary>
            Returns a new instance with the minimum amount of values, valid to generate a batch request item.
            </summary>
        </member>
        <member name="T:Dse.QueryTrace">
            <summary>
            The Cassandra trace for a query. 
            <para>
            The trace is generated by Cassandra when query tracing is enabled for the query. The trace itself is stored in
            Cassandra in the <c>sessions</c> and <c>events</c> table in the <c>system_traces</c> keyspace and can be 
            retrieve manually using the trace identifier (the one returned by <see cref="P:Dse.QueryTrace.TraceId"/>).
            </para>
            </summary>
        </member>
        <member name="P:Dse.QueryTrace.TraceId">
            <summary>
            The identifier of this trace.
            </summary>
            <returns>the identifier of this trace.</returns>
        </member>
        <member name="P:Dse.QueryTrace.RequestType">
            <summary>
            The type of request.
            </summary>
            <returns>the type of request. This method returns <c>null</c> if the
             request type is not yet available.</returns>
        </member>
        <member name="P:Dse.QueryTrace.DurationMicros">
            <summary>
            The (server side) duration of the query in microseconds.
            </summary>
            <returns>
            The (server side) duration of the query in microseconds. This method will return <c>Int32.MinValue</c> if
            the duration is not yet available.
            </returns>
        </member>
        <member name="P:Dse.QueryTrace.Coordinator">
            <summary>
            The coordinator host of the query.
            </summary>
            <returns>
            The coordinator host of the query. This method returns <c>null</c> if the coordinator is not yet
            available.
            </returns>
        </member>
        <member name="P:Dse.QueryTrace.Parameters">
            <summary>
            The parameters attached to this trace.
            </summary>
            <returns>
            The parameters attached to this trace. This method returns <c>null</c> if the coordinator is not yet
            available.
            </returns>
        </member>
        <member name="P:Dse.QueryTrace.StartedAt">
            <summary>
            The server side timestamp of the start of this query.
            </summary>
            <returns>
            The server side timestamp of the start of this query.
            This method returns 0 if the start timestamp is not available.
            </returns>
        </member>
        <member name="P:Dse.QueryTrace.Events">
            <summary>
            The events contained in this trace.
            </summary>
            <returns>The events contained in this trace.</returns>
        </member>
        <member name="P:Dse.QueryTrace.ClientAddress">
            <summary>
            Source address of the query.
            </summary>
        </member>
        <member name="T:Dse.QueryTrace.Event">
            <summary>
            A trace event.
            <para>
            A query trace is composed of a list of trace events.
            </para>
            </summary>
        </member>
        <member name="P:Dse.QueryTrace.Event.Description">
            <summary>
            The event description, i.e. which activity this event correspond to.
            </summary>
            <returns>The event description.</returns>
        </member>
        <member name="P:Dse.QueryTrace.Event.Timestamp">
            <summary>
            The server side timestamp of the event.
            </summary>
            <returns>The server side timestamp of the event.</returns>
        </member>
        <member name="P:Dse.QueryTrace.Event.Source">
            <summary>
            The address of the host having generated this event.
            </summary>
            <returns>The address of the host having generated this event.</returns>
        </member>
        <member name="P:Dse.QueryTrace.Event.SourceElapsedMicros">
            <summary>
            The number of microseconds elapsed on the source when this event occurred
            since when the source started handling the query.
            </summary>
            <returns>the elapsed time on the source host when that event happened in
             microseconds.</returns>
        </member>
        <member name="P:Dse.QueryTrace.Event.ThreadName">
            <summary>
            The name of the thread on which this event occurred.
            </summary>
            <returns>the name of the thread on which this event occurred.</returns>
        </member>
        <member name="T:Dse.RegularStatement">
            <summary>
             A non-prepared CQL statement.
             This class represents a query string along with query options. This class can be extended but
             <see cref="T:Dse.SimpleStatement"/> is provided to build a <see cref="T:Dse.IStatement"/>
             directly from its query string.
            </summary>
        </member>
        <member name="P:Dse.RegularStatement.QueryValueNames">
            <summary>
            Names of the parameters
            </summary>
        </member>
        <member name="P:Dse.RegularStatement.QueryString">
            <summary>
             Gets the query string for this statement.
            </summary>
        </member>
        <member name="P:Dse.RegularStatement.Serializer">
            <summary>
            Gets or sets the serialized used
            </summary>
        </member>
        <member name="T:Dse.ReplicationStrategies">
            <summary>
            Provides utility methods to build replication strategies when creating a keyspace
            </summary>
        </member>
        <member name="M:Dse.ReplicationStrategies.CreateSimpleStrategyReplicationProperty(System.Int32)">
            <summary>
             Returns replication property for SimpleStrategy.
            </summary>        
            <param name="replicationFactor">Replication factor for the whole cluster.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Dse.ReplicationStrategies.CreateNetworkTopologyStrategyReplicationProperty(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
             Returns replication property for NetworkTopologyStrategy.
            </summary>        
            <param name="datacentersReplicationFactors">Dictionary in which key is the name of a data-center,
            value is a replication factor for that data-center.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Dse.ReplicationStrategies.CreateReplicationProperty(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Returns replication property for other replication strategy. 
             Use it only if there is no dedicated method that creates replication property for specified replication strategy.
            </summary>
            <param name="strategyClass">Name of replication strategy.</param>
            <param name="subOptions">Dictionary in which key is the name of sub-option,
            value is a value for that sub-option.</param>
            <returns>a dictionary of replication property sub-options.</returns>         
        </member>
        <member name="M:Dse.Requests.BatchRequest.GetRequestTimestamp(Dse.ProtocolVersion,Dse.BatchStatement,Dse.Policies)">
            <summary>
            Gets the timestamp of the request or null if not defined.
            </summary>
            <exception cref="T:System.NotSupportedException" />
        </member>
        <member name="T:Dse.Requests.ExecuteRequest">
            <summary>
            Represents a protocol EXECUTE request
            </summary>
        </member>
        <member name="T:Dse.Requests.ICqlRequest">
            <summary>
            Represents an CQL Request (BATCH, EXECUTE or QUERY)
            </summary>
        </member>
        <member name="P:Dse.Requests.ICqlRequest.Consistency">
            <summary>
            Gets or sets the Consistency for the Request.
            It defaults to the one provided by the Statement but it can be changed by the retry policy.
            </summary>
        </member>
        <member name="P:Dse.Requests.ICqlRequest.Payload">
            <summary>
            Gets or sets the custom payload to be set with this request
            </summary>
        </member>
        <member name="T:Dse.Requests.IQueryRequest">
            <summary>
            Represents a QUERY or EXECUTE request that can be included in a batch
            </summary>
        </member>
        <member name="P:Dse.Requests.IQueryRequest.PagingState">
            <summary>
            The paging state for the request
            </summary>
        </member>
        <member name="M:Dse.Requests.IQueryRequest.WriteToBatch(Dse.FrameWriter)">
            <summary>
            Method used by the batch to build each individual request
            </summary>
        </member>
        <member name="M:Dse.Requests.IRequest.WriteFrame(System.Int16,System.IO.MemoryStream,Dse.Serialization.Serializer)">
            <summary>
            Writes the frame for this request on the provided stream
            </summary>
        </member>
        <member name="M:Dse.Requests.PrepareHandler.Prepare(Dse.Session,Dse.Serialization.Serializer,Dse.Requests.PrepareRequest)">
            <summary>
            Executes the prepare request on the first host selected by the load balancing policy.
            When <see cref="M:Dse.QueryOptions.IsPrepareOnAllHosts"/> is enabled, it prepares on the rest of the hosts in
            parallel.
            </summary>
        </member>
        <member name="M:Dse.Requests.PrepareHandler.CanBeRetried(System.Exception)">
            <summary>
            Determines if the request can be retried on the next node, based on the exception information.
            </summary>
        </member>
        <member name="P:Dse.Requests.PrepareRequest.Keyspace">
            <summary>
            Gets the keyspace for the query, only defined when keyspace is different than the current keyspace.
            </summary>
        </member>
        <member name="P:Dse.Requests.PrepareRequest.Query">
            <summary>
            The CQL string to be prepared
            </summary>
        </member>
        <member name="T:Dse.Requests.QueryRequest">
            <summary>
            Represents a protocol QUERY request
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestExecution.Start(System.Boolean)">
            <summary>
            Starts a new execution using the current request
            </summary>
            <param name="useCurrentHost"></param>
        </member>
        <member name="M:Dse.Requests.RequestExecution.Send(Dse.Requests.IRequest,System.Action{System.Exception,Dse.Responses.Response})">
            <summary>
            Sends a new request using the active connection
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestExecution.FillRowSet(Dse.RowSet,Dse.Responses.ResultResponse)">
            <summary>
            Fills the common properties of the RowSet
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestExecution.HandleException(System.Exception)">
            <summary>
            Checks if the exception is either a Cassandra response error or a socket exception to retry or failover if necessary.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestExecution.GetRetryDecision(System.Exception,Dse.IExtendedRetryPolicy,Dse.IStatement,Dse.Configuration,System.Int32)">
            <summary>
            Gets the retry decision based on the exception from Cassandra
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestExecution.PrepareAndRetry(System.Byte[])">
            <summary>
            Sends a prepare request before retrying the statement
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestExecution.ReprepareResponseHandler(System.Exception,Dse.Responses.Response)">
            <summary>
            Handles the response of a (re)prepare request and retries to execute on the same connection
            </summary>
        </member>
        <member name="T:Dse.Requests.RequestHandler">
            <summary>
            Handles request executions, each execution handles retry and failover.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.#ctor(Dse.ISession,Dse.Serialization.Serializer,Dse.Requests.IRequest,Dse.IStatement)">
            <summary>
            Creates a new instance using a request and the statement.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.#ctor(Dse.ISession,Dse.Serialization.Serializer,Dse.Requests.IRequest)">
            <summary>
            Creates a new instance using a request with no statement.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.#ctor(Dse.ISession,Dse.Serialization.Serializer,Dse.IStatement)">
            <summary>
            Creates a new instance using the statement to build the request.
            Statement can not be null.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.#ctor(Dse.ISession,Dse.Serialization.Serializer)">
            <summary>
            Creates a new instance with no request, suitable for getting a connection.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.GetRequest(Dse.IStatement,Dse.Serialization.Serializer,Dse.Configuration)">
            <summary>
            Gets the Request to send to a cassandra node based on the statement type
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.SetCompleted(System.Exception,Dse.RowSet)">
            <summary>
            Marks this instance as completed (if not already) and sets the exception or result
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.SetCompleted(Dse.RowSet,System.Action)">
            <summary>
            Marks this instance as completed (if not already) and in a new Task using the default scheduler, it invokes the action and sets the result
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.SetCompleted(System.Exception,Dse.RowSet,System.Action)">
            <summary>
            Marks this instance as completed.
            If ex is not null, sets the exception.
            If action is not null, it invokes it using the default task scheduler.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.GetNextConnection(System.Collections.Generic.Dictionary{System.Net.IPEndPoint,System.Exception})">
            <summary>
            Gets a connection from the next host according to the load balancing policy
            </summary>
            <exception cref="T:Dse.InvalidQueryException">When the keyspace is not valid</exception>
            <exception cref="T:Dse.UnsupportedProtocolVersionException">When the protocol version is not supported in the host</exception>
            <exception cref="T:Dse.NoHostAvailableException"></exception>
        </member>
        <member name="M:Dse.Requests.RequestHandler.GetConnectionFromHost(Dse.Host,Dse.HostDistance,Dse.Session,System.Collections.Generic.IDictionary{System.Net.IPEndPoint,System.Exception})">
            <summary>
            Gets a connection from a host or null if its not possible, filling the triedHosts map with the failures.
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.StartNewExecution">
            <summary>
            Starts a new execution and adds it to the executions collection
            </summary>
        </member>
        <member name="M:Dse.Requests.RequestHandler.ScheduleNext">
            <summary>
            Schedules the next delayed execution
            </summary>
        </member>
        <member name="T:Dse.BatchType">
            <summary>
            The type of batch to use
            </summary>
        </member>
        <member name="F:Dse.BatchType.Logged">
            <summary>
            A logged batch: Cassandra will first write the batch to its distributed batch log to ensure the atomicity of the batch.
            </summary>
        </member>
        <member name="F:Dse.BatchType.Unlogged">
            <summary>
            An unlogged batch: The batch will not be written to the batch log and atomicity of the batch is NOT guaranteed.
            </summary>
        </member>
        <member name="F:Dse.BatchType.Counter">
            <summary>
            A counter batch
            </summary>
        </member>
        <member name="P:Dse.Responses.EventResponse.CassandraEventArgs">
            <summary>
            Information on the actual event
            </summary>
        </member>
        <member name="P:Dse.Responses.Response.Reader">
            <summary>
            Big-endian binary reader of the response frame
            </summary>
        </member>
        <member name="P:Dse.Responses.Response.TraceId">
            <summary>
            Identifier of the Cassandra trace 
            </summary>
        </member>
        <member name="P:Dse.Responses.Response.Warnings">
            <summary>
            Warnings from the server which were generated by the server to go along with this response.
            </summary>
        </member>
        <member name="P:Dse.Responses.Response.CustomPayload">
            <summary>
            Gets the incoming custom payload.
            </summary>
        </member>
        <member name="P:Dse.Responses.ResultResponse.Kind">
            <summary>
            Cassandra result kind
            </summary>
        </member>
        <member name="P:Dse.Responses.ResultResponse.Output">
            <summary>
            Output of the result response based on the kind of result
            </summary>
        </member>
        <member name="P:Dse.Responses.ResultResponse.NewResultMetadataId">
            <summary>
            When the Output is ROWS, it returns the new_metadata_id.
            It returns null when new_metadata_id is not provided or the output is not ROWS.
            </summary>
        </member>
        <member name="T:Dse.RoutingKey">
            <summary>
            Routing key using to determine the node for each partition
            </summary>
        </member>
        <member name="P:Dse.RoutingKey.RawRoutingKey">
            <summary>
            Byte array representing the partition key (or one of the partition)
            </summary>
        </member>
        <member name="P:Dse.CqlColumn.Index">
            <summary>
            Index of the column in the rowset
            </summary>
        </member>
        <member name="P:Dse.CqlColumn.Type">
            <summary>
            CLR Type of the column
            </summary>
        </member>
        <member name="T:Dse.ExecutionInfo">
            <summary>
             Basic information on the execution of a query. <p> This provides the
             following information on the execution of a (successful) query: </p> <ul> <li>The
             list of Cassandra hosts tried in order (usually just one, unless a node has
             been tried but was dead/in error or a timeout provoked a retry (which depends
             on the RetryPolicy)).</li> <li>The consistency level achieved by the query
             (usually the one asked, though some specific RetryPolicy may allow this to be
             different).</li> <li>The query trace recorded by Cassandra if tracing had
             been set for the query.</li> </ul>
            </summary>
        </member>
        <member name="P:Dse.ExecutionInfo.TriedHosts">
            <summary>
            Gets the list of host that were queried before getting a valid response, 
            being the last host the one that replied correctly.
            </summary>
        </member>
        <member name="P:Dse.ExecutionInfo.Warnings">
            <summary>
            Returns the server-side warnings for this query.
            <para>
            This feature is only available for Cassandra 2.2 or above; with lower versions, this property always returns null.
            </para>
            </summary>
        </member>
        <member name="P:Dse.ExecutionInfo.IncomingPayload">
            <summary>
            Returns the incoming custom payload set by the server with its response, or null if the server have not include any custom payload.
            <para>
            This feature is only available for Cassandra 2.2 or above; with lower versions, this property always returns null.
            </para>
            </summary>
        </member>
        <member name="P:Dse.ExecutionInfo.QueriedHost">
            <summary>
            Retrieves the coordinator that responded to the request
            </summary>
        </member>
        <member name="P:Dse.ExecutionInfo.QueryTrace">
            <summary>
            Gets the trace for the query execution.
            </summary>
        </member>
        <member name="P:Dse.ExecutionInfo.AchievedConsistency">
            <summary>
            Gets the final achieved consistency
            </summary>
        </member>
        <member name="M:Dse.ExecutionInfo.GetQueryTraceAsync">
            <summary>
            Gets the trace information for the query execution without blocking.
            </summary>
        </member>
        <member name="T:Dse.Row">
            <summary>
            Represents an CQL row
            </summary>
        </member>
        <member name="P:Dse.Row.ColumnIndexes">
            <summary>
            Gets or sets the index of the columns within the row
            </summary>
        </member>
        <member name="P:Dse.Row.Columns">
            <summary>
            Gets or sets the columns information
            </summary>
        </member>
        <member name="P:Dse.Row.Length">
            <summary>
            Gets the total amount of values inside the row
            </summary>
        </member>
        <member name="P:Dse.Row.Item(System.Int32)">
            <summary>
            Gets the stored value in the column specified by index
            </summary>
        </member>
        <member name="P:Dse.Row.Item(System.String)">
            <summary>
            Gets the stored value in the column specified by name
            </summary>
        </member>
        <member name="M:Dse.Row.#ctor">
            <summary>
            Initializes a new instance of the Cassandra.Row class
            </summary>
        </member>
        <member name="M:Dse.Row.#ctor(System.Int32,System.Byte[][],Dse.CqlColumn[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the Cassandra.Row class
            </summary>
        </member>
        <member name="M:Dse.Row.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the row values from the first position to the last one.
            </summary>
        </member>
        <member name="M:Dse.Row.IsNull(System.String)">
            <summary>
            Determines if the value in the column is null
            </summary>
        </member>
        <member name="M:Dse.Row.IsNull(System.Int32)">
            <summary>
            Determines if the value in the column is null
            </summary>
        </member>
        <member name="M:Dse.Row.GetColumn(System.String)">
            <summary>
            Gets a column information by name. Returns null if not found.
            </summary>
        </member>
        <member name="M:Dse.Row.Dse#IRow#ContainsColumn(System.String)">
            <summary>
            Returns true if the row contains information of the provided column name.
            </summary>
        </member>
        <member name="M:Dse.Row.ContainsColumn(System.String)">
            <summary>
            Returns true if the row contains information of the provided column name.
            </summary>
        </member>
        <member name="M:Dse.Row.GetValue(System.Type,System.Int32)">
            <summary>
            Gets the stored value in the column specified by index
            </summary>
            <param name="type">Target type</param>
            <param name="index">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Row.GetValue(System.Type,System.String)">
            <summary>
            Gets the stored value in the column specified by name
            </summary>
            <param name="type">Target type</param>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Row.GetValue``1(System.Int32)">
            <summary>
            Gets the stored value in the column specified by index.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="index">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Row.GetValue``1(System.String)">
            <summary>
            Gets the stored value in the column specified by name.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="name">Name of the column</param>
            <returns></returns>
        </member>
        <member name="M:Dse.Row.TryConvertToType(System.Object,Dse.ColumnDesc,System.Type)">
            <summary>
            Handle conversions for some types that, for backward compatibility,
            the result type can be more than 1 depending on the type provided by the user 
            </summary>
        </member>
        <member name="T:Dse.IRow">
            <summary>
            Internal representation of a Row
            </summary>
        </member>
        <member name="T:Dse.RowSet">
            <summary>
            Represents the result of a query returned by the server.
            <para>
            The retrieval of the rows of a <see cref="T:Dse.RowSet"/> is generally paged (a first page
            of result is fetched and the next one is only fetched once all the results
            of the first page have been consumed). The size of the pages can be configured
            either globally through <see cref="M:Dse.QueryOptions.SetPageSize(System.Int32)"/> or per-statement
            with <see cref="M:Dse.IStatement.SetPageSize(System.Int32)"/>. Though new pages are automatically
            and transparently fetched when needed, it is possible to force the retrieval
            of the next page early through <see cref="M:Dse.RowSet.FetchMoreResults"/> and  <see cref="M:Dse.RowSet.FetchMoreResultsAsync"/>.
            </para>
            <para>
            The RowSet dequeues <see cref="T:Dse.Row"/> items while iterated. After a full enumeration of this instance, following
            enumerations will be empty, as all rows have been dequeued.
            </para>
            </summary>
            <remarks>
            RowSet paging is not available with the version 1 of the native protocol.
            If the protocol version 1 is in use, a RowSet is always fetched in it's entirely and
            it's up to the client to make sure that no query can yield ResultSet that won't hold
            in memory.
            </remarks>
            <remarks>Parallel enumerations are supported and thread-safe.</remarks>
        </member>
        <member name="P:Dse.RowSet.AutoPage">
            <summary>
            Determines if when dequeuing, it will automatically fetch the following result pages.
            </summary>
        </member>
        <member name="M:Dse.RowSet.SetFetchNextPageHandler(System.Func{System.Byte[],System.Threading.Tasks.Task{Dse.RowSet}},System.Int32)">
            <summary>
            Sets the method that is called to get the next page.
            </summary>
        </member>
        <member name="P:Dse.RowSet.RowQueue">
            <summary>
            Gets or set the internal row list. It contains the rows of the latest query page.
            </summary>
        </member>
        <member name="P:Dse.RowSet.InnerQueueCount">
            <summary>
            Gets the amount of items in the internal queue. For testing purposes.
            </summary>
        </member>
        <member name="P:Dse.RowSet.Info">
            <summary>
            Gets the execution info of the query
            </summary>
        </member>
        <member name="P:Dse.RowSet.Columns">
            <summary>
            Gets or sets the columns in the RowSet
            </summary>
        </member>
        <member name="P:Dse.RowSet.PagingState">
            <summary>
            Gets or sets the paging state of the query for the RowSet.
            When set it states that there are more pages.
            </summary>
        </member>
        <member name="M:Dse.RowSet.IsExhausted">
            <summary>
            Returns whether this ResultSet has more results.
            It has side-effects, if the internal queue has been consumed it will page for more results.
            </summary>
            <seealso cref="P:Dse.RowSet.IsFullyFetched"/>
        </member>
        <member name="P:Dse.RowSet.IsFullyFetched">
            <summary>
            Whether all results from this result set has been fetched from the database.
            </summary>
        </member>
        <member name="M:Dse.RowSet.#ctor">
            <summary>
            Creates a new instance of RowSet.
            </summary>
        </member>
        <member name="M:Dse.RowSet.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of RowSet.
            </summary>
            <param name="isVoid">Determines if the RowSet instance is created for a VOID result</param>
        </member>
        <member name="M:Dse.RowSet.Empty">
            <summary>
            Returns a new RowSet instance without any columns or rows, designed for VOID results.
            </summary>
        </member>
        <member name="M:Dse.RowSet.AddRow(Dse.Row)">
            <summary>
            Adds a row to the inner row list
            </summary>
        </member>
        <member name="M:Dse.RowSet.FetchMoreResults">
            <summary>
            Forces the fetching the next page of results for this <see cref="T:Dse.RowSet"/>.
            </summary>
        </member>
        <member name="M:Dse.RowSet.FetchMoreResultsAsync">
            <summary>
            Asynchronously retrieves the next page of results for this <see cref="T:Dse.RowSet"/>.
            <para>
            The Task will be completed once the internal queue is filled with the new <see cref="T:Dse.Row"/>
            instances.
            </para>
            </summary>
        </member>
        <member name="M:Dse.RowSet.GetAvailableWithoutFetching">
            <summary>
            The number of rows available in this row set that can be retrieved without blocking to fetch.
            </summary>
        </member>
        <member name="M:Dse.RowSet.GetRows">
            <summary>
            For backward compatibility: It is possible to iterate using the RowSet as it is enumerable.
            <para>Obsolete: Note that it will be removed in future versions</para>
            </summary>
        </member>
        <member name="M:Dse.RowSet.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Dse.RowSet.PageNext">
            <summary>
            Gets the next results and add the rows to the current <see cref="T:Dse.RowSet"/> queue.
            </summary>
        </member>
        <member name="M:Dse.RowSet.Dispose">
            <summary>
            For backward compatibility only
            </summary>
        </member>
        <member name="T:Dse.ColumnTypeCode">
            <summary>
            Specifies a Cassandra data type of a field
            </summary>
        </member>
        <member name="F:Dse.ColumnTypeCode.Udt">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:Dse.ColumnTypeCode.Tuple">
            <summary>
            Tuple of n subtypes
            </summary>
        </member>
        <member name="T:Dse.IColumnInfo">
            <summary>
            Specifies the type information associated with collections, maps, udts and other Cassandra types
            </summary>
        </member>
        <member name="T:Dse.UdtColumnInfo">
            <summary>
            Represents the type information associated with a User Defined Type
            </summary>
        </member>
        <member name="P:Dse.UdtColumnInfo.Name">
            <summary>
            Fully qualified type name: keyspace.typeName
            </summary>
        </member>
        <member name="P:Dse.UdtColumnInfo.Fields">
            <summary>
            Gets the list of the inner fields contained in the UDT definition
            </summary>
        </member>
        <member name="T:Dse.TupleColumnInfo">
            <summary>
            Represents the information associated with a tuple column.
            </summary>
        </member>
        <member name="P:Dse.TupleColumnInfo.Elements">
            <summary>
            Gets the list of the inner fields contained in the UDT definition
            </summary>
        </member>
        <member name="T:Dse.ColumnDesc">
            <summary>
            Represents the information for a given data type
            </summary>
        </member>
        <member name="T:Dse.RowSetMetadata">
            <summary>
            Represents the information of columns and other state values associated with a RowSet
            </summary>
        </member>
        <member name="P:Dse.RowSetMetadata.ColumnIndexes">
            <summary>
            Gets or sets the index of the columns within the row
            </summary>
        </member>
        <member name="P:Dse.RowSetMetadata.NewResultMetadataId">
            <summary>
            Gets the new_metadata_id.
            </summary>
        </member>
        <member name="P:Dse.RowSetMetadata.Keyspace">
            <summary>
            Returns the keyspace as defined in the metadata response by global tables spec or the first column.
            </summary>
        </member>
        <member name="P:Dse.RowSetMetadata.PartitionKeys">
            <summary>
            Gets or sets the column index of the partition keys.
            It returns null when partition keys were not parsed.
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.Keyspace">
            <summary>
            The keyspace affected
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.Table">
            <summary>
            The table affected
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.What">
            <summary>
            The type of change in the schema object
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.Type">
            <summary>
            The custom type affected
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.FunctionName">
            <summary>
            Name of the Cql function affected
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.AggregateName">
            <summary>
            Name of the aggregate affected
            </summary>
        </member>
        <member name="P:Dse.SchemaChangeEventArgs.Signature">
            <summary>
            Signature of the function or aggregate
            </summary>
        </member>
        <member name="M:Dse.SchemaParser.GetInstance(System.Version,Dse.Metadata,System.Func{System.String,System.String,System.Threading.Tasks.Task{Dse.UdtColumnInfo}},Dse.SchemaParser)">
            <summary>
            Creates a new instance if the currentInstance is not valid for the given Cassandra version
            </summary>
        </member>
        <member name="M:Dse.SchemaParser.GetKeyspace(System.String)">
            <summary>
            Gets the keyspace metadata
            </summary>
            <returns>The keyspace metadata or null if not found</returns>
        </member>
        <member name="M:Dse.SchemaParser.GetKeyspaces(System.Boolean)">
            <summary>
            Gets all the keyspaces metadata
            </summary>
        </member>
        <member name="T:Dse.SchemaParserV1">
            <summary>
            Schema parser for metadata tables for Cassandra versions 2.2 or below
            </summary>
        </member>
        <member name="M:Dse.SchemaParserV1.GetIndexesFromColumns(System.Collections.Generic.IEnumerable{Dse.TableColumn})">
            <summary>
            Gets the index metadata based on the legacy column metadata
            </summary>
        </member>
        <member name="T:Dse.SchemaParserV2">
            <summary>
            Schema parser for metadata tables for Cassandra version 3.0 and above
            </summary>
        </member>
        <member name="M:Dse.SchemaParserV2.PruneStaticCompactTableColumns(System.Collections.Generic.ICollection{System.Tuple{System.Int32,System.Tuple{Dse.TableColumn,Dse.DataCollectionMetadata.SortOrder}}},System.Collections.Generic.IDictionary{System.String,Dse.TableColumn})">
            <summary>
            Upon migration from thrift to CQL, we internally create a pair of surrogate clustering/regular columns
            for compact static tables. These columns shouldn't be exposed to the user but are currently returned by C*.
            We also need to remove the static keyword for all other columns in the table.
            </summary>
        </member>
        <member name="T:Dse.Search.DateRange">
            <summary>
            Represents a range of dates, corresponding to the Apache Solr type
            <a href="https://cwiki.apache.org/confluence/display/solr/Working+with+Dates"><c>DateRangeField</c></a>.
            <para>
              A date range can have one or two bounds, namely lower bound and upper bound, to represent an interval of time.
              Date range bounds are both inclusive. For example:
            </para>
            <ul>
              <li><c>[2015 TO 2016-10]</c> represents from the first day of 2015 to the last day of October 2016</li>
              <li><c>2015</c> represents during the course of the year 2015.</li>
              <li><c>[2017 TO *]</c> represents any date greater or equals to the first day of the year 2017.</li>
            </ul>
            <para>
            Note that this representation of <c>DateRangeField</c> does not support Dates outside of the range
            supported by <c>DateTimeOffset</c>: from <c>1/1/0001 12:00:00 AM +00:00</c> to <c>12/31/9999 11:59:59 PM +00:00</c>.
            </para>
            </summary>
            <remarks>DateRange instances are immutable and thread-safe.</remarks>
        </member>
        <member name="P:Dse.Search.DateRange.LowerBound">
            <summary>
            Gets the lower bound of this range (inclusive).
            </summary>
        </member>
        <member name="P:Dse.Search.DateRange.UpperBound">
            <summary>
            Gets the upper bound of this range (inclusive).
            </summary>
        </member>
        <member name="M:Dse.Search.DateRange.#ctor(Dse.Search.DateRangeBound,Dse.Search.DateRangeBound)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Search.DateRange"/> using a lower bound and an upper bound.
            <para>Consider using <see cref="M:Dse.Search.DateRange.Parse(System.String)"/> to create instances more easily.</para>
            </summary>
            <param name="lowerBound">
            A value representing the range lower bound, composed by a
            <c>DateTimeOffset</c> and a precision. Use <see cref="F:Dse.Search.DateRangeBound.Unbounded"/> for an open lower bound.
            </param>
            <param name="upperBound">
            A value representing the range upper bound, composed by a
            <c>DateTimeOffset</c> and a precision. Use <see cref="F:Dse.Search.DateRangeBound.Unbounded"/> for an open higher bound.
            </param>
        </member>
        <member name="M:Dse.Search.DateRange.#ctor(Dse.Search.DateRangeBound)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Search.DateRange"/> using a lower bound and an upper bound.
            <para>Consider using <see cref="M:Dse.Search.DateRange.Parse(System.String)"/> to create instances more easily.</para>
            </summary>
            <param name="lowerBound">
            A value representing the range lower bound, composed by a
            <c>DateTimeOffset</c> and a precision. Use <see cref="F:Dse.Search.DateRangeBound.Unbounded"/> for an open lower bound.
            </param>
        </member>
        <member name="M:Dse.Search.DateRange.Parse(System.String)">
            <summary>
            Returns the <see cref="T:Dse.Search.DateRange"/> representation from a given string.
            <para>String representations of dates are always expressed in Coordinated Universal Time(UTC)</para>
            </summary>
            <exception cref="T:System.FormatException" />
        </member>
        <member name="M:Dse.Search.DateRange.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dse.Search.DateRange.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Search.DateRange.Equals(Dse.Search.DateRange)">
            <summary>
            Returns true if the value of this DateRange instance and other are the same.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRange.CompareTo(Dse.Search.DateRange)">
            <summary>
            Compares the DateRange based to the bytes representation.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRange.ToString">
            <summary>
            Returns the string representation of the instance.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRange.op_Equality(Dse.Search.DateRange,Dse.Search.DateRange)">
            <summary>
            Compares value equality of 2 DateRange instances.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRange.op_Inequality(Dse.Search.DateRange,Dse.Search.DateRange)">
            <summary>
            Compares value inequality of 2 DateRange instances.
            </summary>
        </member>
        <member name="T:Dse.Search.DateRangeBound">
            <summary>
            Represents a date range boundary, composed by a <c>Date</c> and a precision.
            </summary>
            <remarks>DateRangeBound instances are immutable and thread-safe.</remarks>
        </member>
        <member name="F:Dse.Search.DateRangeBound.TimestampRegex">
            <summary>
            Regex to parse dates in the following format YYYY-MM-DDThh:mm:ss.mssZ.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangeBound.Unbounded">
            <summary>
            The unbounded <see cref="T:Dse.Search.DateRangeBound"/> instance. Unbounded bounds are syntactically
            represented by a <c>*</c> (star) sign.
            </summary>
        </member>
        <member name="P:Dse.Search.DateRangeBound.Timestamp">
            <summary>
            The timestamp portion of the boundary.
            </summary>
        </member>
        <member name="P:Dse.Search.DateRangeBound.Precision">
            <summary>
            The precision portion of the boundary.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRangeBound.#ctor(System.DateTimeOffset,Dse.Search.DateRangePrecision)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Search.DateRangeBound"/>.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRangeBound.#ctor(Dse.Search.DateRangePrecision,System.DateTimeOffset)">
            <summary>
            Creates a new instance of <see cref="T:Dse.Search.DateRangeBound"/> using a UTC timestamp
            </summary>
            <param name="precision"></param>
            <param name="utcTimestamp"></param>
        </member>
        <member name="M:Dse.Search.DateRangeBound.#ctor(System.Boolean)">
            <summary>
            Private constructor only intended for creating the unbounded instance
            </summary>
        </member>
        <member name="M:Dse.Search.DateRangeBound.Equals(Dse.Search.DateRangeBound)">
            <summary>
            Returns true if the value of this instance and other are the same.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRangeBound.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Search.DateRangeBound.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Dse.Search.DateRangeBound.ToString">
            <summary>
            Returns the string representation of the instance.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRangeBound.Parse(System.String)">
            <summary>
            Returns the <see cref="T:Dse.Search.DateRangeBound"/> representation of a given string.
            <para>String representations of dates are always expressed in Coordinated Universal Time(UTC)</para>
            </summary>
            <exception cref="T:System.FormatException" />
        </member>
        <member name="M:Dse.Search.DateRangeBound.op_Equality(Dse.Search.DateRangeBound,Dse.Search.DateRangeBound)">
            <summary>
            Compares value equality of 2 DateRangeBound instances.
            </summary>
        </member>
        <member name="M:Dse.Search.DateRangeBound.op_Inequality(Dse.Search.DateRangeBound,Dse.Search.DateRangeBound)">
            <summary>
            Compares value inequality of 2 DateRangeBound instances.
            </summary>
        </member>
        <member name="T:Dse.Search.DateRangePrecision">
            <summary>
            Defines the possible values of date range precision.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Year">
            <summary>
            Year precision. Any timestamp precision beyond the year portion will be ignored.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Month">
            <summary>
            Year precision. Any timestamp precision beyond the years portion will be ignored.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Day">
            <summary>
            Day precision. Any timestamp precision beyond the days portion will be ignored.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Hour">
            <summary>
            Hour precision. Any timestamp precision beyond the hours portion will be ignored.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Minute">
            <summary>
            Minute precision. Any timestamp precision beyond the minutes portion will be ignored.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Second">
            <summary>
            Second precision. Any timestamp precision beyond the seconds portion will be ignored.
            </summary>
        </member>
        <member name="F:Dse.Search.DateRangePrecision.Millisecond">
            <summary>
            Millisecond precision.
            </summary>
        </member>
        <member name="T:Dse.Serialization.CollectionSerializer">
            <summary>
            A type serializer that handles list and set CQL types.
            </summary>
        </member>
        <member name="T:Dse.Serialization.CustomTypeSerializer`1">
            <summary>
            Base serializer for custom types.
            </summary>
        </member>
        <member name="M:Dse.Serialization.CustomTypeSerializer`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the serializer for custom types.
            </summary>
            <param name="name">Fully qualified name of the custom type</param>
        </member>
        <member name="T:Dse.Serialization.DataTypeParser">
            <summary>
            A class containing methods for Cql types name parsing.
            </summary>
        </member>
        <member name="T:Dse.Serialization.DataTypeParser.CqlNames">
            <summary>
            Contains the cql literals of certain types
            </summary>
        </member>
        <member name="M:Dse.Serialization.DataTypeParser.ParseFqTypeName(System.String,System.Int32,System.Int32)">
            <summary>
            Parses a given fully-qualified class type name to get the data type information
            </summary>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Dse.Serialization.DataTypeParser.ParseTypeName(System.Func{System.String,System.String,System.Threading.Tasks.Task{Dse.UdtColumnInfo}},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Parses a given CQL type name to get the data type information
            </summary>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Dse.Serialization.DataTypeParser.HexToUtf8(System.String)">
            <summary>
            Converts a hex string to utf8 string
            </summary>
        </member>
        <member name="M:Dse.Serialization.DataTypeParser.ParseParams(System.String,System.Int32,System.Int32,System.Char,System.Char)">
            <summary>
            Parses comma delimited type parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dse.Serialization.Geometry.GeometrySerializer`1.GeometryType">
            <summary>
            WKB geometry type codes
            </summary>
        </member>
        <member name="M:Dse.Serialization.Geometry.GeometrySerializer`1.IsLittleEndian(System.Byte[],System.Int32)">
            <summary>
            Returns true if the buffer is little endian according to WKB.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Geometry.GeometrySerializer`1.UseLittleEndianSerialization">
            <summary>
            Returns true is the CPU is little-endian.
            </summary>
        </member>
        <member name="T:Dse.Serialization.Geometry.LineStringSerializer">
            <summary>
            A <see cref="T:Dse.Geometry.LineString"/> type serializer.
            </summary>
        </member>
        <member name="T:Dse.Serialization.Geometry.PointSerializer">
            <summary>
            A <see cref="T:Dse.Geometry.Point"/> type serializer.
            </summary>
        </member>
        <member name="F:Dse.Serialization.Graph.GraphSON1.GraphSON1ContractResolver.Settings">
            <summary>
            A single instance of a JsonSerializerSettings that uses this ContractResolver.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetRaw">
            <summary>
            Gets the raw data represented by this instance.
            <para>
            Raw internal representation might be different depending on the graph serialization format and
            it is subject to change without any prior notice.
            </para>
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetTokenValue``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns either a scalar value or an array representing the token value, performing conversions when required.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetTokenValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns either a JSON supported scalar value, a GraphNode or an Array of GraphNodes.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.HasProperty(System.String)">
            <summary>
            Returns true if the property is defined in this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the underlying value is not an object tree</exception>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetHashCode">
            <summary>
            Gets the hash code for this instance, based on its value.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.GetIProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.To(System.Type)">
            <summary>
            Returns the representation of the <see cref="T:Dse.Graph.GraphNode"/> as an instance of the type provided.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.ToArray">
            <summary>
            Converts the instance into an array when the internal representation is a json array.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON1.GraphSON1Node.ToString">
            <summary>
            Returns the json representation of the result.
            </summary>
        </member>
        <member name="F:Dse.Serialization.Graph.GraphSON2.GraphSON2ContractResolver.Settings">
            <summary>
            A single instance of a JsonSerializerSettings that uses this ContractResolver.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.GetTokenValue``1(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns either a scalar value or an array representing the token value, performing conversions when required.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.HasProperty(System.String)">
            <summary>
            Returns true if the property is defined in this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the underlying value is not an object tree</exception>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.GetHashCode">
            <summary>
            Gets the hash code for this instance, based on its value.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.GetProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.GetIProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.To(System.Type)">
            <summary>
            Returns the representation of the <see cref="T:Dse.Graph.GraphNode"/> as an instance of the type provided.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Throws NotSupportedException when the target type is not supported
            </exception>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.ToArray">
            <summary>
            Converts the instance into an array when the internal representation is a json array.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.GraphSON2.GraphSON2Node.ToString">
            <summary>
            Returns the json representation of the result.
            </summary>
        </member>
        <member name="T:Dse.Serialization.Graph.INode">
            <summary>
            Represents a xml node
            </summary>
        </member>
        <member name="P:Dse.Serialization.Graph.INode.IsArray">
            <summary>
            Returns true if the underlying value is an array.
            </summary>
        </member>
        <member name="P:Dse.Serialization.Graph.INode.IsObjectTree">
            <summary>
            Returns true if the underlying value is an object tree.
            </summary>
        </member>
        <member name="P:Dse.Serialization.Graph.INode.IsScalar">
            <summary>
            Returns true if the underlying value is a scalar value (string, double, boolean, ...).
            </summary>
        </member>
        <member name="P:Dse.Serialization.Graph.INode.Bulk">
            <summary>
            Gets the number of identical results represented by this instance.
            It represents the number of times it should be repeated. Defaults to 1.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.Get``1(System.String,System.Boolean)">
            <summary>
            Gets the typed value of a property of the result.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.GetProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.GetIProperties">
            <summary>
            Gets the a dictionary of properties of this node.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.GetRaw">
            <summary>
            Gets the raw data represented by this instance.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.HasProperty(System.String)">
            <summary>
            Returns true if the property is defined in this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the underlying value is not an object tree</exception>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.To(System.Type)">
            <summary>
            Returns the representation of the node as an instance of the type provided.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.ToArray">
            <summary>
            Returns the current representation as an Array
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.ToString">
            <summary>
            When the value is scalar, returns the string representation of the scalar.
            When the value is a object tree, it returns the string representation of the tree.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Graph.INode.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values.
            </summary>
        </member>
        <member name="T:Dse.Serialization.LegacyTypeSerializer">
            <summary>
            Legacy <see cref="T:Dse.Serialization.ITypeSerializer"/> to support <see cref="T:Dse.ITypeAdapter"/>.
            </summary>
        </member>
        <member name="T:Dse.Serialization.Primitive.BigIntegerSerializer">
            <summary>
            A serializer for CQL type varint, CLR type BigInteger.
            </summary>
        </member>
        <member name="T:Dse.Serialization.Primitive.LongSerializer">
            <summary>
            A serializer for CQL type bigint, CLR type Int64.
            </summary>
        </member>
        <member name="F:Dse.Serialization.Search.DateRangeSerializer.ByteLengthSingleBoundary">
            <summary>
            The byte length of the serialized DateRange with a single boundary: byte + long + byte
            </summary>
        </member>
        <member name="F:Dse.Serialization.Search.DateRangeSerializer.ByteLengthTwoBoundaries">
            <summary>
            The byte length of the serialized DateRange with a 2 boundaries: byte + long + byte + long + byte
            </summary>
        </member>
        <member name="T:Dse.Serialization.Serializer">
            <summary>
            Handles types serialization from binary form to objects and the other way around.
            The instance is aware of protocol version, custom codecs, UDT mappers
            </summary>
        </member>
        <member name="F:Dse.Serialization.Serializer.UnsetBuffer">
            <summary>
            An instance of a buffer that represents the value Unset
            </summary>
        </member>
        <member name="M:Dse.Serialization.Serializer.IsAssignableFrom(Dse.CqlColumn,System.Object)">
            <summary>
            Performs a lightweight validation to determine if the source type and target type matches.
            It isn't more strict to support miscellaneous uses of the driver, like direct inputs of blobs and all that. (backward compatibility)
            </summary>
        </member>
        <member name="M:Dse.Serialization.Serializer.SetSpecificSerializers(System.Collections.Generic.IEnumerable{Dse.Serialization.ITypeSerializer})">
            <summary>
            Sets the <see cref="T:Dse.Serialization.TypeSerializer`1"/> instance to use overriding the default ones.
            </summary>
        </member>
        <member name="M:Dse.Serialization.Serializer.SetUdtMap(System.String,Dse.UdtMap)">
            <summary>
            Adds a UDT mapping definition
            </summary>
        </member>
        <member name="T:Dse.Serialization.TypeSerializer">
            <summary>
            A serializer that can encode and decode to and from a given CQL type and a given CLR Type.
            </summary>
        </member>
        <member name="M:Dse.Serialization.TypeSerializer.DecodeCollectionLength(Dse.ProtocolVersion,System.Byte[],System.Int32@)">
            <summary>
            Decodes length for collection types depending on the protocol version
            </summary>
        </member>
        <member name="M:Dse.Serialization.TypeSerializer.EncodeCollectionLength(System.UInt16,System.Int32)">
            <summary>
            Uses 2 or 4 bytes to represent the length in bytes
            </summary>
        </member>
        <member name="M:Dse.Serialization.TypeSerializer.SinceUnixEpoch(System.DateTimeOffset)">
            <summary>
            Returns the time interval since unix epoch.
            </summary>
        </member>
        <member name="M:Dse.Serialization.TypeSerializer.CheckArgument``1(System.Object)">
            <summary>
            Checks the expected type of an object
            </summary>
        </member>
        <member name="T:Dse.Serialization.TypeSerializer`1">
            <summary>
            An abstract class that represents a serializer that can encode and decode to and from a given CQL type and a
            given CLR Type.
            </summary>
            <typeparam name="T">CLR type for this serializer</typeparam>
        </member>
        <member name="P:Dse.Serialization.TypeSerializer`1.Type">
            <summary>
            Gets the CLR type for this serializer.
            </summary>
        </member>
        <member name="P:Dse.Serialization.TypeSerializer`1.TypeInfo">
            <summary>
            Gets the type information for which this serializer is valid.
            <para>
            Intended for non-primitive types such as custom types and UDTs.
            For primitive types, it should return <c>null</c>.
            </para>
            </summary>
        </member>
        <member name="P:Dse.Serialization.TypeSerializer`1.CqlType">
            <summary>
            Returns the Cassandra data type for the serializer.
            </summary>
        </member>
        <member name="M:Dse.Serialization.TypeSerializer`1.Deserialize(System.UInt16,System.Byte[],System.Int32,System.Int32,Dse.IColumnInfo)">
            <summary>
            When overridden from a derived class, it reads the byte buffer and returns the CLR representation of the
            data type.
            </summary>
            <param name="protocolVersion">The Cassandra native protocol version.</param>
            <param name="buffer">The byte array.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing data from the current stream.</param>
            <param name="length">The maximum amount of bytes to read from buffer.</param>
            <param name="typeInfo">Additional type information designed for non-primitive types.</param>
        </member>
        <member name="M:Dse.Serialization.TypeSerializer`1.Serialize(System.UInt16,`0)">
            <summary>
            When overridden from a derived class, it encodes the CLR object into the byte representation
            according to the Cassandra native protocol.
            </summary>
            <param name="protocolVersion">The Cassandra native protocol version.</param>
            <param name="value">The object to encode.</param>
        </member>
        <member name="T:Dse.Serialization.TypeSerializerDefinitions">
            <summary>
            Contains <see cref="T:Dse.Serialization.TypeSerializer`1"/> definitions for the driver to use, replacing the default ones.
            </summary>
        </member>
        <member name="M:Dse.Serialization.TypeSerializerDefinitions.Define``1(Dse.Serialization.TypeSerializer{``0})">
            <summary>
            Defines a new <see cref="T:Dse.Serialization.TypeSerializer`1"/> instance to use.
            <para>
            If you try to define a serializer for a type that was already defined, the driver will log a warning and
            ignore it.
            </para>
            </summary>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:Dse.InvalidTypeException">When trying to define a Serializer for types that are not allowed.</exception>
        </member>
        <member name="T:Dse.Serialization.UdtSerializer">
            <summary>
            Represents a <see cref="T:Dse.Serialization.TypeSerializer`1"/> instance that handles UDT serialization and deserialization.
            </summary>
        </member>
        <member name="M:Dse.Serialization.UdtSerializer.SetUdtMap(System.String,Dse.UdtMap)">
            <summary>
            Sets a Udt map for a given Udt name
            </summary>
            <param name="name">Fully qualified udt name case sensitive (keyspace.udtName)</param>
            <param name="map"></param>
        </member>
        <member name="T:Dse.Session">
            <summary>
            Implementation of <see cref="T:Dse.ISession"/>.
            </summary>
            <inheritdoc cref="T:Dse.ISession" />
        </member>
        <member name="P:Dse.Session.Cluster">
            <inheritdoc />
        </member>
        <member name="P:Dse.Session.Configuration">
            <summary>
            Gets the cluster configuration
            </summary>
        </member>
        <member name="P:Dse.Session.IsDisposed">
            <summary>
            Determines if the session is already disposed
            </summary>
        </member>
        <member name="P:Dse.Session.Keyspace">
            <summary>
            Gets or sets the keyspace
            </summary>
        </member>
        <member name="P:Dse.Session.UserDefinedTypes">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.BeginExecute(Dse.IStatement,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.BeginExecute(System.String,Dse.ConsistencyLevel,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.BeginPrepare(System.String,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.ChangeKeyspace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.CreateKeyspace(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.CreateKeyspaceIfNotExists(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.DeleteKeyspace(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.DeleteKeyspaceIfExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Init">
            <summary>
            Initialize the session
            </summary>
        </member>
        <member name="M:Dse.Session.Warmup">
            <summary>
            Creates the required connections on all hosts in the local DC.
            Returns a Task that is marked as completed after all pools were warmed up.
            In case, all the host pool warmup fail, it logs an error.
            </summary>
        </member>
        <member name="M:Dse.Session.EndExecute(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.EndPrepare(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Execute(Dse.IStatement)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Execute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Execute(System.String,Dse.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Execute(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.ExecuteAsync(Dse.IStatement)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.GetOrCreateConnectionPool(Dse.Host,Dse.HostDistance)">
            <summary>
            Gets or creates the connection pool for a given host
            </summary>
        </member>
        <member name="M:Dse.Session.GetPools">
            <summary>
            Gets a snapshot of the connection pools
            </summary>
        </member>
        <member name="M:Dse.Session.GetExistingPool(System.Net.IPEndPoint)">
            <summary>
            Gets the existing connection pool for this host and session or null when it does not exists
            </summary>
        </member>
        <member name="M:Dse.Session.Prepare(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.Prepare(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.PrepareAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.PrepareAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.PrepareAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Session.PrepareAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="T:Dse.SimpleAuthInfoProvider">
            <summary>
             A simple <c>AuthInfoProvider</c> implementation. <p> This provider
             allows to programmatically define authentication information that will then
             apply to all hosts. </p><p> Note that it is <b>not</b> safe to add new info to
             this provider once a Cluster instance has been created using this provider.</p>
            </summary>
        </member>
        <member name="M:Dse.SimpleAuthInfoProvider.#ctor">
            <summary>
             Creates a new, empty, simple authentication info provider.
            </summary>
        </member>
        <member name="M:Dse.SimpleAuthInfoProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Creates a new simple authentication info provider with the informations
             contained in <c>properties</c>.
            </summary>
            <param name="properties"> a map of authentication information to use.</param>
        </member>
        <member name="M:Dse.SimpleAuthInfoProvider.Add(System.String,System.String)">
            <summary>
             Adds a new property to the authentication info returned by this provider.
            </summary>
            <param name="property"> the name of the property to add. For example "username","password" etc. </param>
            <param name="value"> the value to add for <c>property</c>. </param>
            
            <returns><c>this</c> object.</returns>
        </member>
        <member name="M:Dse.SimpleAuthInfoProvider.AddAll(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Adds all the key-value pair provided as new authentication information
             returned by this provider.
            </summary>
            <param name="properties"> a map of authentication information to add. </param>
            
            <returns><c>this</c> object.</returns>
        </member>
        <member name="T:Dse.SimpleStatement">
            <summary>
             A simple <see cref="T:Dse.IStatement"/> implementation built directly from a query string.
            </summary>
        </member>
        <member name="P:Dse.SimpleStatement.QueryString">
            <summary>
             Gets the query string.
            </summary>
        </member>
        <member name="P:Dse.SimpleStatement.RoutingKey">
            <summary>
            Gets the routing key for the query.
            <para>
            Routing key can be provided using the <see cref="M:Dse.SimpleStatement.SetRoutingValues(System.Object[])"/> method.
            </para>
            </summary>
        </member>
        <member name="P:Dse.SimpleStatement.Keyspace">
            <summary>
            Returns the keyspace this query operates on, as set using <see cref="M:Dse.SimpleStatement.SetKeyspace(System.String)"/>
            <para>
            The keyspace returned is used as a hint for token-aware routing.
            </para>
            </summary>
            <remarks>
            Consider using a <see cref="T:Dse.ISession"/> connected to single keyspace using 
            <see cref="M:Dse.ICluster.Connect(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Dse.SimpleStatement.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Dse.SimpleStatement"/> without any query string or parameters.
            </summary>
        </member>
        <member name="M:Dse.SimpleStatement.#ctor(System.String)">
            <summary>
             Creates a new instance of <see cref="T:Dse.SimpleStatement"/> with the provided CQL query.
            </summary>
            <param name="query">The cql query string.</param>
        </member>
        <member name="M:Dse.SimpleStatement.#ctor(System.String,System.Object[])">
            <summary>
             Creates a new instance of <see cref="T:Dse.SimpleStatement"/> with the provided CQL query and values provided.
            </summary>
            <param name="query">The cql query string.</param>
            <param name="values">Parameter values required for the execution of <c>query</c>.</param>
            <example>
            Using positional parameters:
            <code>
            const string query = "INSERT INTO users (id, name, email) VALUES (?, ?, ?)";
            var statement = new SimpleStatement(query, id, name, email);
            </code>
            Using named parameters (using anonymous objects):
            <code>
            const string query = "INSERT INTO users (id, name, email) VALUES (:id, :name, :email)";
            var statement = new SimpleStatement(query, new { id, name, email } );
            </code>
            </example>
        </member>
        <member name="M:Dse.SimpleStatement.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Creates a new instance of <see cref="T:Dse.SimpleStatement"/> using a dictionary of parameters and a query with
            named parameters.
            </summary>
            <param name="valuesDictionary">
            A dictionary containing the query parameters values using the parameter name as keys.
            </param>
            <param name="query">The cql query string.</param>
            <remarks>
            This constructor is valid for dynamically-sized named parameters, consider using anonymous types for
            fixed-size named parameters.
            </remarks>
            <example>
            <code>
            const string query = "INSERT INTO users (id, name, email) VALUES (:id, :name, :email)";
            var parameters = new Dictionary&lt;string, object&gt; 
            {
              { "id", id },
              { "name", name },
              { "email", email },
            };
            var statement = new SimpleStatement(parameters, query);
            </code>
            </example>
            <seealso cref="M:Dse.SimpleStatement.#ctor(System.String,System.Object[])"/>
        </member>
        <member name="M:Dse.SimpleStatement.SetRoutingKey(Dse.RoutingKey[])">
            <summary>
             Set the routing key for this query. <p> This method allows to manually
             provide a routing key for this query. It is thus optional since the routing
             key is only an hint for token aware load balancing policy but is never
             mandatory. </p><p> If the partition key for the query is composite, use the
             <link>#setRoutingKey(ByteBuffer...)</link> method instead to build the
             routing key.</p>
            </summary>
            <param name="routingKeyComponents"> the raw (binary) values to compose to
             obtain the routing key.
             </param>
            <returns>this <c>SimpleStatement</c> object.  <see>Query#getRoutingKey</see></returns>
        </member>
        <member name="M:Dse.SimpleStatement.SetRoutingValues(System.Object[])">
            <summary>
            Sets the partition key values in order to route the query to the correct replicas.
            <para>For simple partition keys, set the partition key value.</para>
            <para>For composite partition keys, set the multiple the partition key values in correct order.</para>
            </summary>
        </member>
        <member name="M:Dse.SimpleStatement.Bind(System.Object[])">
            <summary>
            Sets the parameter values for the query.
            <para>
            The same amount of values must be provided as parameter markers in the query.
            </para>
            <para>
            Specify the parameter values by the position of the markers in the query or by name, 
            using a single instance of an anonymous type, with property names as parameter names.
            </para>
            </summary>
        </member>
        <member name="M:Dse.SimpleStatement.SetKeyspace(System.String)">
            <summary>
            Sets the keyspace this Statement operates on. The keyspace should only be set when the
            <see cref="T:Dse.IStatement"/> applies to a different keyspace to the logged keyspace of the
            <see cref="T:Dse.ISession"/>.
            </summary>
            <param name="name">The keyspace name.</param>
        </member>
        <member name="T:Dse.SocketOptions">
            <summary>
             Options to configure low-level socket options for the connections kept to the
             Cassandra hosts.
            </summary>
        </member>
        <member name="F:Dse.SocketOptions.DefaultConnectTimeoutMillis">
            <summary>
            Default value for <see cref="P:Dse.SocketOptions.ConnectTimeoutMillis"/>, 5000ms.
            </summary>
        </member>
        <member name="F:Dse.SocketOptions.DefaultReadTimeoutMillis">
            <summary>
            Default value for <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/>, 12000ms.
            </summary>
        </member>
        <member name="F:Dse.SocketOptions.DefaultDefunctReadTimeoutThreshold">
            <summary>
            Default value for <see cref="P:Dse.SocketOptions.DefunctReadTimeoutThreshold"/>, 64.
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.ConnectTimeoutMillis">
            <summary>
            Gets the number of milliseconds to wait for the socket to connect
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.KeepAlive">
            <summary>
            Gets if TCP keep-alive must be used 
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.SoLinger">
            <summary>
            Gets the number of seconds to remain open after the Socket.Close() is called.
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.TcpNoDelay">
            <summary>
            Gets a Boolean value that specifies whether the stream Socket is using the Nagle algorithm.
            When set to <c>false</c>, the Nagle algorithm is enabled; when set to <c>true</c> the Nagle algorithm is disabled (no delay). The default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.ReceiveBufferSize">
            <summary>
            Gets the size of the buffer used by the socket to receive
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.SendBufferSize">
            <summary>
            Gets the size of the buffer used by the socket to send
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.UseStreamMode">
            <summary>
            Determines if the driver should use either .NET NetworkStream interface (true) or SocketEventArgs interface (false, default)
            to handle the reading and writing
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.ReadTimeoutMillis">
            <summary>
            The per-host read timeout in milliseconds.
            <para>
            This defines how long the driver will wait for a given Cassandra node to answer a query.
            </para>
            Please note that this is not the maximum time a call to <see cref="M:Dse.Session.Execute(System.String)"/> may block; this is the maximum time that call will wait for one particular Cassandra host, but other hosts will be tried if one of them timeout. In other words, a <see cref="M:Dse.Session.Execute(System.String)"/> call may theoretically wait up to ReadTimeoutMillis * {number_of_cassandra_hosts} (though the total number of hosts tried for a given query also depends on the LoadBalancingPolicy in use).
            Also note that for efficiency reasons, this read timeout is approximate, it may fire up to late. It is not meant to be used for precise timeout, but rather as a protection against misbehaving Cassandra nodes.
            </summary>
        </member>
        <member name="P:Dse.SocketOptions.DefunctReadTimeoutThreshold">
            <summary>
            Gets the amount of requests that simultaneously have to timeout before closing the connection.
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetConnectTimeoutMillis(System.Int32)">
            <summary>
            Sets the number of milliseconds to wait for the socket to connect
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetKeepAlive(System.Boolean)">
            <summary>
            Sets if TCP keep-alive must be used 
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetSoLinger(System.Int32)">
            <summary>
            Sets the number of seconds to remain open after the Socket.Close() is called.
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetTcpNoDelay(System.Boolean)">
            <summary>
            Set a Boolean value that specifies whether the stream Socket is using the Nagle algorithm.
            Use <c>false</c> to enable Nagle algorithm; use <c>true</c> to disable Nagle algorithm (no delay). The default is <c>true</c>.
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetReceiveBufferSize(System.Int32)">
            <summary>
            Sets the size of the buffer used by the socket to receive
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetSendBufferSize(System.Int32)">
            <summary>
            Sets the size of the buffer used by the socket to send
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetStreamMode(System.Boolean)">
            <summary>
            Sets if the driver should use either .NET NetworkStream (true) interface or SocketEventArgs interface (false, default)
            to handle the reading and writing
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetReadTimeoutMillis(System.Int32)">
            <summary>
            Sets the per-host read timeout in milliseconds.
            <para>When setting this value, keep in mind the following:</para>
            <para>- the timeout settings used on the Cassandra side (*_request_timeout_in_ms in cassandra.yaml) should be taken into account when picking a value for this read timeout. In particular, if this read timeout option is lower than Cassandra's timeout, the driver might assume that the host is not responsive and mark it down.</para>
            <para>- the read timeout is only approximate and only control the timeout to one Cassandra host, not the full query (see <see cref="P:Dse.SocketOptions.ReadTimeoutMillis"/> for more details).</para>
            Setting a value of 0 disables client read timeouts.
            </summary>
        </member>
        <member name="M:Dse.SocketOptions.SetDefunctReadTimeoutThreshold(System.Int32)">
            <summary>
            Determines the amount of requests that simultaneously have to timeout before closing the connection.
            </summary>
        </member>
        <member name="T:Dse.SSLOptions">
            <summary>
            Defines the SSL/TLS options to connect to a ssl enabled Cassandra host
            </summary>
        </member>
        <member name="P:Dse.SSLOptions.RemoteCertValidationCallback">
            <summary>
            Verifies Cassandra host SSL certificate used for authentication.
            </summary>
        </member>
        <member name="P:Dse.SSLOptions.SslProtocol">
            <summary>
            Ssl Protocol used for communication with Cassandra hosts.
            </summary>
        </member>
        <member name="P:Dse.SSLOptions.CheckCertificateRevocation">
            <summary>
            Determines whether the certificate revocation list is checked during connection authentication.
            </summary>
        </member>
        <member name="P:Dse.SSLOptions.HostNameResolver">
            <summary>
            Gets the method to be use to determine the host name from the IP address
            </summary>
        </member>
        <member name="P:Dse.SSLOptions.CertificateCollection">
            <summary>
            Gets the collection that contains the client certificates
            </summary>
        </member>
        <member name="M:Dse.SSLOptions.#ctor">
            <summary>
             Creates SSLOptions with default values.   
            </summary>
        </member>
        <member name="M:Dse.SSLOptions.#ctor(System.Security.Authentication.SslProtocols,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Creates SSL options used for SSL connections with Casandra hosts. 
            </summary>
            <param name="sslProtocol">type of SSL protocol, default set to Tls.</param>
            <param name="checkCertificateRevocation">specifies whether the certificate revocation list is checked during connection authentication.</param>
            <param name="remoteCertValidationCallback">verifies Cassandra host SSL certificate used for authentication.
                <remarks>
                    Default RemoteCertificateValidationCallback won't establish a connection if any error will occur.         
                </remarks> 
                </param>
        </member>
        <member name="M:Dse.SSLOptions.SetCertificateCollection(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Sets the collection that contains the client certificates
            </summary>
        </member>
        <member name="M:Dse.SSLOptions.SetHostNameResolver(System.Func{System.Net.IPAddress,System.String})">
            <summary>
            Sets the method to be use to determine the host name from the host IP address
            </summary>
        </member>
        <member name="M:Dse.SSLOptions.SetCertificateRevocationCheck(System.Boolean)">
            <summary>
            Determines whether the certificate revocation list is checked during connection authentication.
            </summary>
        </member>
        <member name="M:Dse.SSLOptions.SetRemoteCertValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Determines whether the certificate revocation list is checked during connection authentication.
            </summary>
        </member>
        <member name="T:Dse.Statement">
            <summary>
            Base class for statements that contains the options.
            </summary>
        </member>
        <member name="P:Dse.Statement.SkipMetadata">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.ConsistencyLevel">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.SerialConsistencyLevel">
            <summary>
            Gets the serial consistency level for this query.
            </summary>        
        </member>
        <member name="P:Dse.Statement.PageSize">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.IsTracing">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.ReadTimeoutMillis">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.RetryPolicy">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.PagingState">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.AutoPage">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.OutgoingPayload">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.RoutingKey">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.IsIdempotent">
            <inheritdoc />
        </member>
        <member name="P:Dse.Statement.Keyspace">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.ExecutingAs(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetSkipMetadata(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetValues(System.Object[])">
            <summary>
             Bound values to the variables of this statement. This method provides a
             convenience to bound all the variables of the <c>BoundStatement</c> in
             one call.
            </summary>
            <param name="values"> the values to bind to the variables of the newly
             created BoundStatement. The first element of <c>values</c> will 
             be bound to the first bind variable,
             etc.. It is legal to provide less values than the statement has bound
             variables. In that case, the remaining variable need to be bound before
             execution. If more values than variables are provided however, an
             IllegalArgumentException will be raised. </param>
            <returns>this bound statement. </returns>
        </member>
        <member name="M:Dse.Statement.SetAutoPage(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetPagingState(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetReadTimeoutMillis(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetConsistencyLevel(System.Nullable{Dse.ConsistencyLevel})">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetSerialConsistencyLevel(Dse.ConsistencyLevel)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetTimestamp(System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.EnableTracing(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.DisableTracing">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetRetryPolicy(Dse.IRetryPolicy)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetIdempotence(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetPageSize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Dse.Statement.SetOutgoingPayload(System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <inheritdoc />
        </member>
        <member name="T:Dse.TableColumn">
            <summary>
            Represents a table column information
            </summary>
        </member>
        <member name="P:Dse.TableColumn.KeyType">
            <summary>
            Gets or sets the column key type.
            <para>
            This property is going to be deprecated in future releases, use 
            <see cref="P:Dse.DataCollectionMetadata.PartitionKeys"/>, <see cref="P:Dse.DataCollectionMetadata.ClusteringKeys"/>
            and <see cref="P:Dse.TableMetadata.Indexes"/> that provide a more accurate representation of a table or view keys
            and indexes.
            </para>
            </summary>
        </member>
        <member name="T:Dse.TableMetadata">
            <summary>
            Describes a Cassandra table
            </summary>
        </member>
        <member name="P:Dse.TableMetadata.Indexes">
            <summary>
            Gets the table indexes by name
            </summary>
        </member>
        <member name="P:Dse.TableOptions.IsCompactStorage">
            <summary>
             Whether the table uses the <c>COMPACT STORAGE</c> option.
            </summary>
            
            <returns>whether the table uses the <c>COMPACT STORAGE</c>
             option.</returns>
        </member>
        <member name="P:Dse.TableOptions.Comment">
            <summary>
             The commentary set for this table.
            </summary>
            
            <returns>the commentary set for this table, or <c>null</c> if noe has
             been set.</returns>
        </member>
        <member name="P:Dse.TableOptions.ReadRepairChance">
            <summary>
             The chance with which a read repair is triggered for this table.
            </summary>
            
            <returns>the read repair change set for table (in [0.0, 1.0]).</returns>
        </member>
        <member name="P:Dse.TableOptions.LocalReadRepairChance">
            <summary>
             The (cluster) local read repair chance set for this table.
            </summary>
            
            <returns>the local read repair change set for table (in [0.0, 1.0]).</returns>
        </member>
        <member name="P:Dse.TableOptions.ReplicateOnWrite">
            <summary>
             Whether replicateOnWrite is set for this table. This is only meaningful for
             tables holding counters.
            </summary>
            
            <returns>whether replicateOnWrite is set for this table.</returns>
        </member>
        <member name="P:Dse.TableOptions.GcGraceSeconds">
            <summary>
             The tombstone garbage collection grace time in seconds for this table.
            </summary>
            
            <returns>the tombstone garbage collection grace time in seconds for this
             table.</returns>
        </member>
        <member name="P:Dse.TableOptions.BloomFilterFpChance">
            <summary>
             The false positive chance for the bloom filter of this table.
            </summary>
            
            <returns>the bloom filter false positive chance for this table (in [0.0,
             1.0]).</returns>
        </member>
        <member name="P:Dse.TableOptions.Caching">
            <summary>
             The caching option for this table.
            </summary>
            
            <returns>the caching option for this table.</returns>
        </member>
        <member name="P:Dse.TableOptions.CompactionOptions">
            <summary>
             The compaction options for this table.
            </summary>
            
            <returns>a dictionary containing the compaction options for this table.</returns>
        </member>
        <member name="P:Dse.TableOptions.CompressionParams">
            <summary>
             The compression options for this table.
            </summary>
            
            <returns>a dictionary containing the compression options for this table.</returns>
        </member>
        <member name="P:Dse.TableOptions.NodeSync">
            <summary>
            Represents the nodesync options for this table.
            <para>
            For DSE versions prior to 6.0.0, this method always returns <c>null</c>.  If nodesync
            was not explicitly configured for this table this method will also return <c>null</c>.
            </para>
            </summary>
        </member>
        <member name="P:Dse.TargettedSimpleStatement.PreferredHost">
            <summary>
            The preferred host to be used by the load balancing policy.
            </summary>
        </member>
        <member name="T:Dse.Tasks.HashedWheelTimer">
            <summary>
            A reusable low precision timer with approximate scheduling
            </summary>
            <remarks>
            <para>
            Timeout actions are executed on a ThreadPool thread supplied by the system. If you need to execute blocking operations, 
            it is recommended that you start a new Task using a TaskScheduler.
            </para>
            Based on George Varghese and Tony Lauck's paper, <a href="http://cseweb.ucsd.edu/users/varghese/PAPERS/twheel.ps.Z"> 
            Hashed and Hierarchical Timing Wheels: data structures to efficiently implement a timer facility</a>
            </remarks>
        </member>
        <member name="P:Dse.Tasks.HashedWheelTimer.Index">
            <summary>
            Represents the index of the next tick
            </summary>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.Start">
            <summary>
            Starts the timer explicitly.
            <para>Calls to <see cref="M:Dse.Tasks.HashedWheelTimer.NewTimeout(System.Action{System.Object},System.Object,System.Int64)"/> will internally call this method.</para>
            </summary>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.Dispose">
            <summary>
            Releases the underlying timer instance.
            </summary>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.NewTimeout(System.Action{System.Object},System.Object,System.Int64)">
            <summary>
            Adds a new action to be executed with a delay
            </summary>
            <param name="action">
            Action to be executed. Consider that the action is going to be invoked in an IO thread.
            </param>
            <param name="state">Action state or null</param>
            <param name="delay">Delay in milliseconds</param>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.AddPending">
            <summary>
            Adds the timeouts to each bucket
            </summary>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.RemoveCancelled">
            <summary>
            Removes all cancelled timeouts from the buckets
            </summary>
        </member>
        <member name="T:Dse.Tasks.HashedWheelTimer.Bucket">
            <summary>
            Linked list of Timeouts to allow easy removal of HashedWheelTimeouts in the middle.
            Methods are not thread safe.
            </summary>
        </member>
        <member name="T:Dse.Tasks.HashedWheelTimer.ITimeout">
            <summary>
            Represents an scheduled timeout
            </summary>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.ITimeout.Cancel">
            <summary>
            Marks the timeout as cancelled if it hasn't expired yet.
            </summary>
            <returns>True if it has been cancelled by this call</returns>
        </member>
        <member name="M:Dse.Tasks.HashedWheelTimer.TimeoutItem.Expire">
            <summary>
            Execute the timeout action
            </summary>
        </member>
        <member name="P:Dse.Tasks.TaskHelper.Completed">
            <summary>
            Gets a single completed task
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.ToApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Returns an AsyncResult according to the .net async programming model (Begin)
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.FromException``1(System.Exception)">
            <summary>
            Returns a faulted task with the provided exception
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.WaitToComplete``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            Waits the task to transition to RanToComplete and returns the Task.Result.
            It throws the inner exception of the AggregateException in case there is a single exception.
            It throws the Aggregate exception when there is more than 1 inner exception.
            It throws a TimeoutException when the task didn't complete in the expected time.
            </summary>
            <param name="task">the task to wait upon</param>
            <param name="timeout">timeout in milliseconds</param>
            <exception cref="T:System.TimeoutException" />
            <exception cref="T:System.AggregateException" />
        </member>
        <member name="M:Dse.Tasks.TaskHelper.WaitToComplete(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Waits the task to transition to RanToComplete.
            It throws the inner exception of the AggregateException in case there is a single exception.
            It throws the Aggregate exception when there is more than 1 inner exception.
            It throws a TimeoutException when the task didn't complete in the expected time.
            </summary>
            <param name="task">the task to wait upon</param>
            <param name="timeout">timeout in milliseconds</param>
            <exception cref="T:System.TimeoutException" />
            <exception cref="T:System.AggregateException" />
        </member>
        <member name="M:Dse.Tasks.TaskHelper.WaitToCompleteAsync(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Waits the task to transition to RanToComplete.
            It throws the inner exception of the AggregateException in case there is a single exception.
            It throws the Aggregate exception when there is more than 1 inner exception.
            It throws a TimeoutException when the task didn't complete in the expected time.
            </summary>
            <param name="task">the task to wait upon</param>
            <param name="timeout">timeout in milliseconds</param>
            <exception cref="T:System.TimeoutException" />
            <exception cref="T:System.AggregateException" />
        </member>
        <member name="M:Dse.Tasks.TaskHelper.TrySet``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Exception,``0)">
            <summary>
            Attempts to transition the underlying Task to RanToCompletion or Faulted state.
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.ContinueSync``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Smart ContinueWith that executes the sync delegate once the initial task is completed and returns 
            a Task of the result of sync delegate while propagating exceptions
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.DoNextAndHandle``2(System.Threading.Tasks.TaskCompletionSource{``1},System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Invokes the next function immediately and assigns the result to a Task, propagating exceptions to the new Task
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Once Task is completed with another Task, returning the second task, propagating exceptions to the second Task.
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.TaskCompletionSourceWithTimeout``1(System.Int32,System.Func{System.Exception})">
            <summary>
            It creates a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> that transitions to Faulted once 
            </summary>
            <typeparam name="T">The type of the result value associated with this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/></typeparam>
            <param name="milliseconds">The timer due time in milliseconds</param>
            <param name="newTimeoutException">The method to call in case timeout expired</param>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.ScheduleExecution``1(System.Func{``0},Dse.Tasks.HashedWheelTimer,System.Int32)">
            <summary>
            Executes method after the provided delay
            </summary>
        </member>
        <member name="M:Dse.Tasks.TaskHelper.Forget(System.Threading.Tasks.Task)">
            <summary>
            Designed for Tasks that were started but the result should not be awaited upon (fire and forget).
            </summary>
        </member>
        <member name="T:Dse.TcpSocket">
            <summary>
            Represents a Tcp connection to a host.
            It emits Read and WriteCompleted events when data is received.
            Similar to Netty's Channel or Node.js's net.Socket
            It handles TLS validation and encryption when required.
            </summary>
        </member>
        <member name="E:Dse.TcpSocket.Read">
            <summary>
            Event that gets fired when new data is received.
            </summary>
        </member>
        <member name="E:Dse.TcpSocket.WriteCompleted">
            <summary>
            Event that gets fired when a write async request have been completed.
            </summary>
        </member>
        <member name="E:Dse.TcpSocket.Closing">
            <summary>
            Event that is fired when the host is closing the connection.
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.#ctor(System.Net.IPEndPoint,Dse.SocketOptions,Dse.SSLOptions)">
            <summary>
            Creates a new instance of TcpSocket using the endpoint and options provided.
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.Init">
            <summary>
            Initializes the socket options
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.Connect">
            <summary>
            Connects asynchronously to the host and starts reading
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Throws a SocketException when the connection could not be established with the host</exception>
        </member>
        <member name="M:Dse.TcpSocket.ReceiveAsync">
            <summary>
            Begins an asynchronous request to receive data from a connected Socket object.
            It handles the exceptions in case there is one.
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.OnReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the receive completed event
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.OnReceiveStreamCallback(System.Threading.Tasks.Task{System.Int32})">
            <summary>
            Handles the callback for Completed or Cancelled Task on Stream mode
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.HandleStreamException(System.Exception)">
            <summary>
            Handles exceptions that the methods <c>NetworkStream.ReadAsync()</c> and <c>NetworkStream.WriteAsync()</c> can throw.
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.OnSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Handles the send completed event
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.OnSendStreamCallback(System.Threading.Tasks.Task)">
            <summary>
            Handles the continuation for WriteAsync faulted or Task on Stream mode
            </summary>
        </member>
        <member name="M:Dse.TcpSocket.Write(Microsoft.IO.RecyclableMemoryStream,System.Action)">
            <summary>
            Sends data asynchronously
            </summary>
        </member>
        <member name="T:Dse.TimeUuid">
            <summary>
            Represents a v1 uuid 
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.#ctor(System.Byte[],System.Byte[],System.DateTimeOffset)">
            <summary>
            Creates a new instance of <see cref="T:Dse.TimeUuid"/>.
            </summary>
            <param name="nodeId">6-byte node identifier</param>
            <param name="clockId">2-byte clock identifier</param>
            <param name="time">The timestamp</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Dse.TimeUuid.Equals(Dse.TimeUuid)">
            <summary>
            Returns a value indicating whether this instance and a specified TimeUuid object represent the same value.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified TimeUuid object represent the same value.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.GetDate">
            <summary>
            Gets the DateTimeOffset representation of this instance
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of this instance.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.ToGuid">
            <summary>
            Gets the Guid representation of the Id
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.CompareTo(Dse.TimeUuid)">
            <summary>
            Compares the current TimeUuid with another TimeUuid based on the time representation of this instance.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dse.TimeUuid.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.ToString(System.String)">
            <summary>
            Returns a string representation
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.Min(System.DateTimeOffset)">
            <summary>
            Returns the smaller possible type 1 uuid with the provided date.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.Max(System.DateTimeOffset)">
            <summary>
            Returns the biggest possible type 1 uuid with the provided Date.
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.NewId">
            <summary>
            Initializes a new instance of the TimeUuid structure, using a random node id and clock sequence and the current date time
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.NewId(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the TimeUuid structure, using a random node id and clock sequence
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.NewId(System.Byte[],System.Byte[],System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the TimeUuid structure
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.Parse(System.String)">
            <summary>
            Converts the string representation of a time-based uuid (v1) to the equivalent 
            <see cref="T:Dse.TimeUuid"/> structure.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.TimeUuid.op_Implicit(Dse.TimeUuid)~System.Guid">
            <summary>
            From TimeUuid to Guid
            </summary>
        </member>
        <member name="M:Dse.TimeUuid.op_Implicit(System.Guid)~Dse.TimeUuid">
            <summary>
            From Guid to TimeUuid
            </summary>
        </member>
        <member name="M:Dse.TokenMap.ComputeTokenToReplicaSimple(System.Int32,System.Int32,System.Collections.Generic.List{Dse.IToken},System.Collections.Generic.Dictionary{Dse.IToken,Dse.Host})">
            <summary>
            Converts token-primary to token-replicas
            </summary>
        </member>
        <member name="T:Dse.TypeAdapters">
            <summary>
            TypeAdapters are deprecated and will be removed in future versions. Use <see cref="T:Dse.Serialization.TypeSerializer`1"/> instead.
            <para>
            Backwards compatibility only.
            </para>
            </summary>
        </member>
        <member name="T:Dse.UdtMap`1">
            <summary>
            Represents a map between a UDT in Cassandra and a .NET Type, including data on how to map from UDT field names
            to Properties on the .NET Type.
            </summary>
            <typeparam name="T">The .NET Type to map the UDT to.</typeparam>
        </member>
        <member name="M:Dse.UdtMap`1.Automap">
            <summary>
            Maps properties by name
            </summary>
        </member>
        <member name="M:Dse.UdtMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Configures the driver to map the specified property on the .NET Type to the specified UDT field name.
            </summary>
        </member>
        <member name="T:Dse.UdtMap">
            <summary>
            Represents a map between a user defined type in Cassandra and a .NET Type, with data on how
            to map field names in the UDT to .NET property names.
            </summary>
        </member>
        <member name="M:Dse.UdtMap.Automap">
            <summary>
            Maps properties and fields by name
            </summary>
        </member>
        <member name="M:Dse.UdtMap.Build(Dse.UdtColumnInfo)">
            <summary>
            Builds the mapping using the Udt definition.
            Sets the definition, validates the fields vs the mapped fields.
            In case there isn't any property mapped defined, it auto maps the properties by name
            </summary>
        </member>
        <member name="M:Dse.UdtMap.CreateInstance">
            <summary>
            Creates a new instance of the target .NET type
            </summary>
        </member>
        <member name="M:Dse.UdtMap.GetUdtFieldName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the UDT field name for a given property.
            </summary>
        </member>
        <member name="M:Dse.UdtMap.GetPropertyForUdtField(System.String)">
            <summary>
            Gets the PropertyInfo that corresponds to the specified UDT field name.
            </summary>
        </member>
        <member name="M:Dse.UdtMap.For``1(System.String)">
            <summary>
            Creates a new UdtMap for the specified .NET type, optionally mapped to the specified UDT name.
            </summary>
        </member>
        <member name="M:Dse.UdtMap.ToObject(System.Object[])">
            <summary>
            Creates a new instance of the mapped object and sets the values
            </summary>
        </member>
        <member name="T:Dse.UdtMappingDefinitions">
            <summary>
            Allows configuration of user defined types.
            </summary>
        </member>
        <member name="M:Dse.UdtMappingDefinitions.Define(Dse.UdtMap[])">
            <summary>
            Add mapping definition(s) for UDTs, specifying how UDTs should be mapped to .NET types and vice versa.
            </summary>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Dse.UdtMappingDefinitions.DefineAsync(Dse.UdtMap[])">
            <summary>
            Add mapping definition(s) for UDTs, specifying how UDTs should be mapped to .NET types and vice versa.
            </summary>
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="M:Dse.UdtMappingDefinitions.GetDefinitionAsync(System.String,Dse.UdtMap)">
            <summary>
            Gets the definition and validates the fields
            </summary>
            <exception cref="T:Dse.InvalidTypeException" />
        </member>
        <member name="T:Dse.Unset">
            <summary>
            The Unset class represents a unspecified value. 
            <para>
            In Cassandra 2.2 and above, when executing a UPDATE or INSERT query, a parameter can be unset.
            Designed to avoid tombstones, setting a parameter value to Unset will make Cassandra to ignore it.
            </para>
            <remarks>
            In some cases, we might be inserting rows using null for values that are not specified, and even though our intention is to leave the value empty, Cassandra will represent it as a tombstone causing an unnecessary overhead. 
            To avoid tombstones, in previous versions of Cassandra, you can use different query combinations only containing the fields that have a value.
            <para>
            The Unset type is a singleton class, which means only one Unset object exists. The Unset.Value member represents the sole Unset object.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:Dse.Unset.Value">
            <summary>
            Represents the sole instance of the Unset class.
            </summary>
        </member>
        <member name="M:Dse.Utils.GetPrimaryHostNameInfo(System.String)">
            <summary>
            Performs a getnameinfo() call and returns the primary host name
            </summary>
        </member>
        <member name="M:Dse.Utils.JoinBuffers(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a new byte array that is the result of the sum of the 2 byte arrays: [1, 2] + [3, 4] = [1, 2, 3, 4]
            </summary>
        </member>
        <member name="M:Dse.Utils.JoinBuffers(System.Collections.Generic.IEnumerable{System.Byte[]},System.Int32)">
            <summary>
            Combines all the buffers in a new buffer.
            </summary>
        </member>
        <member name="M:Dse.Utils.SliceBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a new buffer as a slice of the provided buffer
            </summary>
            <param name="value"></param>
            <param name="startIndex">zero-based index</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Utils.FromOffset(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a new buffer as a slice of the provided buffer, if offset is greater than zero or count does not 
            match buffer length. Returns the same instance otherwise.
            </summary>
            <param name="value">The Buffer to slice</param>
            <param name="offset">zero-based index</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dse.Utils.CopyBuffer(System.Byte[])">
            <summary>
            Returns a new buffer with the bytes copied from the source buffer
            </summary>
        </member>
        <member name="M:Dse.Utils.ReadAllBytes(System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes in the stream from a given position
            </summary>
        </member>
        <member name="M:Dse.Utils.ReadAllBytes(System.Collections.Generic.IEnumerable{System.IO.Stream},System.Int64)">
            <summary>
            Reads all the bytes in the stream from a given position
            </summary>
        </member>
        <member name="M:Dse.Utils.CopyStream(System.IO.Stream,System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Copies an stream using the provided buffer to copy chunks
            </summary>
        </member>
        <member name="M:Dse.Utils.IsAnonymousType(System.Object)">
            <summary>
            Detects if the object is an instance of an anonymous type
            </summary>
        </member>
        <member name="M:Dse.Utils.IsAnonymousType(System.Type)">
            <summary>
            Determines if the type is anonymous
            </summary>
        </member>
        <member name="M:Dse.Utils.GetValues(System.Collections.Generic.IEnumerable{System.String},System.Object)">
            <summary>
            Gets the values of a given object in order given by the property names
            </summary>
        </member>
        <member name="M:Dse.Utils.GetValues(System.Object)">
            <summary>
            Gets the properties and values of a given object
            </summary>
        </member>
        <member name="M:Dse.Utils.CombineHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines the hash code based on the value of items.
            </summary>
        </member>
        <member name="M:Dse.Utils.IsSerialConsistencyLevel(Dse.ConsistencyLevel)">
            <summary>
            Returns true if the ConsistencyLevel is either <see cref="F:Dse.ConsistencyLevel.Serial"/> or <see cref="F:Dse.ConsistencyLevel.LocalSerial"/>,
            otherwise false.
            </summary>
        </member>
        <member name="M:Dse.Utils.ToCollectionType(System.Type,System.Type,System.Array)">
            <summary>
            Creates a new instance of the collection type with the values provided
            </summary>
        </member>
        <member name="M:Dse.Utils.IsIEnumerable(System.Type,System.Type@)">
            <summary>
            Returns true if the type is IEnumerable{T} or implements IEnumerable{T}
            </summary>
        </member>
        <member name="M:Dse.Utils.IsIDictionary(System.Type,System.Type@,System.Type@)">
            <summary>
            Returns true if the type is IDictionary{T} or implements IDictionary{T}
            </summary>
        </member>
        <member name="M:Dse.Utils.FillZeros(System.Int32,System.Int32)">
            <summary>
            Fill the zeros to the left
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.DecompressTagSlow(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             This is a second copy of the inner loop of decompressTags used when near the
             end of the input. The key difference is the reading of the trailer bytes. The
             fast code does a blind read of the next 4 bytes as an int, and this code
             assembles the int byte-by-byte to assure that the array is not over run. The
             reason this code path is separate is the if condition to choose between these
             two seemingly small differences costs like 10-20% of the throughput. I'm
             hoping in future' versions of hot-spot this code can be integrated into the
             main loop but for now it is worth the extra maintenance pain to get the extra
             10-20%.
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.IncrementalCopy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
             Copy "len" bytes from "src" to "op", one byte at a time. Used for handling
             COPY operations where the input and output regions may overlap. For example,
             suppose: src == "ab" op == src + 2 len == 20 After incrementalCopy, the
             result will have eleven copies of "ab" ababababababababababab Note that this
             does not match the semantics of either memcpy() or memmove().
            </summary>
        </member>
        <member name="M:Snappy.SnappyDecompressor.ReadUncompressedLength(System.Byte[],System.Int32)">
            <summary>
             Reads the variable length integer encoded a the specified offset, and returns
             this length with the number of bytes read.
            </summary>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStream">
            <summary>
            MemoryStream implementation that deals with pooling and managing memory streams which use potentially large
            buffers.
            </summary>
            <remarks>
            This class works in tandem with the RecylableMemoryStreamManager to supply MemoryStream
            objects to callers, while avoiding these specific problems:
            1. LOH allocations - since all large buffers are pooled, they will never incur a Gen2 GC
            2. Memory waste - A standard memory stream doubles its size when it runs out of room. This
            leads to continual memory growth as each stream approaches the maximum allowed size.
            3. Memory copying - Each time a MemoryStream grows, all the bytes are copied into new buffers.
            This implementation only copies the bytes when GetBuffer is called.
            4. Memory fragmentation - By using homogeneous buffer sizes, it ensures that blocks of memory
            can be easily reused.
            
            The stream is implemented on top of a series of uniformly-sized blocks. As the stream's length grows,
            additional blocks are retrieved from the memory manager. It is these blocks that are pooled, not the stream
            object itself.
            
            The biggest wrinkle in this implementation is when GetBuffer() is called. This requires a single 
            contiguous buffer. If only a single block is in use, then that block is returned. If multiple blocks 
            are in use, we retrieve a larger buffer from the memory manager. These large buffers are also pooled, 
            split by size--they are multiples of a chunk size (1 MB by default).
            
            Once a large buffer is assigned to the stream the blocks are NEVER again used for this stream. All operations take place on the 
            large buffer. The large buffer can be replaced by a larger buffer from the pool as needed. All blocks and large buffers 
            are maintained in the stream until the stream is disposed (unless AggressiveBufferReturn is enabled in the stream manager).
            
            </remarks>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.blocks">
            <summary>
            All of these blocks must be the same size
            </summary>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.largeBuffer">
            <summary>
            This is only set by GetBuffer() if the necessary buffer is larger than a single block size, or on
            construction if the caller immediately requests a single large buffer.
            </summary>
            <remarks>If this field is non-null, it contains the concatenation of the bytes found in the individual
            blocks. Once it is created, this (or a larger) largeBuffer will be used for the life of the stream.
            </remarks>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.dirtyBuffers">
            <summary>
            This list is used to store buffers once they're replaced by something larger.
            This is for the cases where you have users of this class that may hold onto the buffers longer
            than they should and you want to prevent race conditions which could corrupt the data.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Id">
            <summary>
            Unique identifier for this stream across it's entire lifetime
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Tag">
            <summary>
            A temporary identifier for the current usage of this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.MemoryManager">
            <summary>
            Gets the memory manager being used by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.AllocationStack">
            <summary>
            Callstack of the constructor. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.DisposeStack">
            <summary>
            Callstack of the Dispose call. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.byteBuffer">
            <summary>
            This buffer exists so that WriteByte can forward all of its calls to Write
            without creating a new byte[] buffer on every call.
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager)">
            <summary>
            Allocate a new RecyclableMemoryStream object.
            </summary>
            <param name="memoryManager">The memory manager</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager,System.String)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager,System.String,System.Int32)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager,System.String,System.Int32,System.Byte[])">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
            <param name="initialLargeBuffer">An initial buffer to use. This buffer will be owned by the stream and returned to the memory manager upon Dispose.</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Dispose(System.Boolean)">
            <summary>
            Returns the memory used by this stream back to the pool.
            </summary>
            <param name="disposing">Whether we're disposing (true), or being called by the finalizer (false)</param>
            <remarks>This method is not thread safe and it may not be called more than once.</remarks>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Close">
            <summary>
            Equivalent to Dispose
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Capacity">
            <summary>
            Gets or sets the capacity
            </summary>
            <remarks>Capacity is always in multiples of the memory manager's block size, unless
            the large buffer is in use.  Capacity never decreases during a stream's lifetime. 
            Explicitly setting the capacity to a lower value than the current value will have no effect. 
            This is because the buffers are all pooled by chunks and there's little reason to 
            allow stream truncation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Length">
            <summary>
            Gets the number of bytes written to this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Position">
            <summary>
            Gets the current position in the stream
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanRead">
            <summary>
            Whether the stream can currently read
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanSeek">
            <summary>
            Whether the stream can currently seek
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanTimeout">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanWrite">
            <summary>
            Whether the stream can currently write
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.GetBuffer">
            <summary>
            Returns a single buffer containing the contents of the stream.
            The buffer may be longer than the stream length.
            </summary>
            <returns>A byte[] buffer</returns>
            <remarks>IMPORTANT: Doing a Write() after calling GetBuffer() invalidates the buffer. The old buffer is held onto
            until Dispose is called, but the next time GetBuffer() is called, a new buffer from the pool will be required.</remarks>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ToArray">
            <summary>
            Returns a new array with a copy of the buffer's contents. You should almost certainly be using GetBuffer combined with the Length to 
            access the bytes in this stream. Calling ToArray will destroy the benefits of pooled buffers, but it is included
            for the sake of completeness.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the current position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Offset into buffer at which to start placing the read bytes.</param>
            <param name="count">Number of bytes to read.</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is less than 0</exception>
            <exception cref="T:System.ArgumentException">offset subtracted from the buffer length is less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the buffer to the stream
            </summary>
            <param name="buffer">Source buffer</param>
            <param name="offset">Start position</param>
            <param name="count">Number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative</exception>
            <exception cref="T:System.ArgumentException">buffer.Length - offset is not less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ToString">
            <summary>
            Returns a useful string for debugging. This should not normally be called in actual production code.
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the current position in the stream.
            </summary>
            <param name="value">byte value to write</param>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ReadByte">
            <summary>
            Reads a single byte from the current position in the stream.
            </summary>
            <returns>The byte at the current position, or -1 if the position is at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value is negative or larger than MaxStreamLength</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position to the offset from the seek location
            </summary>
            <param name="offset">How many bytes to move</param>
            <param name="loc">From where</param>
            <returns>The new position</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset is larger than MaxStreamLength</exception>
            <exception cref="T:System.ArgumentException">Invalid seek origin</exception>
            <exception cref="T:System.IO.IOException">Attempt to set negative position</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Synchronously writes this stream's bytes to the parameter stream.
            </summary>
            <param name="stream">Destination stream</param>
            <remarks>Important: This does a synchronous write, which may not be desired in some situations</remarks>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ReleaseLargeBuffer">
            <summary>
            Release the large buffer (either stores it for eventual release or returns it immediately).
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.GetBufferList">
            <summary>
            Creates a list of segments referencing the original buffers
            </summary>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager">
            <summary>
            Manages pools of RecyclableMemoryStream objects.
            </summary>
            <remarks>
            There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams
            as they write more data.
            
            For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all
            multiples of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer
            usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example.
            </remarks>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.EventHandler">
            <summary>
            Generic delegate for handling events without any arguments.
            </summary>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler">
            <summary>
            Delegate for handling reports of stream size when streams are allocated
            </summary>
            <param name="bytes">Bytes allocated.</param>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler">
            <summary>
            Delegate for handling periodic reporting of memory use statistics.
            </summary>
            <param name="smallPoolInUseBytes">Bytes currently in use in the small pool.</param>
            <param name="smallPoolFreeBytes">Bytes currently free in the small pool.</param>
            <param name="largePoolInUseBytes">Bytes currently in use in the large pool.</param>
            <param name="largePoolFreeBytes">Bytes currently free in the large pool.</param>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStreamManager.largePools">
            <summary>
            pools[0] = 1x largeBufferMultiple buffers
            pools[1] = 2x largeBufferMultiple buffers
            etc., up to maximumBufferSize
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.#ctor">
            <summary>
            Initializes the memory manager with the default block/buffer specifications.
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the memory manager with the given block requiredSize.
            </summary>
            <param name="blockSize">Size of each block that is pooled. Must be > 0.</param>
            <param name="largeBufferMultiple">Each large buffer will be a multiple of this value.</param>
            <param name="maximumBufferSize">Buffers larger than this are not pooled</param>
            <exception cref="T:System.ArgumentOutOfRangeException">blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize.</exception>
            <exception cref="T:System.ArgumentException">maximumBufferSize is not a multiple of largeBufferMultiple</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.BlockSize">
            <summary>
            The size of each block. It must be set at creation and cannot be changed.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferMultiple">
            <summary>
            All buffers are multiples of this number. It must be set at creation and cannot be changed.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumBufferSize">
            <summary>
            Gets or sets the maximum buffer size.
            </summary>
            <remarks>Any buffer that is returned to the pool that is larger than this will be
            discarded and garbage collected.</remarks>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.SmallPoolFreeSize">
            <summary>
            Number of bytes in small pool not currently in use
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.SmallPoolInUseSize">
            <summary>
            Number of bytes currently in use by stream from the small pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargePoolFreeSize">
            <summary>
            Number of bytes in large pool not currently in use
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargePoolInUseSize">
            <summary>
            Number of bytes currently in use by streams from the large pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.SmallBlocksFree">
            <summary>
            How many blocks are in the small pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargeBuffersFree">
            <summary>
            How many buffers are in the large pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumFreeSmallPoolBytes">
            <summary>
            How many bytes of small free blocks to allow before we start dropping
            those returned to us.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumFreeLargePoolBytes">
            <summary>
            How many bytes of large free buffers to allow before we start dropping
            those returned to us.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumStreamCapacity">
            <summary>
            Maximum stream capacity in bytes. Attempts to set a larger capacity will
            result in an exception.
            </summary>
            <remarks>A value of 0 indicates no limit.</remarks>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.GenerateCallStacks">
            <summary>
            Whether to save callstacks for stream allocations. This can help in debugging.
            It should NEVER be turned on generally in production.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.AggressiveBufferReturn">
            <summary>
            Whether dirty buffers can be immediately returned to the buffer pool. E.g. when GetBuffer() is called on
            a stream and creates a single large buffer, if this setting is enabled, the other blocks will be returned
            to the buffer pool immediately.
            Note when enabling this setting that the user is responsible for ensuring that any buffer previously
            retrieved from a stream which is subsequently modified is not used after modification (as it may no longer
            be valid).
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetBlock">
            <summary>
            Removes and returns a single block from the pool.
            </summary>
            <returns>A byte[] array</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetLargeBuffer(System.Int32,System.String)">
            <summary>
            Returns a buffer of arbitrary size from the large buffer pool. This buffer
            will be at least the requiredSize and always be a multiple of largeBufferMultiple.
            </summary>
            <param name="requiredSize">The minimum length of the buffer</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <returns>A buffer of at least the required size.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.ReturnLargeBuffer(System.Byte[],System.String)">
            <summary>
            Returns the buffer to the large pool
            </summary>
            <param name="buffer">The buffer to return.</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">buffer.Length is not a multiple of LargeBufferMultiple (it did not originate from this pool)</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.ReturnBlocks(System.Collections.Generic.ICollection{System.Byte[]},System.String)">
            <summary>
            Returns the blocks to the pool
            </summary>
            <param name="blocks">Collection of blocks to return to the pool</param>
            <param name="tag">The tag of the stream returning these blocks, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">blocks is null</exception>
            <exception cref="T:System.ArgumentException">blocks contains buffers that are the wrong size (or null) for this memory manager</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream">
            <summary>
            Retrieve a new MemoryStream object with no tag and a default initial capacity.
            </summary>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and a default initial capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using
            a single continugous underlying buffer.
            </summary>
            <remarks>Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations
            where the initial size is known and it is desirable to avoid copying data between the smaller underlying
            buffers to a single large one. This is most helpful when you know that you will always call GetBuffer
            on the underlying stream.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <param name="asContiguousBuffer">Whether to attempt to use a single contiguous buffer.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <param name="offset">The offset from the start of the buffer to copy from.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.BlockCreated">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.BlockDiscarded">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferCreated">
            <summary>
            Triggered when a new large buffer is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamCreated">
            <summary>
            Triggered when a new stream is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamDisposed">
            <summary>
            Triggered when a stream is disposed.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamFinalized">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamLength">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamConvertedToArray">
            <summary>
            Triggered when a user converts a stream to array.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.UsageReport">
            <summary>
            Periodically triggered to report usage statistics.
            </summary>
        </member>
    </members>
</doc>
